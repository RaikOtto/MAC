# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_COPASI', [dirname(__file__)])
        except ImportError:
            import _COPASI
            return _COPASI
        if fp is not None:
            try:
                _mod = imp.load_module('_COPASI', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _COPASI = swig_import_helper()
    del swig_import_helper
else:
    import _COPASI
del version_info
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types

AVOGADRO = _COPASI.AVOGADRO
SS_FOUND = _COPASI.SS_FOUND
SS_NOT_FOUND = _COPASI.SS_NOT_FOUND
SS_SINGULAR_JACOBIAN = _COPASI.SS_SINGULAR_JACOBIAN
SS_DAMPING_LIMIT = _COPASI.SS_DAMPING_LIMIT
SS_ITERATION_LIMIT = _COPASI.SS_ITERATION_LIMIT
MCA_OK = _COPASI.MCA_OK
MCA_SINGULAR = _COPASI.MCA_SINGULAR
TriUnspecified = _COPASI.TriUnspecified
TriFalse = _COPASI.TriFalse
TriTrue = _COPASI.TriTrue

def INVALID_INDEX():
  return _COPASI.INVALID_INDEX()
INVALID_INDEX = _COPASI.INVALID_INDEX
class SwigPyIterator:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _COPASI.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _COPASI.SwigPyIterator_value(self)
    def incr(self, n = 1): return _COPASI.SwigPyIterator_incr(self, n)
    def decr(self, n = 1): return _COPASI.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _COPASI.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _COPASI.SwigPyIterator_equal(self, *args)
    def copy(self): return _COPASI.SwigPyIterator_copy(self)
    def next(self): return _COPASI.SwigPyIterator_next(self)
    def __next__(self): return _COPASI.SwigPyIterator___next__(self)
    def previous(self): return _COPASI.SwigPyIterator_previous(self)
    def advance(self, *args): return _COPASI.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _COPASI.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _COPASI.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _COPASI.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _COPASI.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _COPASI.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _COPASI.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _COPASI.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class FloatVectorCore:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FloatVectorCore, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FloatVectorCore, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _COPASI.new_FloatVectorCore()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _COPASI.delete_FloatVectorCore
    __del__ = lambda self : None;
    def size(self): return _COPASI.FloatVectorCore_size(self)
    def __call__(self, *args): return _COPASI.FloatVectorCore___call__(self, *args)
    def get(self, *args): return _COPASI.FloatVectorCore_get(self, *args)
    def __len__(self): return _COPASI.FloatVectorCore___len__(self)
FloatVectorCore_swigregister = _COPASI.FloatVectorCore_swigregister
FloatVectorCore_swigregister(FloatVectorCore)

class FloatVector(FloatVectorCore):
    __swig_setmethods__ = {}
    for _s in [FloatVectorCore]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FloatVector, name, value)
    __swig_getmethods__ = {}
    for _s in [FloatVectorCore]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FloatVector, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _COPASI.new_FloatVector(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _COPASI.delete_FloatVector
    __del__ = lambda self : None;
FloatVector_swigregister = _COPASI.FloatVector_swigregister
FloatVector_swigregister(FloatVector)

class ULongVectorCore:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ULongVectorCore, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ULongVectorCore, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _COPASI.new_ULongVectorCore()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _COPASI.delete_ULongVectorCore
    __del__ = lambda self : None;
    def size(self): return _COPASI.ULongVectorCore_size(self)
    def __call__(self, *args): return _COPASI.ULongVectorCore___call__(self, *args)
    def get(self, *args): return _COPASI.ULongVectorCore_get(self, *args)
    def __len__(self): return _COPASI.ULongVectorCore___len__(self)
ULongVectorCore_swigregister = _COPASI.ULongVectorCore_swigregister
ULongVectorCore_swigregister(ULongVectorCore)

class ULongVector(ULongVectorCore):
    __swig_setmethods__ = {}
    for _s in [ULongVectorCore]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ULongVector, name, value)
    __swig_getmethods__ = {}
    for _s in [ULongVectorCore]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ULongVector, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _COPASI.new_ULongVector(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _COPASI.delete_ULongVector
    __del__ = lambda self : None;
ULongVector_swigregister = _COPASI.ULongVector_swigregister
ULongVector_swigregister(ULongVector)

class SizeTVectorCore:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SizeTVectorCore, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SizeTVectorCore, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _COPASI.new_SizeTVectorCore()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _COPASI.delete_SizeTVectorCore
    __del__ = lambda self : None;
    def size(self): return _COPASI.SizeTVectorCore_size(self)
    def __call__(self, *args): return _COPASI.SizeTVectorCore___call__(self, *args)
    def get(self, *args): return _COPASI.SizeTVectorCore_get(self, *args)
    def __len__(self): return _COPASI.SizeTVectorCore___len__(self)
SizeTVectorCore_swigregister = _COPASI.SizeTVectorCore_swigregister
SizeTVectorCore_swigregister(SizeTVectorCore)

class SizeTVector(SizeTVectorCore):
    __swig_setmethods__ = {}
    for _s in [SizeTVectorCore]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SizeTVector, name, value)
    __swig_getmethods__ = {}
    for _s in [SizeTVectorCore]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SizeTVector, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _COPASI.new_SizeTVector(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _COPASI.delete_SizeTVector
    __del__ = lambda self : None;
SizeTVector_swigregister = _COPASI.SizeTVector_swigregister
SizeTVector_swigregister(SizeTVector)

class ObjectVectorCore:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ObjectVectorCore, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ObjectVectorCore, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _COPASI.new_ObjectVectorCore()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _COPASI.delete_ObjectVectorCore
    __del__ = lambda self : None;
    def size(self): return _COPASI.ObjectVectorCore_size(self)
    def __call__(self, *args): return _COPASI.ObjectVectorCore___call__(self, *args)
    def get(self, *args): return _COPASI.ObjectVectorCore_get(self, *args)
    def __len__(self): return _COPASI.ObjectVectorCore___len__(self)
ObjectVectorCore_swigregister = _COPASI.ObjectVectorCore_swigregister
ObjectVectorCore_swigregister(ObjectVectorCore)

class ObjectVector(ObjectVectorCore):
    __swig_setmethods__ = {}
    for _s in [ObjectVectorCore]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ObjectVector, name, value)
    __swig_getmethods__ = {}
    for _s in [ObjectVectorCore]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ObjectVector, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _COPASI.new_ObjectVector(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _COPASI.delete_ObjectVector
    __del__ = lambda self : None;
ObjectVector_swigregister = _COPASI.ObjectVector_swigregister
ObjectVector_swigregister(ObjectVector)

class CRandom:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CRandom, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CRandom, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    r250 = _COPASI.CRandom_r250
    mt19937 = _COPASI.CRandom_mt19937
    mt19937HR = _COPASI.CRandom_mt19937HR
    __swig_getmethods__["getSystemSeed"] = lambda x: _COPASI.CRandom_getSystemSeed
    __swig_getmethods__["createGenerator"] = lambda x: _COPASI.CRandom_createGenerator
    __swig_destroy__ = _COPASI.delete_CRandom
    __del__ = lambda self : None;
    def getType(self): return _COPASI.CRandom_getType(self)
    def getModulus(self): return _COPASI.CRandom_getModulus(self)
    def initialize(self, *args): return _COPASI.CRandom_initialize(self, *args)
    def getRandomU(self, *args): return _COPASI.CRandom_getRandomU(self, *args)
    def getRandomS(self, *args): return _COPASI.CRandom_getRandomS(self, *args)
    def getRandomCC(self): return _COPASI.CRandom_getRandomCC(self)
    def getRandomCO(self): return _COPASI.CRandom_getRandomCO(self)
    def getRandomOO(self): return _COPASI.CRandom_getRandomOO(self)
    def getRandomNormal01(self): return _COPASI.CRandom_getRandomNormal01(self)
    def getRandomNormal(self, *args): return _COPASI.CRandom_getRandomNormal(self, *args)
    def getRandomNormalPositive(self, *args): return _COPASI.CRandom_getRandomNormalPositive(self, *args)
    def getRandomNormalLog(self, *args): return _COPASI.CRandom_getRandomNormalLog(self, *args)
    def getRandomPoisson(self, *args): return _COPASI.CRandom_getRandomPoisson(self, *args)
    def getRandomExp(self): return _COPASI.CRandom_getRandomExp(self)
CRandom_swigregister = _COPASI.CRandom_swigregister
CRandom_swigregister(CRandom)

def CRandom_getSystemSeed():
  return _COPASI.CRandom_getSystemSeed()
CRandom_getSystemSeed = _COPASI.CRandom_getSystemSeed

def CRandom_createGenerator(*args):
  return _COPASI.CRandom_createGenerator(*args)
CRandom_createGenerator = _COPASI.CRandom_createGenerator

MCopasiBase = _COPASI.MCopasiBase
MCReadConfig = _COPASI.MCReadConfig
MCWriteConfig = _COPASI.MCWriteConfig
MCRange = _COPASI.MCRange
MCKinFunction = _COPASI.MCKinFunction
MCCopasiVector = _COPASI.MCCopasiVector
MCFunctionParameters = _COPASI.MCFunctionParameters
MCMassAction = _COPASI.MCMassAction
MCCopasiMethod = _COPASI.MCCopasiMethod
MCReaction = _COPASI.MCReaction
MCParameter = _COPASI.MCParameter
MCChemEq = _COPASI.MCChemEq
MCTrajectoryMethod = _COPASI.MCTrajectoryMethod
MCXML = _COPASI.MCXML
MCCopasiMessage = _COPASI.MCCopasiMessage
MCConfiguration = _COPASI.MCConfiguration
MCOptimization = _COPASI.MCOptimization
MCSBML = _COPASI.MCSBML
MCTrajectoryProblem = _COPASI.MCTrajectoryProblem
MCDirEntry = _COPASI.MCDirEntry
MCFunction = _COPASI.MCFunction
MCMathML = _COPASI.MCMathML
MCEvaluationNodeObject = _COPASI.MCEvaluationNodeObject
MCCopasiTask = _COPASI.MCCopasiTask
MCSteadyState = _COPASI.MCSteadyState
MCFitting = _COPASI.MCFitting
MCObject = _COPASI.MCObject
MCLyap = _COPASI.MCLyap
MCODEExporter = _COPASI.MCODEExporter
MCRegistration = _COPASI.MCRegistration
MCTSSAMethod = _COPASI.MCTSSAMethod
MCTSSAProblem = _COPASI.MCTSSAProblem
MCEigen = _COPASI.MCEigen
MCMiriam = _COPASI.MCMiriam
MCMathModel = _COPASI.MCMathModel
MCModelMerging = _COPASI.MCModelMerging
MCModelExpansion = _COPASI.MCModelExpansion
MCEFMAnalysis = _COPASI.MCEFMAnalysis
MCLayout = _COPASI.MCLayout
class CCopasiMessage:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CCopasiMessage, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CCopasiMessage, name)
    __repr__ = _swig_repr
    RAW = _COPASI.CCopasiMessage_RAW
    TRACE = _COPASI.CCopasiMessage_TRACE
    COMMANDLINE = _COPASI.CCopasiMessage_COMMANDLINE
    WARNING = _COPASI.CCopasiMessage_WARNING
    ERROR = _COPASI.CCopasiMessage_ERROR
    EXCEPTION = _COPASI.CCopasiMessage_EXCEPTION
    RAW_FILTERED = _COPASI.CCopasiMessage_RAW_FILTERED
    TRACE_FILTERED = _COPASI.CCopasiMessage_TRACE_FILTERED
    COMMANDLINE_FILTERED = _COPASI.CCopasiMessage_COMMANDLINE_FILTERED
    WARNING_FILTERED = _COPASI.CCopasiMessage_WARNING_FILTERED
    ERROR_FILTERED = _COPASI.CCopasiMessage_ERROR_FILTERED
    EXCEPTION_FILTERED = _COPASI.CCopasiMessage_EXCEPTION_FILTERED
    __swig_getmethods__["peekFirstMessage"] = lambda x: _COPASI.CCopasiMessage_peekFirstMessage
    __swig_getmethods__["peekLastMessage"] = lambda x: _COPASI.CCopasiMessage_peekLastMessage
    __swig_getmethods__["getFirstMessage"] = lambda x: _COPASI.CCopasiMessage_getFirstMessage
    __swig_getmethods__["getLastMessage"] = lambda x: _COPASI.CCopasiMessage_getLastMessage
    __swig_getmethods__["getAllMessageText"] = lambda x: _COPASI.CCopasiMessage_getAllMessageText
    __swig_getmethods__["clearDeque"] = lambda x: _COPASI.CCopasiMessage_clearDeque
    __swig_getmethods__["size"] = lambda x: _COPASI.CCopasiMessage_size
    __swig_getmethods__["getHighestSeverity"] = lambda x: _COPASI.CCopasiMessage_getHighestSeverity
    __swig_getmethods__["checkForMessage"] = lambda x: _COPASI.CCopasiMessage_checkForMessage
    def __init__(self, *args): 
        this = _COPASI.new_CCopasiMessage(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _COPASI.delete_CCopasiMessage
    __del__ = lambda self : None;
    def getText(self): return _COPASI.CCopasiMessage_getText(self)
    def getType(self): return _COPASI.CCopasiMessage_getType(self)
    def getNumber(self): return _COPASI.CCopasiMessage_getNumber(self)
CCopasiMessage_swigregister = _COPASI.CCopasiMessage_swigregister
CCopasiMessage_swigregister(CCopasiMessage)

def CCopasiMessage_peekFirstMessage():
  return _COPASI.CCopasiMessage_peekFirstMessage()
CCopasiMessage_peekFirstMessage = _COPASI.CCopasiMessage_peekFirstMessage

def CCopasiMessage_peekLastMessage():
  return _COPASI.CCopasiMessage_peekLastMessage()
CCopasiMessage_peekLastMessage = _COPASI.CCopasiMessage_peekLastMessage

def CCopasiMessage_getFirstMessage():
  return _COPASI.CCopasiMessage_getFirstMessage()
CCopasiMessage_getFirstMessage = _COPASI.CCopasiMessage_getFirstMessage

def CCopasiMessage_getLastMessage():
  return _COPASI.CCopasiMessage_getLastMessage()
CCopasiMessage_getLastMessage = _COPASI.CCopasiMessage_getLastMessage

def CCopasiMessage_getAllMessageText(chronological = True):
  return _COPASI.CCopasiMessage_getAllMessageText(chronological)
CCopasiMessage_getAllMessageText = _COPASI.CCopasiMessage_getAllMessageText

def CCopasiMessage_clearDeque():
  return _COPASI.CCopasiMessage_clearDeque()
CCopasiMessage_clearDeque = _COPASI.CCopasiMessage_clearDeque

def CCopasiMessage_size():
  return _COPASI.CCopasiMessage_size()
CCopasiMessage_size = _COPASI.CCopasiMessage_size

def CCopasiMessage_getHighestSeverity():
  return _COPASI.CCopasiMessage_getHighestSeverity()
CCopasiMessage_getHighestSeverity = _COPASI.CCopasiMessage_getHighestSeverity

def CCopasiMessage_checkForMessage(*args):
  return _COPASI.CCopasiMessage_checkForMessage(*args)
CCopasiMessage_checkForMessage = _COPASI.CCopasiMessage_checkForMessage

class CKeyFactory:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CKeyFactory, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CKeyFactory, name)
    __repr__ = _swig_repr
    __swig_getmethods__["isValidKey"] = lambda x: _COPASI.CKeyFactory_isValidKey
    def __init__(self): 
        this = _COPASI.new_CKeyFactory()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _COPASI.delete_CKeyFactory
    __del__ = lambda self : None;
    def get(self, *args): return _COPASI.CKeyFactory_get(self, *args)
CKeyFactory_swigregister = _COPASI.CKeyFactory_swigregister
CKeyFactory_swigregister(CKeyFactory)

def CKeyFactory_isValidKey(*args):
  return _COPASI.CKeyFactory_isValidKey(*args)
CKeyFactory_isValidKey = _COPASI.CKeyFactory_isValidKey

class CCopasiException(Exception):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CCopasiException, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CCopasiException, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _COPASI.new_CCopasiException(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _COPASI.delete_CCopasiException
    __del__ = lambda self : None;
    def getMessage(self): return _COPASI.CCopasiException_getMessage(self)
CCopasiException_swigregister = _COPASI.CCopasiException_swigregister
CCopasiException_swigregister(CCopasiException)

class CCopasiObjectName:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CCopasiObjectName, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CCopasiObjectName, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _COPASI.new_CCopasiObjectName(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _COPASI.delete_CCopasiObjectName
    __del__ = lambda self : None;
    def getPrimary(self): return _COPASI.CCopasiObjectName_getPrimary(self)
    def getRemainder(self): return _COPASI.CCopasiObjectName_getRemainder(self)
    def getObjectType(self): return _COPASI.CCopasiObjectName_getObjectType(self)
    def getObjectName(self): return _COPASI.CCopasiObjectName_getObjectName(self)
    def getElementIndex(self, pos = 0): return _COPASI.CCopasiObjectName_getElementIndex(self, pos)
    def getElementName(self, *args): return _COPASI.CCopasiObjectName_getElementName(self, *args)
    __swig_getmethods__["escape"] = lambda x: _COPASI.CCopasiObjectName_escape
    __swig_getmethods__["unescape"] = lambda x: _COPASI.CCopasiObjectName_unescape
    def getString(self): return _COPASI.CCopasiObjectName_getString(self)
CCopasiObjectName_swigregister = _COPASI.CCopasiObjectName_swigregister
CCopasiObjectName_swigregister(CCopasiObjectName)

def CCopasiObjectName_escape(*args):
  return _COPASI.CCopasiObjectName_escape(*args)
CCopasiObjectName_escape = _COPASI.CCopasiObjectName_escape

def CCopasiObjectName_unescape(*args):
  return _COPASI.CCopasiObjectName_unescape(*args)
CCopasiObjectName_unescape = _COPASI.CCopasiObjectName_unescape

class CRegisteredObjectName(CCopasiObjectName):
    __swig_setmethods__ = {}
    for _s in [CCopasiObjectName]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CRegisteredObjectName, name, value)
    __swig_getmethods__ = {}
    for _s in [CCopasiObjectName]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CRegisteredObjectName, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _COPASI.new_CRegisteredObjectName(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _COPASI.delete_CRegisteredObjectName
    __del__ = lambda self : None;
CRegisteredObjectName_swigregister = _COPASI.CRegisteredObjectName_swigregister
CRegisteredObjectName_swigregister(CRegisteredObjectName)

class CCopasiObject:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CCopasiObject, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CCopasiObject, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _COPASI.new_CCopasiObject(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _COPASI.delete_CCopasiObject
    __del__ = lambda self : None;
    def setObjectName(self, *args): return _COPASI.CCopasiObject_setObjectName(self, *args)
    def getObjectName(self): return _COPASI.CCopasiObject_getObjectName(self)
    def getObjectDisplayName(self, regular = True, richtext = False): return _COPASI.CCopasiObject_getObjectDisplayName(self, regular, richtext)
    def getObjectType(self): return _COPASI.CCopasiObject_getObjectType(self)
    def setObjectParent(self, *args): return _COPASI.CCopasiObject_setObjectParent(self, *args)
    def getObjectParent(self): return _COPASI.CCopasiObject_getObjectParent(self)
    def getObjectDataModel(self): return _COPASI.CCopasiObject_getObjectDataModel(self)
    def getObjectAncestor(self, *args): return _COPASI.CCopasiObject_getObjectAncestor(self, *args)
    def getCN(self): return _COPASI.CCopasiObject_getCN(self)
    def getObject(self, *args): return _COPASI.CCopasiObject_getObject(self, *args)
    def clearDirectDependencies(self): return _COPASI.CCopasiObject_clearDirectDependencies(self)
    def addDirectDependency(self, *args): return _COPASI.CCopasiObject_addDirectDependency(self, *args)
    def removeDirectDependency(self, *args): return _COPASI.CCopasiObject_removeDirectDependency(self, *args)
    def getPrerequisites(self): return _COPASI.CCopasiObject_getPrerequisites(self)
    def isPrerequisiteForContext(self, *args): return _COPASI.CCopasiObject_isPrerequisiteForContext(self, *args)
    def getUnits(self): return _COPASI.CCopasiObject_getUnits(self)
    def isContainer(self): return _COPASI.CCopasiObject_isContainer(self)
    def isVector(self): return _COPASI.CCopasiObject_isVector(self)
    def isMatrix(self): return _COPASI.CCopasiObject_isMatrix(self)
    def isNameVector(self): return _COPASI.CCopasiObject_isNameVector(self)
    def isReference(self): return _COPASI.CCopasiObject_isReference(self)
    def isValueBool(self): return _COPASI.CCopasiObject_isValueBool(self)
    def isValueInt(self): return _COPASI.CCopasiObject_isValueInt(self)
    def isValueInt64(self): return _COPASI.CCopasiObject_isValueInt64(self)
    def isValueDbl(self): return _COPASI.CCopasiObject_isValueDbl(self)
    def isNonUniqueName(self): return _COPASI.CCopasiObject_isNonUniqueName(self)
    def isStaticString(self): return _COPASI.CCopasiObject_isStaticString(self)
    def isValueString(self): return _COPASI.CCopasiObject_isValueString(self)
    def isSeparator(self): return _COPASI.CCopasiObject_isSeparator(self)
    def isArray(self): return _COPASI.CCopasiObject_isArray(self)
    def isDataModel(self): return _COPASI.CCopasiObject_isDataModel(self)
    def isRoot(self): return _COPASI.CCopasiObject_isRoot(self)
    def getValueObject(self): return _COPASI.CCopasiObject_getValueObject(self)
    def getKey(self): return _COPASI.CCopasiObject_getKey(self)
    def setObjectValue(self, *args): return _COPASI.CCopasiObject_setObjectValue(self, *args)
    def hasUpdateMethod(self): return _COPASI.CCopasiObject_hasUpdateMethod(self)
    def clearRefresh(self): return _COPASI.CCopasiObject_clearRefresh(self)
CCopasiObject_swigregister = _COPASI.CCopasiObject_swigregister
CCopasiObject_swigregister(CCopasiObject)

class FloatReference(CCopasiObject):
    __swig_setmethods__ = {}
    for _s in [CCopasiObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FloatReference, name, value)
    __swig_getmethods__ = {}
    for _s in [CCopasiObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FloatReference, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _COPASI.delete_FloatReference
    __del__ = lambda self : None;
    def getValueObject(self): return _COPASI.FloatReference_getValueObject(self)
    def getObjectDisplayName(self, regular = True, richtext = False): return _COPASI.FloatReference_getObjectDisplayName(self, regular, richtext)
FloatReference_swigregister = _COPASI.FloatReference_swigregister
FloatReference_swigregister(FloatReference)

class CCopasiContainer(CCopasiObject):
    __swig_setmethods__ = {}
    for _s in [CCopasiObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CCopasiContainer, name, value)
    __swig_getmethods__ = {}
    for _s in [CCopasiObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CCopasiContainer, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _COPASI.new_CCopasiContainer(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _COPASI.delete_CCopasiContainer
    __del__ = lambda self : None;
    def getObject(self, *args): return _COPASI.CCopasiContainer_getObject(self, *args)
    def getValueObject(self): return _COPASI.CCopasiContainer_getValueObject(self)
    def add(self, *args): return _COPASI.CCopasiContainer_add(self, *args)
    def getUnits(self): return _COPASI.CCopasiContainer_getUnits(self)
    def getChildObjectUnits(self, *args): return _COPASI.CCopasiContainer_getChildObjectUnits(self, *args)
CCopasiContainer_swigregister = _COPASI.CCopasiContainer_swigregister
CCopasiContainer_swigregister(CCopasiContainer)
cvar = _COPASI.cvar
CCopasiContainer.EmptyList = _COPASI.cvar.CCopasiContainer_EmptyList

class CCopasiAbstractArray:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CCopasiAbstractArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CCopasiAbstractArray, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _COPASI.delete_CCopasiAbstractArray
    __del__ = lambda self : None;
    def size(self): return _COPASI.CCopasiAbstractArray_size(self)
    def dimensionality(self): return _COPASI.CCopasiAbstractArray_dimensionality(self)
    def get(self, *args): return _COPASI.CCopasiAbstractArray_get(self, *args)
CCopasiAbstractArray_swigregister = _COPASI.CCopasiAbstractArray_swigregister
CCopasiAbstractArray_swigregister(CCopasiAbstractArray)

class CCopasiArray(CCopasiAbstractArray):
    __swig_setmethods__ = {}
    for _s in [CCopasiAbstractArray]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CCopasiArray, name, value)
    __swig_getmethods__ = {}
    for _s in [CCopasiAbstractArray]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CCopasiArray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _COPASI.new_CCopasiArray(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _COPASI.delete_CCopasiArray
    __del__ = lambda self : None;
    def resize(self, *args): return _COPASI.CCopasiArray_resize(self, *args)
    def size(self): return _COPASI.CCopasiArray_size(self)
    def dimensionality(self): return _COPASI.CCopasiArray_dimensionality(self)
CCopasiArray_swigregister = _COPASI.CCopasiArray_swigregister
CCopasiArray_swigregister(CCopasiArray)

class AnnotatedFloatMatrix(CCopasiAbstractArray):
    __swig_setmethods__ = {}
    for _s in [CCopasiAbstractArray]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AnnotatedFloatMatrix, name, value)
    __swig_getmethods__ = {}
    for _s in [CCopasiAbstractArray]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, AnnotatedFloatMatrix, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _COPASI.new_AnnotatedFloatMatrix(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _COPASI.delete_AnnotatedFloatMatrix
    __del__ = lambda self : None;
    def size(self): return _COPASI.AnnotatedFloatMatrix_size(self)
    def dimensionality(self): return _COPASI.AnnotatedFloatMatrix_dimensionality(self)
AnnotatedFloatMatrix_swigregister = _COPASI.AnnotatedFloatMatrix_swigregister
AnnotatedFloatMatrix_swigregister(AnnotatedFloatMatrix)

class CArrayAnnotation(CCopasiContainer):
    __swig_setmethods__ = {}
    for _s in [CCopasiContainer]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CArrayAnnotation, name, value)
    __swig_getmethods__ = {}
    for _s in [CCopasiContainer]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CArrayAnnotation, name)
    __repr__ = _swig_repr
    OBJECTS = _COPASI.CArrayAnnotation_OBJECTS
    VECTOR = _COPASI.CArrayAnnotation_VECTOR
    VECTOR_ON_THE_FLY = _COPASI.CArrayAnnotation_VECTOR_ON_THE_FLY
    STRINGS = _COPASI.CArrayAnnotation_STRINGS
    NUMBERS = _COPASI.CArrayAnnotation_NUMBERS
    def __init__(self, *args): 
        this = _COPASI.new_CArrayAnnotation(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _COPASI.delete_CArrayAnnotation
    __del__ = lambda self : None;
    def setArray(self, *args): return _COPASI.CArrayAnnotation_setArray(self, *args)
    def array(self): return _COPASI.CArrayAnnotation_array(self)
    def setMode(self, *args): return _COPASI.CArrayAnnotation_setMode(self, *args)
    def getMode(self, *args): return _COPASI.CArrayAnnotation_getMode(self, *args)
    def getDefaultMode(self): return _COPASI.CArrayAnnotation_getDefaultMode(self)
    def dimensionality(self): return _COPASI.CArrayAnnotation_dimensionality(self)
    def size(self): return _COPASI.CArrayAnnotation_size(self)
    def setCopasiVector(self, *args): return _COPASI.CArrayAnnotation_setCopasiVector(self, *args)
    def setAnnotationCN(self, *args): return _COPASI.CArrayAnnotation_setAnnotationCN(self, *args)
    def setAnnotationString(self, *args): return _COPASI.CArrayAnnotation_setAnnotationString(self, *args)
    def getAnnotationsCN(self, *args): return _COPASI.CArrayAnnotation_getAnnotationsCN(self, *args)
    def getAnnotationsString(self, *args): return _COPASI.CArrayAnnotation_getAnnotationsString(self, *args)
    def getDimensionDescription(self, *args): return _COPASI.CArrayAnnotation_getDimensionDescription(self, *args)
    def setDimensionDescription(self, *args): return _COPASI.CArrayAnnotation_setDimensionDescription(self, *args)
    def getDescription(self): return _COPASI.CArrayAnnotation_getDescription(self)
    def setDescription(self, *args): return _COPASI.CArrayAnnotation_setDescription(self, *args)
    def resize(self): return _COPASI.CArrayAnnotation_resize(self)
    def addElementReference(self, *args): return _COPASI.CArrayAnnotation_addElementReference(self, *args)
    def getObject(self, *args): return _COPASI.CArrayAnnotation_getObject(self, *args)
    def isEmpty(self): return _COPASI.CArrayAnnotation_isEmpty(self)
    def reDimensionalize(self, *args): return _COPASI.CArrayAnnotation_reDimensionalize(self, *args)
    def resizeOneDimension(self, *args): return _COPASI.CArrayAnnotation_resizeOneDimension(self, *args)
    def createAnnotationsCNFromCopasiVector(self, *args): return _COPASI.CArrayAnnotation_createAnnotationsCNFromCopasiVector(self, *args)
    def createNumbers(self, *args): return _COPASI.CArrayAnnotation_createNumbers(self, *args)
    def getObjectDisplayName(self, regular = True, richtext = False): return _COPASI.CArrayAnnotation_getObjectDisplayName(self, regular, richtext)
CArrayAnnotation_swigregister = _COPASI.CArrayAnnotation_swigregister
CArrayAnnotation_swigregister(CArrayAnnotation)

class EventStdVector:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EventStdVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EventStdVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _COPASI.EventStdVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _COPASI.EventStdVector___nonzero__(self)
    def __bool__(self): return _COPASI.EventStdVector___bool__(self)
    def __len__(self): return _COPASI.EventStdVector___len__(self)
    def pop(self): return _COPASI.EventStdVector_pop(self)
    def __getslice__(self, *args): return _COPASI.EventStdVector___getslice__(self, *args)
    def __setslice__(self, *args): return _COPASI.EventStdVector___setslice__(self, *args)
    def __delslice__(self, *args): return _COPASI.EventStdVector___delslice__(self, *args)
    def __delitem__(self, *args): return _COPASI.EventStdVector___delitem__(self, *args)
    def __getitem__(self, *args): return _COPASI.EventStdVector___getitem__(self, *args)
    def __setitem__(self, *args): return _COPASI.EventStdVector___setitem__(self, *args)
    def append(self, *args): return _COPASI.EventStdVector_append(self, *args)
    def empty(self): return _COPASI.EventStdVector_empty(self)
    def size(self): return _COPASI.EventStdVector_size(self)
    def clear(self): return _COPASI.EventStdVector_clear(self)
    def swap(self, *args): return _COPASI.EventStdVector_swap(self, *args)
    def get_allocator(self): return _COPASI.EventStdVector_get_allocator(self)
    def begin(self): return _COPASI.EventStdVector_begin(self)
    def end(self): return _COPASI.EventStdVector_end(self)
    def rbegin(self): return _COPASI.EventStdVector_rbegin(self)
    def rend(self): return _COPASI.EventStdVector_rend(self)
    def pop_back(self): return _COPASI.EventStdVector_pop_back(self)
    def erase(self, *args): return _COPASI.EventStdVector_erase(self, *args)
    def __init__(self, *args): 
        this = _COPASI.new_EventStdVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _COPASI.EventStdVector_push_back(self, *args)
    def front(self): return _COPASI.EventStdVector_front(self)
    def back(self): return _COPASI.EventStdVector_back(self)
    def assign(self, *args): return _COPASI.EventStdVector_assign(self, *args)
    def resize(self, *args): return _COPASI.EventStdVector_resize(self, *args)
    def insert(self, *args): return _COPASI.EventStdVector_insert(self, *args)
    def reserve(self, *args): return _COPASI.EventStdVector_reserve(self, *args)
    def capacity(self): return _COPASI.EventStdVector_capacity(self)
    __swig_destroy__ = _COPASI.delete_EventStdVector
    __del__ = lambda self : None;
EventStdVector_swigregister = _COPASI.EventStdVector_swigregister
EventStdVector_swigregister(EventStdVector)

class EventVector(CCopasiContainer):
    __swig_setmethods__ = {}
    for _s in [CCopasiContainer]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EventVector, name, value)
    __swig_getmethods__ = {}
    for _s in [CCopasiContainer]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, EventVector, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _COPASI.delete_EventVector
    __del__ = lambda self : None;
    def begin(self, *args): return _COPASI.EventVector_begin(self, *args)
    def end(self, *args): return _COPASI.EventVector_end(self, *args)
    def cleanup(self): return _COPASI.EventVector_cleanup(self)
    def addCopy(self, *args): return _COPASI.EventVector_addCopy(self, *args)
    def swap(self, *args): return _COPASI.EventVector_swap(self, *args)
    def add(self, *args): return _COPASI.EventVector_add(self, *args)
    def remove(self, *args): return _COPASI.EventVector_remove(self, *args)
    def getObject(self, *args): return _COPASI.EventVector_getObject(self, *args)
    def size(self): return _COPASI.EventVector_size(self)
    def clear(self): return _COPASI.EventVector_clear(self)
    def getIndex(self, *args): return _COPASI.EventVector_getIndex(self, *args)
    def get(self, *args): return _COPASI.EventVector_get(self, *args)
    def addAndOwn(self, *args): return _COPASI.EventVector_addAndOwn(self, *args)
    def __len__(self): return _COPASI.EventVector___len__(self)
EventVector_swigregister = _COPASI.EventVector_swigregister
EventVector_swigregister(EventVector)

class EventVectorN(EventVector):
    __swig_setmethods__ = {}
    for _s in [EventVector]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EventVectorN, name, value)
    __swig_getmethods__ = {}
    for _s in [EventVector]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, EventVectorN, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _COPASI.new_EventVectorN(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _COPASI.delete_EventVectorN
    __del__ = lambda self : None;
    def addCopy(self, *args): return _COPASI.EventVectorN_addCopy(self, *args)
    def add(self, *args): return _COPASI.EventVectorN_add(self, *args)
    def removeByName(self, *args): return _COPASI.EventVectorN_removeByName(self, *args)
    def getObject(self, *args): return _COPASI.EventVectorN_getObject(self, *args)
    def getIndexByName(self, *args): return _COPASI.EventVectorN_getIndexByName(self, *args)
    def getByName(self, *args): return _COPASI.EventVectorN_getByName(self, *args)
EventVectorN_swigregister = _COPASI.EventVectorN_swigregister
EventVectorN_swigregister(EventVectorN)

class EventAssignmentStdVector:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EventAssignmentStdVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EventAssignmentStdVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _COPASI.EventAssignmentStdVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _COPASI.EventAssignmentStdVector___nonzero__(self)
    def __bool__(self): return _COPASI.EventAssignmentStdVector___bool__(self)
    def __len__(self): return _COPASI.EventAssignmentStdVector___len__(self)
    def pop(self): return _COPASI.EventAssignmentStdVector_pop(self)
    def __getslice__(self, *args): return _COPASI.EventAssignmentStdVector___getslice__(self, *args)
    def __setslice__(self, *args): return _COPASI.EventAssignmentStdVector___setslice__(self, *args)
    def __delslice__(self, *args): return _COPASI.EventAssignmentStdVector___delslice__(self, *args)
    def __delitem__(self, *args): return _COPASI.EventAssignmentStdVector___delitem__(self, *args)
    def __getitem__(self, *args): return _COPASI.EventAssignmentStdVector___getitem__(self, *args)
    def __setitem__(self, *args): return _COPASI.EventAssignmentStdVector___setitem__(self, *args)
    def append(self, *args): return _COPASI.EventAssignmentStdVector_append(self, *args)
    def empty(self): return _COPASI.EventAssignmentStdVector_empty(self)
    def size(self): return _COPASI.EventAssignmentStdVector_size(self)
    def clear(self): return _COPASI.EventAssignmentStdVector_clear(self)
    def swap(self, *args): return _COPASI.EventAssignmentStdVector_swap(self, *args)
    def get_allocator(self): return _COPASI.EventAssignmentStdVector_get_allocator(self)
    def begin(self): return _COPASI.EventAssignmentStdVector_begin(self)
    def end(self): return _COPASI.EventAssignmentStdVector_end(self)
    def rbegin(self): return _COPASI.EventAssignmentStdVector_rbegin(self)
    def rend(self): return _COPASI.EventAssignmentStdVector_rend(self)
    def pop_back(self): return _COPASI.EventAssignmentStdVector_pop_back(self)
    def erase(self, *args): return _COPASI.EventAssignmentStdVector_erase(self, *args)
    def __init__(self, *args): 
        this = _COPASI.new_EventAssignmentStdVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _COPASI.EventAssignmentStdVector_push_back(self, *args)
    def front(self): return _COPASI.EventAssignmentStdVector_front(self)
    def back(self): return _COPASI.EventAssignmentStdVector_back(self)
    def assign(self, *args): return _COPASI.EventAssignmentStdVector_assign(self, *args)
    def resize(self, *args): return _COPASI.EventAssignmentStdVector_resize(self, *args)
    def insert(self, *args): return _COPASI.EventAssignmentStdVector_insert(self, *args)
    def reserve(self, *args): return _COPASI.EventAssignmentStdVector_reserve(self, *args)
    def capacity(self): return _COPASI.EventAssignmentStdVector_capacity(self)
    __swig_destroy__ = _COPASI.delete_EventAssignmentStdVector
    __del__ = lambda self : None;
EventAssignmentStdVector_swigregister = _COPASI.EventAssignmentStdVector_swigregister
EventAssignmentStdVector_swigregister(EventAssignmentStdVector)

class EventAssignmentVector(CCopasiContainer):
    __swig_setmethods__ = {}
    for _s in [CCopasiContainer]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EventAssignmentVector, name, value)
    __swig_getmethods__ = {}
    for _s in [CCopasiContainer]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, EventAssignmentVector, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _COPASI.delete_EventAssignmentVector
    __del__ = lambda self : None;
    def begin(self, *args): return _COPASI.EventAssignmentVector_begin(self, *args)
    def end(self, *args): return _COPASI.EventAssignmentVector_end(self, *args)
    def cleanup(self): return _COPASI.EventAssignmentVector_cleanup(self)
    def addCopy(self, *args): return _COPASI.EventAssignmentVector_addCopy(self, *args)
    def swap(self, *args): return _COPASI.EventAssignmentVector_swap(self, *args)
    def add(self, *args): return _COPASI.EventAssignmentVector_add(self, *args)
    def remove(self, *args): return _COPASI.EventAssignmentVector_remove(self, *args)
    def getObject(self, *args): return _COPASI.EventAssignmentVector_getObject(self, *args)
    def size(self): return _COPASI.EventAssignmentVector_size(self)
    def clear(self): return _COPASI.EventAssignmentVector_clear(self)
    def getIndex(self, *args): return _COPASI.EventAssignmentVector_getIndex(self, *args)
    def get(self, *args): return _COPASI.EventAssignmentVector_get(self, *args)
    def addAndOwn(self, *args): return _COPASI.EventAssignmentVector_addAndOwn(self, *args)
    def __len__(self): return _COPASI.EventAssignmentVector___len__(self)
EventAssignmentVector_swigregister = _COPASI.EventAssignmentVector_swigregister
EventAssignmentVector_swigregister(EventAssignmentVector)

class EventAssignmentVectorN(EventAssignmentVector):
    __swig_setmethods__ = {}
    for _s in [EventAssignmentVector]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EventAssignmentVectorN, name, value)
    __swig_getmethods__ = {}
    for _s in [EventAssignmentVector]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, EventAssignmentVectorN, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _COPASI.new_EventAssignmentVectorN(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _COPASI.delete_EventAssignmentVectorN
    __del__ = lambda self : None;
    def addCopy(self, *args): return _COPASI.EventAssignmentVectorN_addCopy(self, *args)
    def add(self, *args): return _COPASI.EventAssignmentVectorN_add(self, *args)
    def removeByName(self, *args): return _COPASI.EventAssignmentVectorN_removeByName(self, *args)
    def getObject(self, *args): return _COPASI.EventAssignmentVectorN_getObject(self, *args)
    def getIndexByName(self, *args): return _COPASI.EventAssignmentVectorN_getIndexByName(self, *args)
    def getByName(self, *args): return _COPASI.EventAssignmentVectorN_getByName(self, *args)
EventAssignmentVectorN_swigregister = _COPASI.EventAssignmentVectorN_swigregister
EventAssignmentVectorN_swigregister(EventAssignmentVectorN)

class TaskStdVector:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TaskStdVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TaskStdVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _COPASI.TaskStdVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _COPASI.TaskStdVector___nonzero__(self)
    def __bool__(self): return _COPASI.TaskStdVector___bool__(self)
    def __len__(self): return _COPASI.TaskStdVector___len__(self)
    def pop(self): return _COPASI.TaskStdVector_pop(self)
    def __getslice__(self, *args): return _COPASI.TaskStdVector___getslice__(self, *args)
    def __setslice__(self, *args): return _COPASI.TaskStdVector___setslice__(self, *args)
    def __delslice__(self, *args): return _COPASI.TaskStdVector___delslice__(self, *args)
    def __delitem__(self, *args): return _COPASI.TaskStdVector___delitem__(self, *args)
    def __getitem__(self, *args): return _COPASI.TaskStdVector___getitem__(self, *args)
    def __setitem__(self, *args): return _COPASI.TaskStdVector___setitem__(self, *args)
    def append(self, *args): return _COPASI.TaskStdVector_append(self, *args)
    def empty(self): return _COPASI.TaskStdVector_empty(self)
    def size(self): return _COPASI.TaskStdVector_size(self)
    def clear(self): return _COPASI.TaskStdVector_clear(self)
    def swap(self, *args): return _COPASI.TaskStdVector_swap(self, *args)
    def get_allocator(self): return _COPASI.TaskStdVector_get_allocator(self)
    def begin(self): return _COPASI.TaskStdVector_begin(self)
    def end(self): return _COPASI.TaskStdVector_end(self)
    def rbegin(self): return _COPASI.TaskStdVector_rbegin(self)
    def rend(self): return _COPASI.TaskStdVector_rend(self)
    def pop_back(self): return _COPASI.TaskStdVector_pop_back(self)
    def erase(self, *args): return _COPASI.TaskStdVector_erase(self, *args)
    def __init__(self, *args): 
        this = _COPASI.new_TaskStdVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _COPASI.TaskStdVector_push_back(self, *args)
    def front(self): return _COPASI.TaskStdVector_front(self)
    def back(self): return _COPASI.TaskStdVector_back(self)
    def assign(self, *args): return _COPASI.TaskStdVector_assign(self, *args)
    def resize(self, *args): return _COPASI.TaskStdVector_resize(self, *args)
    def insert(self, *args): return _COPASI.TaskStdVector_insert(self, *args)
    def reserve(self, *args): return _COPASI.TaskStdVector_reserve(self, *args)
    def capacity(self): return _COPASI.TaskStdVector_capacity(self)
    __swig_destroy__ = _COPASI.delete_TaskStdVector
    __del__ = lambda self : None;
TaskStdVector_swigregister = _COPASI.TaskStdVector_swigregister
TaskStdVector_swigregister(TaskStdVector)

class TaskVector(CCopasiContainer):
    __swig_setmethods__ = {}
    for _s in [CCopasiContainer]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TaskVector, name, value)
    __swig_getmethods__ = {}
    for _s in [CCopasiContainer]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TaskVector, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _COPASI.delete_TaskVector
    __del__ = lambda self : None;
    def begin(self, *args): return _COPASI.TaskVector_begin(self, *args)
    def end(self, *args): return _COPASI.TaskVector_end(self, *args)
    def cleanup(self): return _COPASI.TaskVector_cleanup(self)
    def addCopy(self, *args): return _COPASI.TaskVector_addCopy(self, *args)
    def swap(self, *args): return _COPASI.TaskVector_swap(self, *args)
    def add(self, *args): return _COPASI.TaskVector_add(self, *args)
    def remove(self, *args): return _COPASI.TaskVector_remove(self, *args)
    def getObject(self, *args): return _COPASI.TaskVector_getObject(self, *args)
    def size(self): return _COPASI.TaskVector_size(self)
    def clear(self): return _COPASI.TaskVector_clear(self)
    def getIndex(self, *args): return _COPASI.TaskVector_getIndex(self, *args)
    def get(self, *args): return _COPASI.TaskVector_get(self, *args)
    def addAndOwn(self, *args): return _COPASI.TaskVector_addAndOwn(self, *args)
    def __len__(self): return _COPASI.TaskVector___len__(self)
TaskVector_swigregister = _COPASI.TaskVector_swigregister
TaskVector_swigregister(TaskVector)

class TaskVectorN(TaskVector):
    __swig_setmethods__ = {}
    for _s in [TaskVector]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TaskVectorN, name, value)
    __swig_getmethods__ = {}
    for _s in [TaskVector]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TaskVectorN, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _COPASI.new_TaskVectorN(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _COPASI.delete_TaskVectorN
    __del__ = lambda self : None;
    def addCopy(self, *args): return _COPASI.TaskVectorN_addCopy(self, *args)
    def add(self, *args): return _COPASI.TaskVectorN_add(self, *args)
    def removeByName(self, *args): return _COPASI.TaskVectorN_removeByName(self, *args)
    def getObject(self, *args): return _COPASI.TaskVectorN_getObject(self, *args)
    def getIndexByName(self, *args): return _COPASI.TaskVectorN_getIndexByName(self, *args)
    def getByName(self, *args): return _COPASI.TaskVectorN_getByName(self, *args)
TaskVectorN_swigregister = _COPASI.TaskVectorN_swigregister
TaskVectorN_swigregister(TaskVectorN)

class ModelValueStdVector:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModelValueStdVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ModelValueStdVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _COPASI.ModelValueStdVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _COPASI.ModelValueStdVector___nonzero__(self)
    def __bool__(self): return _COPASI.ModelValueStdVector___bool__(self)
    def __len__(self): return _COPASI.ModelValueStdVector___len__(self)
    def pop(self): return _COPASI.ModelValueStdVector_pop(self)
    def __getslice__(self, *args): return _COPASI.ModelValueStdVector___getslice__(self, *args)
    def __setslice__(self, *args): return _COPASI.ModelValueStdVector___setslice__(self, *args)
    def __delslice__(self, *args): return _COPASI.ModelValueStdVector___delslice__(self, *args)
    def __delitem__(self, *args): return _COPASI.ModelValueStdVector___delitem__(self, *args)
    def __getitem__(self, *args): return _COPASI.ModelValueStdVector___getitem__(self, *args)
    def __setitem__(self, *args): return _COPASI.ModelValueStdVector___setitem__(self, *args)
    def append(self, *args): return _COPASI.ModelValueStdVector_append(self, *args)
    def empty(self): return _COPASI.ModelValueStdVector_empty(self)
    def size(self): return _COPASI.ModelValueStdVector_size(self)
    def clear(self): return _COPASI.ModelValueStdVector_clear(self)
    def swap(self, *args): return _COPASI.ModelValueStdVector_swap(self, *args)
    def get_allocator(self): return _COPASI.ModelValueStdVector_get_allocator(self)
    def begin(self): return _COPASI.ModelValueStdVector_begin(self)
    def end(self): return _COPASI.ModelValueStdVector_end(self)
    def rbegin(self): return _COPASI.ModelValueStdVector_rbegin(self)
    def rend(self): return _COPASI.ModelValueStdVector_rend(self)
    def pop_back(self): return _COPASI.ModelValueStdVector_pop_back(self)
    def erase(self, *args): return _COPASI.ModelValueStdVector_erase(self, *args)
    def __init__(self, *args): 
        this = _COPASI.new_ModelValueStdVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _COPASI.ModelValueStdVector_push_back(self, *args)
    def front(self): return _COPASI.ModelValueStdVector_front(self)
    def back(self): return _COPASI.ModelValueStdVector_back(self)
    def assign(self, *args): return _COPASI.ModelValueStdVector_assign(self, *args)
    def resize(self, *args): return _COPASI.ModelValueStdVector_resize(self, *args)
    def insert(self, *args): return _COPASI.ModelValueStdVector_insert(self, *args)
    def reserve(self, *args): return _COPASI.ModelValueStdVector_reserve(self, *args)
    def capacity(self): return _COPASI.ModelValueStdVector_capacity(self)
    __swig_destroy__ = _COPASI.delete_ModelValueStdVector
    __del__ = lambda self : None;
ModelValueStdVector_swigregister = _COPASI.ModelValueStdVector_swigregister
ModelValueStdVector_swigregister(ModelValueStdVector)

class ModelValueVector(CCopasiContainer):
    __swig_setmethods__ = {}
    for _s in [CCopasiContainer]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModelValueVector, name, value)
    __swig_getmethods__ = {}
    for _s in [CCopasiContainer]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModelValueVector, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _COPASI.delete_ModelValueVector
    __del__ = lambda self : None;
    def begin(self, *args): return _COPASI.ModelValueVector_begin(self, *args)
    def end(self, *args): return _COPASI.ModelValueVector_end(self, *args)
    def cleanup(self): return _COPASI.ModelValueVector_cleanup(self)
    def addCopy(self, *args): return _COPASI.ModelValueVector_addCopy(self, *args)
    def swap(self, *args): return _COPASI.ModelValueVector_swap(self, *args)
    def add(self, *args): return _COPASI.ModelValueVector_add(self, *args)
    def remove(self, *args): return _COPASI.ModelValueVector_remove(self, *args)
    def getObject(self, *args): return _COPASI.ModelValueVector_getObject(self, *args)
    def size(self): return _COPASI.ModelValueVector_size(self)
    def clear(self): return _COPASI.ModelValueVector_clear(self)
    def getIndex(self, *args): return _COPASI.ModelValueVector_getIndex(self, *args)
    def get(self, *args): return _COPASI.ModelValueVector_get(self, *args)
    def addAndOwn(self, *args): return _COPASI.ModelValueVector_addAndOwn(self, *args)
    def __len__(self): return _COPASI.ModelValueVector___len__(self)
ModelValueVector_swigregister = _COPASI.ModelValueVector_swigregister
ModelValueVector_swigregister(ModelValueVector)

class ModelValueVectorN(ModelValueVector):
    __swig_setmethods__ = {}
    for _s in [ModelValueVector]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModelValueVectorN, name, value)
    __swig_getmethods__ = {}
    for _s in [ModelValueVector]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModelValueVectorN, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _COPASI.new_ModelValueVectorN(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _COPASI.delete_ModelValueVectorN
    __del__ = lambda self : None;
    def addCopy(self, *args): return _COPASI.ModelValueVectorN_addCopy(self, *args)
    def add(self, *args): return _COPASI.ModelValueVectorN_add(self, *args)
    def removeByName(self, *args): return _COPASI.ModelValueVectorN_removeByName(self, *args)
    def getObject(self, *args): return _COPASI.ModelValueVectorN_getObject(self, *args)
    def getIndexByName(self, *args): return _COPASI.ModelValueVectorN_getIndexByName(self, *args)
    def getByName(self, *args): return _COPASI.ModelValueVectorN_getByName(self, *args)
ModelValueVectorN_swigregister = _COPASI.ModelValueVectorN_swigregister
ModelValueVectorN_swigregister(ModelValueVectorN)

class ReportDefinitionStdVector:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReportDefinitionStdVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ReportDefinitionStdVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _COPASI.ReportDefinitionStdVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _COPASI.ReportDefinitionStdVector___nonzero__(self)
    def __bool__(self): return _COPASI.ReportDefinitionStdVector___bool__(self)
    def __len__(self): return _COPASI.ReportDefinitionStdVector___len__(self)
    def pop(self): return _COPASI.ReportDefinitionStdVector_pop(self)
    def __getslice__(self, *args): return _COPASI.ReportDefinitionStdVector___getslice__(self, *args)
    def __setslice__(self, *args): return _COPASI.ReportDefinitionStdVector___setslice__(self, *args)
    def __delslice__(self, *args): return _COPASI.ReportDefinitionStdVector___delslice__(self, *args)
    def __delitem__(self, *args): return _COPASI.ReportDefinitionStdVector___delitem__(self, *args)
    def __getitem__(self, *args): return _COPASI.ReportDefinitionStdVector___getitem__(self, *args)
    def __setitem__(self, *args): return _COPASI.ReportDefinitionStdVector___setitem__(self, *args)
    def append(self, *args): return _COPASI.ReportDefinitionStdVector_append(self, *args)
    def empty(self): return _COPASI.ReportDefinitionStdVector_empty(self)
    def size(self): return _COPASI.ReportDefinitionStdVector_size(self)
    def clear(self): return _COPASI.ReportDefinitionStdVector_clear(self)
    def swap(self, *args): return _COPASI.ReportDefinitionStdVector_swap(self, *args)
    def get_allocator(self): return _COPASI.ReportDefinitionStdVector_get_allocator(self)
    def begin(self): return _COPASI.ReportDefinitionStdVector_begin(self)
    def end(self): return _COPASI.ReportDefinitionStdVector_end(self)
    def rbegin(self): return _COPASI.ReportDefinitionStdVector_rbegin(self)
    def rend(self): return _COPASI.ReportDefinitionStdVector_rend(self)
    def pop_back(self): return _COPASI.ReportDefinitionStdVector_pop_back(self)
    def erase(self, *args): return _COPASI.ReportDefinitionStdVector_erase(self, *args)
    def __init__(self, *args): 
        this = _COPASI.new_ReportDefinitionStdVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _COPASI.ReportDefinitionStdVector_push_back(self, *args)
    def front(self): return _COPASI.ReportDefinitionStdVector_front(self)
    def back(self): return _COPASI.ReportDefinitionStdVector_back(self)
    def assign(self, *args): return _COPASI.ReportDefinitionStdVector_assign(self, *args)
    def resize(self, *args): return _COPASI.ReportDefinitionStdVector_resize(self, *args)
    def insert(self, *args): return _COPASI.ReportDefinitionStdVector_insert(self, *args)
    def reserve(self, *args): return _COPASI.ReportDefinitionStdVector_reserve(self, *args)
    def capacity(self): return _COPASI.ReportDefinitionStdVector_capacity(self)
    __swig_destroy__ = _COPASI.delete_ReportDefinitionStdVector
    __del__ = lambda self : None;
ReportDefinitionStdVector_swigregister = _COPASI.ReportDefinitionStdVector_swigregister
ReportDefinitionStdVector_swigregister(ReportDefinitionStdVector)

class ReportDefinitionVector(CCopasiContainer):
    __swig_setmethods__ = {}
    for _s in [CCopasiContainer]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReportDefinitionVector, name, value)
    __swig_getmethods__ = {}
    for _s in [CCopasiContainer]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ReportDefinitionVector, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _COPASI.delete_ReportDefinitionVector
    __del__ = lambda self : None;
    def begin(self, *args): return _COPASI.ReportDefinitionVector_begin(self, *args)
    def end(self, *args): return _COPASI.ReportDefinitionVector_end(self, *args)
    def cleanup(self): return _COPASI.ReportDefinitionVector_cleanup(self)
    def addCopy(self, *args): return _COPASI.ReportDefinitionVector_addCopy(self, *args)
    def swap(self, *args): return _COPASI.ReportDefinitionVector_swap(self, *args)
    def add(self, *args): return _COPASI.ReportDefinitionVector_add(self, *args)
    def remove(self, *args): return _COPASI.ReportDefinitionVector_remove(self, *args)
    def getObject(self, *args): return _COPASI.ReportDefinitionVector_getObject(self, *args)
    def size(self): return _COPASI.ReportDefinitionVector_size(self)
    def clear(self): return _COPASI.ReportDefinitionVector_clear(self)
    def getIndex(self, *args): return _COPASI.ReportDefinitionVector_getIndex(self, *args)
    def get(self, *args): return _COPASI.ReportDefinitionVector_get(self, *args)
    def addAndOwn(self, *args): return _COPASI.ReportDefinitionVector_addAndOwn(self, *args)
    def __len__(self): return _COPASI.ReportDefinitionVector___len__(self)
ReportDefinitionVector_swigregister = _COPASI.ReportDefinitionVector_swigregister
ReportDefinitionVector_swigregister(ReportDefinitionVector)

class ReportDefinitionVectorN(ReportDefinitionVector):
    __swig_setmethods__ = {}
    for _s in [ReportDefinitionVector]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReportDefinitionVectorN, name, value)
    __swig_getmethods__ = {}
    for _s in [ReportDefinitionVector]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ReportDefinitionVectorN, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _COPASI.new_ReportDefinitionVectorN(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _COPASI.delete_ReportDefinitionVectorN
    __del__ = lambda self : None;
    def addCopy(self, *args): return _COPASI.ReportDefinitionVectorN_addCopy(self, *args)
    def add(self, *args): return _COPASI.ReportDefinitionVectorN_add(self, *args)
    def removeByName(self, *args): return _COPASI.ReportDefinitionVectorN_removeByName(self, *args)
    def getObject(self, *args): return _COPASI.ReportDefinitionVectorN_getObject(self, *args)
    def getIndexByName(self, *args): return _COPASI.ReportDefinitionVectorN_getIndexByName(self, *args)
    def getByName(self, *args): return _COPASI.ReportDefinitionVectorN_getByName(self, *args)
ReportDefinitionVectorN_swigregister = _COPASI.ReportDefinitionVectorN_swigregister
ReportDefinitionVectorN_swigregister(ReportDefinitionVectorN)

class MoietyStdVector:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MoietyStdVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MoietyStdVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _COPASI.MoietyStdVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _COPASI.MoietyStdVector___nonzero__(self)
    def __bool__(self): return _COPASI.MoietyStdVector___bool__(self)
    def __len__(self): return _COPASI.MoietyStdVector___len__(self)
    def pop(self): return _COPASI.MoietyStdVector_pop(self)
    def __getslice__(self, *args): return _COPASI.MoietyStdVector___getslice__(self, *args)
    def __setslice__(self, *args): return _COPASI.MoietyStdVector___setslice__(self, *args)
    def __delslice__(self, *args): return _COPASI.MoietyStdVector___delslice__(self, *args)
    def __delitem__(self, *args): return _COPASI.MoietyStdVector___delitem__(self, *args)
    def __getitem__(self, *args): return _COPASI.MoietyStdVector___getitem__(self, *args)
    def __setitem__(self, *args): return _COPASI.MoietyStdVector___setitem__(self, *args)
    def append(self, *args): return _COPASI.MoietyStdVector_append(self, *args)
    def empty(self): return _COPASI.MoietyStdVector_empty(self)
    def size(self): return _COPASI.MoietyStdVector_size(self)
    def clear(self): return _COPASI.MoietyStdVector_clear(self)
    def swap(self, *args): return _COPASI.MoietyStdVector_swap(self, *args)
    def get_allocator(self): return _COPASI.MoietyStdVector_get_allocator(self)
    def begin(self): return _COPASI.MoietyStdVector_begin(self)
    def end(self): return _COPASI.MoietyStdVector_end(self)
    def rbegin(self): return _COPASI.MoietyStdVector_rbegin(self)
    def rend(self): return _COPASI.MoietyStdVector_rend(self)
    def pop_back(self): return _COPASI.MoietyStdVector_pop_back(self)
    def erase(self, *args): return _COPASI.MoietyStdVector_erase(self, *args)
    def __init__(self, *args): 
        this = _COPASI.new_MoietyStdVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _COPASI.MoietyStdVector_push_back(self, *args)
    def front(self): return _COPASI.MoietyStdVector_front(self)
    def back(self): return _COPASI.MoietyStdVector_back(self)
    def assign(self, *args): return _COPASI.MoietyStdVector_assign(self, *args)
    def resize(self, *args): return _COPASI.MoietyStdVector_resize(self, *args)
    def insert(self, *args): return _COPASI.MoietyStdVector_insert(self, *args)
    def reserve(self, *args): return _COPASI.MoietyStdVector_reserve(self, *args)
    def capacity(self): return _COPASI.MoietyStdVector_capacity(self)
    __swig_destroy__ = _COPASI.delete_MoietyStdVector
    __del__ = lambda self : None;
MoietyStdVector_swigregister = _COPASI.MoietyStdVector_swigregister
MoietyStdVector_swigregister(MoietyStdVector)

class MoietyVector(CCopasiContainer):
    __swig_setmethods__ = {}
    for _s in [CCopasiContainer]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MoietyVector, name, value)
    __swig_getmethods__ = {}
    for _s in [CCopasiContainer]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MoietyVector, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _COPASI.delete_MoietyVector
    __del__ = lambda self : None;
    def begin(self, *args): return _COPASI.MoietyVector_begin(self, *args)
    def end(self, *args): return _COPASI.MoietyVector_end(self, *args)
    def cleanup(self): return _COPASI.MoietyVector_cleanup(self)
    def addCopy(self, *args): return _COPASI.MoietyVector_addCopy(self, *args)
    def swap(self, *args): return _COPASI.MoietyVector_swap(self, *args)
    def add(self, *args): return _COPASI.MoietyVector_add(self, *args)
    def remove(self, *args): return _COPASI.MoietyVector_remove(self, *args)
    def getObject(self, *args): return _COPASI.MoietyVector_getObject(self, *args)
    def size(self): return _COPASI.MoietyVector_size(self)
    def clear(self): return _COPASI.MoietyVector_clear(self)
    def getIndex(self, *args): return _COPASI.MoietyVector_getIndex(self, *args)
    def get(self, *args): return _COPASI.MoietyVector_get(self, *args)
    def addAndOwn(self, *args): return _COPASI.MoietyVector_addAndOwn(self, *args)
    def __len__(self): return _COPASI.MoietyVector___len__(self)
MoietyVector_swigregister = _COPASI.MoietyVector_swigregister
MoietyVector_swigregister(MoietyVector)

class MetabStdVector:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MetabStdVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MetabStdVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _COPASI.MetabStdVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _COPASI.MetabStdVector___nonzero__(self)
    def __bool__(self): return _COPASI.MetabStdVector___bool__(self)
    def __len__(self): return _COPASI.MetabStdVector___len__(self)
    def pop(self): return _COPASI.MetabStdVector_pop(self)
    def __getslice__(self, *args): return _COPASI.MetabStdVector___getslice__(self, *args)
    def __setslice__(self, *args): return _COPASI.MetabStdVector___setslice__(self, *args)
    def __delslice__(self, *args): return _COPASI.MetabStdVector___delslice__(self, *args)
    def __delitem__(self, *args): return _COPASI.MetabStdVector___delitem__(self, *args)
    def __getitem__(self, *args): return _COPASI.MetabStdVector___getitem__(self, *args)
    def __setitem__(self, *args): return _COPASI.MetabStdVector___setitem__(self, *args)
    def append(self, *args): return _COPASI.MetabStdVector_append(self, *args)
    def empty(self): return _COPASI.MetabStdVector_empty(self)
    def size(self): return _COPASI.MetabStdVector_size(self)
    def clear(self): return _COPASI.MetabStdVector_clear(self)
    def swap(self, *args): return _COPASI.MetabStdVector_swap(self, *args)
    def get_allocator(self): return _COPASI.MetabStdVector_get_allocator(self)
    def begin(self): return _COPASI.MetabStdVector_begin(self)
    def end(self): return _COPASI.MetabStdVector_end(self)
    def rbegin(self): return _COPASI.MetabStdVector_rbegin(self)
    def rend(self): return _COPASI.MetabStdVector_rend(self)
    def pop_back(self): return _COPASI.MetabStdVector_pop_back(self)
    def erase(self, *args): return _COPASI.MetabStdVector_erase(self, *args)
    def __init__(self, *args): 
        this = _COPASI.new_MetabStdVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _COPASI.MetabStdVector_push_back(self, *args)
    def front(self): return _COPASI.MetabStdVector_front(self)
    def back(self): return _COPASI.MetabStdVector_back(self)
    def assign(self, *args): return _COPASI.MetabStdVector_assign(self, *args)
    def resize(self, *args): return _COPASI.MetabStdVector_resize(self, *args)
    def insert(self, *args): return _COPASI.MetabStdVector_insert(self, *args)
    def reserve(self, *args): return _COPASI.MetabStdVector_reserve(self, *args)
    def capacity(self): return _COPASI.MetabStdVector_capacity(self)
    __swig_destroy__ = _COPASI.delete_MetabStdVector
    __del__ = lambda self : None;
MetabStdVector_swigregister = _COPASI.MetabStdVector_swigregister
MetabStdVector_swigregister(MetabStdVector)

class MetabVector(CCopasiContainer):
    __swig_setmethods__ = {}
    for _s in [CCopasiContainer]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MetabVector, name, value)
    __swig_getmethods__ = {}
    for _s in [CCopasiContainer]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MetabVector, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _COPASI.delete_MetabVector
    __del__ = lambda self : None;
    def begin(self, *args): return _COPASI.MetabVector_begin(self, *args)
    def end(self, *args): return _COPASI.MetabVector_end(self, *args)
    def cleanup(self): return _COPASI.MetabVector_cleanup(self)
    def addCopy(self, *args): return _COPASI.MetabVector_addCopy(self, *args)
    def swap(self, *args): return _COPASI.MetabVector_swap(self, *args)
    def add(self, *args): return _COPASI.MetabVector_add(self, *args)
    def remove(self, *args): return _COPASI.MetabVector_remove(self, *args)
    def getObject(self, *args): return _COPASI.MetabVector_getObject(self, *args)
    def size(self): return _COPASI.MetabVector_size(self)
    def clear(self): return _COPASI.MetabVector_clear(self)
    def getIndex(self, *args): return _COPASI.MetabVector_getIndex(self, *args)
    def get(self, *args): return _COPASI.MetabVector_get(self, *args)
    def addAndOwn(self, *args): return _COPASI.MetabVector_addAndOwn(self, *args)
    def __len__(self): return _COPASI.MetabVector___len__(self)
MetabVector_swigregister = _COPASI.MetabVector_swigregister
MetabVector_swigregister(MetabVector)

class MetabVectorN(MetabVector):
    __swig_setmethods__ = {}
    for _s in [MetabVector]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MetabVectorN, name, value)
    __swig_getmethods__ = {}
    for _s in [MetabVector]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MetabVectorN, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _COPASI.new_MetabVectorN(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _COPASI.delete_MetabVectorN
    __del__ = lambda self : None;
    def addCopy(self, *args): return _COPASI.MetabVectorN_addCopy(self, *args)
    def add(self, *args): return _COPASI.MetabVectorN_add(self, *args)
    def removeByName(self, *args): return _COPASI.MetabVectorN_removeByName(self, *args)
    def getObject(self, *args): return _COPASI.MetabVectorN_getObject(self, *args)
    def getIndexByName(self, *args): return _COPASI.MetabVectorN_getIndexByName(self, *args)
    def getByName(self, *args): return _COPASI.MetabVectorN_getByName(self, *args)
MetabVectorN_swigregister = _COPASI.MetabVectorN_swigregister
MetabVectorN_swigregister(MetabVectorN)

class MetabVectorNS(MetabVectorN):
    __swig_setmethods__ = {}
    for _s in [MetabVectorN]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MetabVectorNS, name, value)
    __swig_getmethods__ = {}
    for _s in [MetabVectorN]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MetabVectorNS, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _COPASI.new_MetabVectorNS(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _COPASI.delete_MetabVectorNS
    __del__ = lambda self : None;
MetabVectorNS_swigregister = _COPASI.MetabVectorNS_swigregister
MetabVectorNS_swigregister(MetabVectorNS)

class CompartmentStdVector:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CompartmentStdVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CompartmentStdVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _COPASI.CompartmentStdVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _COPASI.CompartmentStdVector___nonzero__(self)
    def __bool__(self): return _COPASI.CompartmentStdVector___bool__(self)
    def __len__(self): return _COPASI.CompartmentStdVector___len__(self)
    def pop(self): return _COPASI.CompartmentStdVector_pop(self)
    def __getslice__(self, *args): return _COPASI.CompartmentStdVector___getslice__(self, *args)
    def __setslice__(self, *args): return _COPASI.CompartmentStdVector___setslice__(self, *args)
    def __delslice__(self, *args): return _COPASI.CompartmentStdVector___delslice__(self, *args)
    def __delitem__(self, *args): return _COPASI.CompartmentStdVector___delitem__(self, *args)
    def __getitem__(self, *args): return _COPASI.CompartmentStdVector___getitem__(self, *args)
    def __setitem__(self, *args): return _COPASI.CompartmentStdVector___setitem__(self, *args)
    def append(self, *args): return _COPASI.CompartmentStdVector_append(self, *args)
    def empty(self): return _COPASI.CompartmentStdVector_empty(self)
    def size(self): return _COPASI.CompartmentStdVector_size(self)
    def clear(self): return _COPASI.CompartmentStdVector_clear(self)
    def swap(self, *args): return _COPASI.CompartmentStdVector_swap(self, *args)
    def get_allocator(self): return _COPASI.CompartmentStdVector_get_allocator(self)
    def begin(self): return _COPASI.CompartmentStdVector_begin(self)
    def end(self): return _COPASI.CompartmentStdVector_end(self)
    def rbegin(self): return _COPASI.CompartmentStdVector_rbegin(self)
    def rend(self): return _COPASI.CompartmentStdVector_rend(self)
    def pop_back(self): return _COPASI.CompartmentStdVector_pop_back(self)
    def erase(self, *args): return _COPASI.CompartmentStdVector_erase(self, *args)
    def __init__(self, *args): 
        this = _COPASI.new_CompartmentStdVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _COPASI.CompartmentStdVector_push_back(self, *args)
    def front(self): return _COPASI.CompartmentStdVector_front(self)
    def back(self): return _COPASI.CompartmentStdVector_back(self)
    def assign(self, *args): return _COPASI.CompartmentStdVector_assign(self, *args)
    def resize(self, *args): return _COPASI.CompartmentStdVector_resize(self, *args)
    def insert(self, *args): return _COPASI.CompartmentStdVector_insert(self, *args)
    def reserve(self, *args): return _COPASI.CompartmentStdVector_reserve(self, *args)
    def capacity(self): return _COPASI.CompartmentStdVector_capacity(self)
    __swig_destroy__ = _COPASI.delete_CompartmentStdVector
    __del__ = lambda self : None;
CompartmentStdVector_swigregister = _COPASI.CompartmentStdVector_swigregister
CompartmentStdVector_swigregister(CompartmentStdVector)

class CompartmentVector(CCopasiContainer):
    __swig_setmethods__ = {}
    for _s in [CCopasiContainer]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CompartmentVector, name, value)
    __swig_getmethods__ = {}
    for _s in [CCopasiContainer]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CompartmentVector, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _COPASI.delete_CompartmentVector
    __del__ = lambda self : None;
    def begin(self, *args): return _COPASI.CompartmentVector_begin(self, *args)
    def end(self, *args): return _COPASI.CompartmentVector_end(self, *args)
    def cleanup(self): return _COPASI.CompartmentVector_cleanup(self)
    def addCopy(self, *args): return _COPASI.CompartmentVector_addCopy(self, *args)
    def swap(self, *args): return _COPASI.CompartmentVector_swap(self, *args)
    def add(self, *args): return _COPASI.CompartmentVector_add(self, *args)
    def remove(self, *args): return _COPASI.CompartmentVector_remove(self, *args)
    def getObject(self, *args): return _COPASI.CompartmentVector_getObject(self, *args)
    def size(self): return _COPASI.CompartmentVector_size(self)
    def clear(self): return _COPASI.CompartmentVector_clear(self)
    def getIndex(self, *args): return _COPASI.CompartmentVector_getIndex(self, *args)
    def get(self, *args): return _COPASI.CompartmentVector_get(self, *args)
    def addAndOwn(self, *args): return _COPASI.CompartmentVector_addAndOwn(self, *args)
    def __len__(self): return _COPASI.CompartmentVector___len__(self)
CompartmentVector_swigregister = _COPASI.CompartmentVector_swigregister
CompartmentVector_swigregister(CompartmentVector)

class CompartmentVectorN(CompartmentVector):
    __swig_setmethods__ = {}
    for _s in [CompartmentVector]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CompartmentVectorN, name, value)
    __swig_getmethods__ = {}
    for _s in [CompartmentVector]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CompartmentVectorN, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _COPASI.new_CompartmentVectorN(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _COPASI.delete_CompartmentVectorN
    __del__ = lambda self : None;
    def addCopy(self, *args): return _COPASI.CompartmentVectorN_addCopy(self, *args)
    def add(self, *args): return _COPASI.CompartmentVectorN_add(self, *args)
    def removeByName(self, *args): return _COPASI.CompartmentVectorN_removeByName(self, *args)
    def getObject(self, *args): return _COPASI.CompartmentVectorN_getObject(self, *args)
    def getIndexByName(self, *args): return _COPASI.CompartmentVectorN_getIndexByName(self, *args)
    def getByName(self, *args): return _COPASI.CompartmentVectorN_getByName(self, *args)
CompartmentVectorN_swigregister = _COPASI.CompartmentVectorN_swigregister
CompartmentVectorN_swigregister(CompartmentVectorN)

class CompartmentVectorNS(CompartmentVectorN):
    __swig_setmethods__ = {}
    for _s in [CompartmentVectorN]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CompartmentVectorNS, name, value)
    __swig_getmethods__ = {}
    for _s in [CompartmentVectorN]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CompartmentVectorNS, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _COPASI.new_CompartmentVectorNS(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _COPASI.delete_CompartmentVectorNS
    __del__ = lambda self : None;
CompartmentVectorNS_swigregister = _COPASI.CompartmentVectorNS_swigregister
CompartmentVectorNS_swigregister(CompartmentVectorNS)

class ReactionStdVector:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReactionStdVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ReactionStdVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _COPASI.ReactionStdVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _COPASI.ReactionStdVector___nonzero__(self)
    def __bool__(self): return _COPASI.ReactionStdVector___bool__(self)
    def __len__(self): return _COPASI.ReactionStdVector___len__(self)
    def pop(self): return _COPASI.ReactionStdVector_pop(self)
    def __getslice__(self, *args): return _COPASI.ReactionStdVector___getslice__(self, *args)
    def __setslice__(self, *args): return _COPASI.ReactionStdVector___setslice__(self, *args)
    def __delslice__(self, *args): return _COPASI.ReactionStdVector___delslice__(self, *args)
    def __delitem__(self, *args): return _COPASI.ReactionStdVector___delitem__(self, *args)
    def __getitem__(self, *args): return _COPASI.ReactionStdVector___getitem__(self, *args)
    def __setitem__(self, *args): return _COPASI.ReactionStdVector___setitem__(self, *args)
    def append(self, *args): return _COPASI.ReactionStdVector_append(self, *args)
    def empty(self): return _COPASI.ReactionStdVector_empty(self)
    def size(self): return _COPASI.ReactionStdVector_size(self)
    def clear(self): return _COPASI.ReactionStdVector_clear(self)
    def swap(self, *args): return _COPASI.ReactionStdVector_swap(self, *args)
    def get_allocator(self): return _COPASI.ReactionStdVector_get_allocator(self)
    def begin(self): return _COPASI.ReactionStdVector_begin(self)
    def end(self): return _COPASI.ReactionStdVector_end(self)
    def rbegin(self): return _COPASI.ReactionStdVector_rbegin(self)
    def rend(self): return _COPASI.ReactionStdVector_rend(self)
    def pop_back(self): return _COPASI.ReactionStdVector_pop_back(self)
    def erase(self, *args): return _COPASI.ReactionStdVector_erase(self, *args)
    def __init__(self, *args): 
        this = _COPASI.new_ReactionStdVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _COPASI.ReactionStdVector_push_back(self, *args)
    def front(self): return _COPASI.ReactionStdVector_front(self)
    def back(self): return _COPASI.ReactionStdVector_back(self)
    def assign(self, *args): return _COPASI.ReactionStdVector_assign(self, *args)
    def resize(self, *args): return _COPASI.ReactionStdVector_resize(self, *args)
    def insert(self, *args): return _COPASI.ReactionStdVector_insert(self, *args)
    def reserve(self, *args): return _COPASI.ReactionStdVector_reserve(self, *args)
    def capacity(self): return _COPASI.ReactionStdVector_capacity(self)
    __swig_destroy__ = _COPASI.delete_ReactionStdVector
    __del__ = lambda self : None;
ReactionStdVector_swigregister = _COPASI.ReactionStdVector_swigregister
ReactionStdVector_swigregister(ReactionStdVector)

class ReactionVector(CCopasiContainer):
    __swig_setmethods__ = {}
    for _s in [CCopasiContainer]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReactionVector, name, value)
    __swig_getmethods__ = {}
    for _s in [CCopasiContainer]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ReactionVector, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _COPASI.delete_ReactionVector
    __del__ = lambda self : None;
    def begin(self, *args): return _COPASI.ReactionVector_begin(self, *args)
    def end(self, *args): return _COPASI.ReactionVector_end(self, *args)
    def cleanup(self): return _COPASI.ReactionVector_cleanup(self)
    def addCopy(self, *args): return _COPASI.ReactionVector_addCopy(self, *args)
    def swap(self, *args): return _COPASI.ReactionVector_swap(self, *args)
    def add(self, *args): return _COPASI.ReactionVector_add(self, *args)
    def remove(self, *args): return _COPASI.ReactionVector_remove(self, *args)
    def getObject(self, *args): return _COPASI.ReactionVector_getObject(self, *args)
    def size(self): return _COPASI.ReactionVector_size(self)
    def clear(self): return _COPASI.ReactionVector_clear(self)
    def getIndex(self, *args): return _COPASI.ReactionVector_getIndex(self, *args)
    def get(self, *args): return _COPASI.ReactionVector_get(self, *args)
    def addAndOwn(self, *args): return _COPASI.ReactionVector_addAndOwn(self, *args)
    def __len__(self): return _COPASI.ReactionVector___len__(self)
ReactionVector_swigregister = _COPASI.ReactionVector_swigregister
ReactionVector_swigregister(ReactionVector)

class ReactionVectorN(ReactionVector):
    __swig_setmethods__ = {}
    for _s in [ReactionVector]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReactionVectorN, name, value)
    __swig_getmethods__ = {}
    for _s in [ReactionVector]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ReactionVectorN, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _COPASI.new_ReactionVectorN(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _COPASI.delete_ReactionVectorN
    __del__ = lambda self : None;
    def addCopy(self, *args): return _COPASI.ReactionVectorN_addCopy(self, *args)
    def add(self, *args): return _COPASI.ReactionVectorN_add(self, *args)
    def removeByName(self, *args): return _COPASI.ReactionVectorN_removeByName(self, *args)
    def getObject(self, *args): return _COPASI.ReactionVectorN_getObject(self, *args)
    def getIndexByName(self, *args): return _COPASI.ReactionVectorN_getIndexByName(self, *args)
    def getByName(self, *args): return _COPASI.ReactionVectorN_getByName(self, *args)
ReactionVectorN_swigregister = _COPASI.ReactionVectorN_swigregister
ReactionVectorN_swigregister(ReactionVectorN)

class ReactionVectorNS(ReactionVectorN):
    __swig_setmethods__ = {}
    for _s in [ReactionVectorN]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReactionVectorNS, name, value)
    __swig_getmethods__ = {}
    for _s in [ReactionVectorN]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ReactionVectorNS, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _COPASI.new_ReactionVectorNS(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _COPASI.delete_ReactionVectorNS
    __del__ = lambda self : None;
ReactionVectorNS_swigregister = _COPASI.ReactionVectorNS_swigregister
ReactionVectorNS_swigregister(ReactionVectorNS)

class ReportItemVector:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReportItemVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ReportItemVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _COPASI.ReportItemVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _COPASI.ReportItemVector___nonzero__(self)
    def __bool__(self): return _COPASI.ReportItemVector___bool__(self)
    def __len__(self): return _COPASI.ReportItemVector___len__(self)
    def pop(self): return _COPASI.ReportItemVector_pop(self)
    def __getslice__(self, *args): return _COPASI.ReportItemVector___getslice__(self, *args)
    def __setslice__(self, *args): return _COPASI.ReportItemVector___setslice__(self, *args)
    def __delslice__(self, *args): return _COPASI.ReportItemVector___delslice__(self, *args)
    def __delitem__(self, *args): return _COPASI.ReportItemVector___delitem__(self, *args)
    def __getitem__(self, *args): return _COPASI.ReportItemVector___getitem__(self, *args)
    def __setitem__(self, *args): return _COPASI.ReportItemVector___setitem__(self, *args)
    def append(self, *args): return _COPASI.ReportItemVector_append(self, *args)
    def empty(self): return _COPASI.ReportItemVector_empty(self)
    def size(self): return _COPASI.ReportItemVector_size(self)
    def clear(self): return _COPASI.ReportItemVector_clear(self)
    def swap(self, *args): return _COPASI.ReportItemVector_swap(self, *args)
    def get_allocator(self): return _COPASI.ReportItemVector_get_allocator(self)
    def begin(self): return _COPASI.ReportItemVector_begin(self)
    def end(self): return _COPASI.ReportItemVector_end(self)
    def rbegin(self): return _COPASI.ReportItemVector_rbegin(self)
    def rend(self): return _COPASI.ReportItemVector_rend(self)
    def pop_back(self): return _COPASI.ReportItemVector_pop_back(self)
    def erase(self, *args): return _COPASI.ReportItemVector_erase(self, *args)
    def __init__(self, *args): 
        this = _COPASI.new_ReportItemVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _COPASI.ReportItemVector_push_back(self, *args)
    def front(self): return _COPASI.ReportItemVector_front(self)
    def back(self): return _COPASI.ReportItemVector_back(self)
    def assign(self, *args): return _COPASI.ReportItemVector_assign(self, *args)
    def resize(self, *args): return _COPASI.ReportItemVector_resize(self, *args)
    def insert(self, *args): return _COPASI.ReportItemVector_insert(self, *args)
    def reserve(self, *args): return _COPASI.ReportItemVector_reserve(self, *args)
    def capacity(self): return _COPASI.ReportItemVector_capacity(self)
    __swig_destroy__ = _COPASI.delete_ReportItemVector
    __del__ = lambda self : None;
ReportItemVector_swigregister = _COPASI.ReportItemVector_swigregister
ReportItemVector_swigregister(ReportItemVector)

class CFunctionStdVector:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CFunctionStdVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CFunctionStdVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _COPASI.CFunctionStdVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _COPASI.CFunctionStdVector___nonzero__(self)
    def __bool__(self): return _COPASI.CFunctionStdVector___bool__(self)
    def __len__(self): return _COPASI.CFunctionStdVector___len__(self)
    def pop(self): return _COPASI.CFunctionStdVector_pop(self)
    def __getslice__(self, *args): return _COPASI.CFunctionStdVector___getslice__(self, *args)
    def __setslice__(self, *args): return _COPASI.CFunctionStdVector___setslice__(self, *args)
    def __delslice__(self, *args): return _COPASI.CFunctionStdVector___delslice__(self, *args)
    def __delitem__(self, *args): return _COPASI.CFunctionStdVector___delitem__(self, *args)
    def __getitem__(self, *args): return _COPASI.CFunctionStdVector___getitem__(self, *args)
    def __setitem__(self, *args): return _COPASI.CFunctionStdVector___setitem__(self, *args)
    def append(self, *args): return _COPASI.CFunctionStdVector_append(self, *args)
    def empty(self): return _COPASI.CFunctionStdVector_empty(self)
    def size(self): return _COPASI.CFunctionStdVector_size(self)
    def clear(self): return _COPASI.CFunctionStdVector_clear(self)
    def swap(self, *args): return _COPASI.CFunctionStdVector_swap(self, *args)
    def get_allocator(self): return _COPASI.CFunctionStdVector_get_allocator(self)
    def begin(self): return _COPASI.CFunctionStdVector_begin(self)
    def end(self): return _COPASI.CFunctionStdVector_end(self)
    def rbegin(self): return _COPASI.CFunctionStdVector_rbegin(self)
    def rend(self): return _COPASI.CFunctionStdVector_rend(self)
    def pop_back(self): return _COPASI.CFunctionStdVector_pop_back(self)
    def erase(self, *args): return _COPASI.CFunctionStdVector_erase(self, *args)
    def __init__(self, *args): 
        this = _COPASI.new_CFunctionStdVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _COPASI.CFunctionStdVector_push_back(self, *args)
    def front(self): return _COPASI.CFunctionStdVector_front(self)
    def back(self): return _COPASI.CFunctionStdVector_back(self)
    def assign(self, *args): return _COPASI.CFunctionStdVector_assign(self, *args)
    def resize(self, *args): return _COPASI.CFunctionStdVector_resize(self, *args)
    def insert(self, *args): return _COPASI.CFunctionStdVector_insert(self, *args)
    def reserve(self, *args): return _COPASI.CFunctionStdVector_reserve(self, *args)
    def capacity(self): return _COPASI.CFunctionStdVector_capacity(self)
    __swig_destroy__ = _COPASI.delete_CFunctionStdVector
    __del__ = lambda self : None;
CFunctionStdVector_swigregister = _COPASI.CFunctionStdVector_swigregister
CFunctionStdVector_swigregister(CFunctionStdVector)

class CFunctionVector(CCopasiContainer):
    __swig_setmethods__ = {}
    for _s in [CCopasiContainer]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CFunctionVector, name, value)
    __swig_getmethods__ = {}
    for _s in [CCopasiContainer]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CFunctionVector, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _COPASI.delete_CFunctionVector
    __del__ = lambda self : None;
    def begin(self, *args): return _COPASI.CFunctionVector_begin(self, *args)
    def end(self, *args): return _COPASI.CFunctionVector_end(self, *args)
    def cleanup(self): return _COPASI.CFunctionVector_cleanup(self)
    def addCopy(self, *args): return _COPASI.CFunctionVector_addCopy(self, *args)
    def swap(self, *args): return _COPASI.CFunctionVector_swap(self, *args)
    def add(self, *args): return _COPASI.CFunctionVector_add(self, *args)
    def remove(self, *args): return _COPASI.CFunctionVector_remove(self, *args)
    def getObject(self, *args): return _COPASI.CFunctionVector_getObject(self, *args)
    def size(self): return _COPASI.CFunctionVector_size(self)
    def clear(self): return _COPASI.CFunctionVector_clear(self)
    def getIndex(self, *args): return _COPASI.CFunctionVector_getIndex(self, *args)
    def get(self, *args): return _COPASI.CFunctionVector_get(self, *args)
    def addAndOwn(self, *args): return _COPASI.CFunctionVector_addAndOwn(self, *args)
    def __len__(self): return _COPASI.CFunctionVector___len__(self)
CFunctionVector_swigregister = _COPASI.CFunctionVector_swigregister
CFunctionVector_swigregister(CFunctionVector)

class CFunctionVectorN(CFunctionVector):
    __swig_setmethods__ = {}
    for _s in [CFunctionVector]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CFunctionVectorN, name, value)
    __swig_getmethods__ = {}
    for _s in [CFunctionVector]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CFunctionVectorN, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _COPASI.new_CFunctionVectorN(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _COPASI.delete_CFunctionVectorN
    __del__ = lambda self : None;
    def addCopy(self, *args): return _COPASI.CFunctionVectorN_addCopy(self, *args)
    def add(self, *args): return _COPASI.CFunctionVectorN_add(self, *args)
    def remove(self, *args): return _COPASI.CFunctionVectorN_remove(self, *args)
    def getObject(self, *args): return _COPASI.CFunctionVectorN_getObject(self, *args)
    def getIndex(self, *args): return _COPASI.CFunctionVectorN_getIndex(self, *args)
    def getByName(self, *args): return _COPASI.CFunctionVectorN_getByName(self, *args)
CFunctionVectorN_swigregister = _COPASI.CFunctionVectorN_swigregister
CFunctionVectorN_swigregister(CFunctionVectorN)

class CEvaluationTreeStdVector:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CEvaluationTreeStdVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CEvaluationTreeStdVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _COPASI.CEvaluationTreeStdVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _COPASI.CEvaluationTreeStdVector___nonzero__(self)
    def __bool__(self): return _COPASI.CEvaluationTreeStdVector___bool__(self)
    def __len__(self): return _COPASI.CEvaluationTreeStdVector___len__(self)
    def pop(self): return _COPASI.CEvaluationTreeStdVector_pop(self)
    def __getslice__(self, *args): return _COPASI.CEvaluationTreeStdVector___getslice__(self, *args)
    def __setslice__(self, *args): return _COPASI.CEvaluationTreeStdVector___setslice__(self, *args)
    def __delslice__(self, *args): return _COPASI.CEvaluationTreeStdVector___delslice__(self, *args)
    def __delitem__(self, *args): return _COPASI.CEvaluationTreeStdVector___delitem__(self, *args)
    def __getitem__(self, *args): return _COPASI.CEvaluationTreeStdVector___getitem__(self, *args)
    def __setitem__(self, *args): return _COPASI.CEvaluationTreeStdVector___setitem__(self, *args)
    def append(self, *args): return _COPASI.CEvaluationTreeStdVector_append(self, *args)
    def empty(self): return _COPASI.CEvaluationTreeStdVector_empty(self)
    def size(self): return _COPASI.CEvaluationTreeStdVector_size(self)
    def clear(self): return _COPASI.CEvaluationTreeStdVector_clear(self)
    def swap(self, *args): return _COPASI.CEvaluationTreeStdVector_swap(self, *args)
    def get_allocator(self): return _COPASI.CEvaluationTreeStdVector_get_allocator(self)
    def begin(self): return _COPASI.CEvaluationTreeStdVector_begin(self)
    def end(self): return _COPASI.CEvaluationTreeStdVector_end(self)
    def rbegin(self): return _COPASI.CEvaluationTreeStdVector_rbegin(self)
    def rend(self): return _COPASI.CEvaluationTreeStdVector_rend(self)
    def pop_back(self): return _COPASI.CEvaluationTreeStdVector_pop_back(self)
    def erase(self, *args): return _COPASI.CEvaluationTreeStdVector_erase(self, *args)
    def __init__(self, *args): 
        this = _COPASI.new_CEvaluationTreeStdVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _COPASI.CEvaluationTreeStdVector_push_back(self, *args)
    def front(self): return _COPASI.CEvaluationTreeStdVector_front(self)
    def back(self): return _COPASI.CEvaluationTreeStdVector_back(self)
    def assign(self, *args): return _COPASI.CEvaluationTreeStdVector_assign(self, *args)
    def resize(self, *args): return _COPASI.CEvaluationTreeStdVector_resize(self, *args)
    def insert(self, *args): return _COPASI.CEvaluationTreeStdVector_insert(self, *args)
    def reserve(self, *args): return _COPASI.CEvaluationTreeStdVector_reserve(self, *args)
    def capacity(self): return _COPASI.CEvaluationTreeStdVector_capacity(self)
    __swig_destroy__ = _COPASI.delete_CEvaluationTreeStdVector
    __del__ = lambda self : None;
CEvaluationTreeStdVector_swigregister = _COPASI.CEvaluationTreeStdVector_swigregister
CEvaluationTreeStdVector_swigregister(CEvaluationTreeStdVector)

class CEvaluationTreeVector(CCopasiContainer):
    __swig_setmethods__ = {}
    for _s in [CCopasiContainer]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CEvaluationTreeVector, name, value)
    __swig_getmethods__ = {}
    for _s in [CCopasiContainer]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CEvaluationTreeVector, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _COPASI.delete_CEvaluationTreeVector
    __del__ = lambda self : None;
    def begin(self, *args): return _COPASI.CEvaluationTreeVector_begin(self, *args)
    def end(self, *args): return _COPASI.CEvaluationTreeVector_end(self, *args)
    def cleanup(self): return _COPASI.CEvaluationTreeVector_cleanup(self)
    def addCopy(self, *args): return _COPASI.CEvaluationTreeVector_addCopy(self, *args)
    def swap(self, *args): return _COPASI.CEvaluationTreeVector_swap(self, *args)
    def add(self, *args): return _COPASI.CEvaluationTreeVector_add(self, *args)
    def remove(self, *args): return _COPASI.CEvaluationTreeVector_remove(self, *args)
    def getObject(self, *args): return _COPASI.CEvaluationTreeVector_getObject(self, *args)
    def size(self): return _COPASI.CEvaluationTreeVector_size(self)
    def clear(self): return _COPASI.CEvaluationTreeVector_clear(self)
    def getIndex(self, *args): return _COPASI.CEvaluationTreeVector_getIndex(self, *args)
    def get(self, *args): return _COPASI.CEvaluationTreeVector_get(self, *args)
    def addAndOwn(self, *args): return _COPASI.CEvaluationTreeVector_addAndOwn(self, *args)
    def __len__(self): return _COPASI.CEvaluationTreeVector___len__(self)
CEvaluationTreeVector_swigregister = _COPASI.CEvaluationTreeVector_swigregister
CEvaluationTreeVector_swigregister(CEvaluationTreeVector)

class CEvaluationTreeVectorN(CEvaluationTreeVector):
    __swig_setmethods__ = {}
    for _s in [CEvaluationTreeVector]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CEvaluationTreeVectorN, name, value)
    __swig_getmethods__ = {}
    for _s in [CEvaluationTreeVector]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CEvaluationTreeVectorN, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _COPASI.new_CEvaluationTreeVectorN(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _COPASI.delete_CEvaluationTreeVectorN
    __del__ = lambda self : None;
    def addCopy(self, *args): return _COPASI.CEvaluationTreeVectorN_addCopy(self, *args)
    def add(self, *args): return _COPASI.CEvaluationTreeVectorN_add(self, *args)
    def removeByName(self, *args): return _COPASI.CEvaluationTreeVectorN_removeByName(self, *args)
    def getObject(self, *args): return _COPASI.CEvaluationTreeVectorN_getObject(self, *args)
    def getIndexByName(self, *args): return _COPASI.CEvaluationTreeVectorN_getIndexByName(self, *args)
    def getByName(self, *args): return _COPASI.CEvaluationTreeVectorN_getByName(self, *args)
CEvaluationTreeVectorN_swigregister = _COPASI.CEvaluationTreeVectorN_swigregister
CEvaluationTreeVectorN_swigregister(CEvaluationTreeVectorN)

class CChemEqElementStdVector:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CChemEqElementStdVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CChemEqElementStdVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _COPASI.CChemEqElementStdVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _COPASI.CChemEqElementStdVector___nonzero__(self)
    def __bool__(self): return _COPASI.CChemEqElementStdVector___bool__(self)
    def __len__(self): return _COPASI.CChemEqElementStdVector___len__(self)
    def pop(self): return _COPASI.CChemEqElementStdVector_pop(self)
    def __getslice__(self, *args): return _COPASI.CChemEqElementStdVector___getslice__(self, *args)
    def __setslice__(self, *args): return _COPASI.CChemEqElementStdVector___setslice__(self, *args)
    def __delslice__(self, *args): return _COPASI.CChemEqElementStdVector___delslice__(self, *args)
    def __delitem__(self, *args): return _COPASI.CChemEqElementStdVector___delitem__(self, *args)
    def __getitem__(self, *args): return _COPASI.CChemEqElementStdVector___getitem__(self, *args)
    def __setitem__(self, *args): return _COPASI.CChemEqElementStdVector___setitem__(self, *args)
    def append(self, *args): return _COPASI.CChemEqElementStdVector_append(self, *args)
    def empty(self): return _COPASI.CChemEqElementStdVector_empty(self)
    def size(self): return _COPASI.CChemEqElementStdVector_size(self)
    def clear(self): return _COPASI.CChemEqElementStdVector_clear(self)
    def swap(self, *args): return _COPASI.CChemEqElementStdVector_swap(self, *args)
    def get_allocator(self): return _COPASI.CChemEqElementStdVector_get_allocator(self)
    def begin(self): return _COPASI.CChemEqElementStdVector_begin(self)
    def end(self): return _COPASI.CChemEqElementStdVector_end(self)
    def rbegin(self): return _COPASI.CChemEqElementStdVector_rbegin(self)
    def rend(self): return _COPASI.CChemEqElementStdVector_rend(self)
    def pop_back(self): return _COPASI.CChemEqElementStdVector_pop_back(self)
    def erase(self, *args): return _COPASI.CChemEqElementStdVector_erase(self, *args)
    def __init__(self, *args): 
        this = _COPASI.new_CChemEqElementStdVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _COPASI.CChemEqElementStdVector_push_back(self, *args)
    def front(self): return _COPASI.CChemEqElementStdVector_front(self)
    def back(self): return _COPASI.CChemEqElementStdVector_back(self)
    def assign(self, *args): return _COPASI.CChemEqElementStdVector_assign(self, *args)
    def resize(self, *args): return _COPASI.CChemEqElementStdVector_resize(self, *args)
    def insert(self, *args): return _COPASI.CChemEqElementStdVector_insert(self, *args)
    def reserve(self, *args): return _COPASI.CChemEqElementStdVector_reserve(self, *args)
    def capacity(self): return _COPASI.CChemEqElementStdVector_capacity(self)
    __swig_destroy__ = _COPASI.delete_CChemEqElementStdVector
    __del__ = lambda self : None;
CChemEqElementStdVector_swigregister = _COPASI.CChemEqElementStdVector_swigregister
CChemEqElementStdVector_swigregister(CChemEqElementStdVector)

class CChemEqElementVector(CCopasiContainer):
    __swig_setmethods__ = {}
    for _s in [CCopasiContainer]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CChemEqElementVector, name, value)
    __swig_getmethods__ = {}
    for _s in [CCopasiContainer]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CChemEqElementVector, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _COPASI.delete_CChemEqElementVector
    __del__ = lambda self : None;
    def begin(self, *args): return _COPASI.CChemEqElementVector_begin(self, *args)
    def end(self, *args): return _COPASI.CChemEqElementVector_end(self, *args)
    def cleanup(self): return _COPASI.CChemEqElementVector_cleanup(self)
    def addCopy(self, *args): return _COPASI.CChemEqElementVector_addCopy(self, *args)
    def swap(self, *args): return _COPASI.CChemEqElementVector_swap(self, *args)
    def add(self, *args): return _COPASI.CChemEqElementVector_add(self, *args)
    def remove(self, *args): return _COPASI.CChemEqElementVector_remove(self, *args)
    def getObject(self, *args): return _COPASI.CChemEqElementVector_getObject(self, *args)
    def size(self): return _COPASI.CChemEqElementVector_size(self)
    def clear(self): return _COPASI.CChemEqElementVector_clear(self)
    def getIndex(self, *args): return _COPASI.CChemEqElementVector_getIndex(self, *args)
    def get(self, *args): return _COPASI.CChemEqElementVector_get(self, *args)
    def addAndOwn(self, *args): return _COPASI.CChemEqElementVector_addAndOwn(self, *args)
    def __len__(self): return _COPASI.CChemEqElementVector___len__(self)
CChemEqElementVector_swigregister = _COPASI.CChemEqElementVector_swigregister
CChemEqElementVector_swigregister(CChemEqElementVector)

class DataModelVector(CCopasiContainer):
    __swig_setmethods__ = {}
    for _s in [CCopasiContainer]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataModelVector, name, value)
    __swig_getmethods__ = {}
    for _s in [CCopasiContainer]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DataModelVector, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _COPASI.delete_DataModelVector
    __del__ = lambda self : None;
    def begin(self, *args): return _COPASI.DataModelVector_begin(self, *args)
    def end(self, *args): return _COPASI.DataModelVector_end(self, *args)
    def cleanup(self): return _COPASI.DataModelVector_cleanup(self)
    def addCopy(self, *args): return _COPASI.DataModelVector_addCopy(self, *args)
    def swap(self, *args): return _COPASI.DataModelVector_swap(self, *args)
    def add(self, *args): return _COPASI.DataModelVector_add(self, *args)
    def remove(self, *args): return _COPASI.DataModelVector_remove(self, *args)
    def getObject(self, *args): return _COPASI.DataModelVector_getObject(self, *args)
    def size(self): return _COPASI.DataModelVector_size(self)
    def clear(self): return _COPASI.DataModelVector_clear(self)
    def getIndex(self, *args): return _COPASI.DataModelVector_getIndex(self, *args)
    def get(self, *args): return _COPASI.DataModelVector_get(self, *args)
    def addAndOwn(self, *args): return _COPASI.DataModelVector_addAndOwn(self, *args)
    def __len__(self): return _COPASI.DataModelVector___len__(self)
DataModelVector_swigregister = _COPASI.DataModelVector_swigregister
DataModelVector_swigregister(DataModelVector)

class ParameterVector:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ParameterVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ParameterVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _COPASI.ParameterVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _COPASI.ParameterVector___nonzero__(self)
    def __bool__(self): return _COPASI.ParameterVector___bool__(self)
    def __len__(self): return _COPASI.ParameterVector___len__(self)
    def pop(self): return _COPASI.ParameterVector_pop(self)
    def __getslice__(self, *args): return _COPASI.ParameterVector___getslice__(self, *args)
    def __setslice__(self, *args): return _COPASI.ParameterVector___setslice__(self, *args)
    def __delslice__(self, *args): return _COPASI.ParameterVector___delslice__(self, *args)
    def __delitem__(self, *args): return _COPASI.ParameterVector___delitem__(self, *args)
    def __getitem__(self, *args): return _COPASI.ParameterVector___getitem__(self, *args)
    def __setitem__(self, *args): return _COPASI.ParameterVector___setitem__(self, *args)
    def append(self, *args): return _COPASI.ParameterVector_append(self, *args)
    def empty(self): return _COPASI.ParameterVector_empty(self)
    def size(self): return _COPASI.ParameterVector_size(self)
    def clear(self): return _COPASI.ParameterVector_clear(self)
    def swap(self, *args): return _COPASI.ParameterVector_swap(self, *args)
    def get_allocator(self): return _COPASI.ParameterVector_get_allocator(self)
    def begin(self): return _COPASI.ParameterVector_begin(self)
    def end(self): return _COPASI.ParameterVector_end(self)
    def rbegin(self): return _COPASI.ParameterVector_rbegin(self)
    def rend(self): return _COPASI.ParameterVector_rend(self)
    def pop_back(self): return _COPASI.ParameterVector_pop_back(self)
    def erase(self, *args): return _COPASI.ParameterVector_erase(self, *args)
    def __init__(self, *args): 
        this = _COPASI.new_ParameterVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _COPASI.ParameterVector_push_back(self, *args)
    def front(self): return _COPASI.ParameterVector_front(self)
    def back(self): return _COPASI.ParameterVector_back(self)
    def assign(self, *args): return _COPASI.ParameterVector_assign(self, *args)
    def resize(self, *args): return _COPASI.ParameterVector_resize(self, *args)
    def insert(self, *args): return _COPASI.ParameterVector_insert(self, *args)
    def reserve(self, *args): return _COPASI.ParameterVector_reserve(self, *args)
    def capacity(self): return _COPASI.ParameterVector_capacity(self)
    __swig_destroy__ = _COPASI.delete_ParameterVector
    __del__ = lambda self : None;
ParameterVector_swigregister = _COPASI.ParameterVector_swigregister
ParameterVector_swigregister(ParameterVector)

class IntStdVector:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntStdVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntStdVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _COPASI.IntStdVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _COPASI.IntStdVector___nonzero__(self)
    def __bool__(self): return _COPASI.IntStdVector___bool__(self)
    def __len__(self): return _COPASI.IntStdVector___len__(self)
    def pop(self): return _COPASI.IntStdVector_pop(self)
    def __getslice__(self, *args): return _COPASI.IntStdVector___getslice__(self, *args)
    def __setslice__(self, *args): return _COPASI.IntStdVector___setslice__(self, *args)
    def __delslice__(self, *args): return _COPASI.IntStdVector___delslice__(self, *args)
    def __delitem__(self, *args): return _COPASI.IntStdVector___delitem__(self, *args)
    def __getitem__(self, *args): return _COPASI.IntStdVector___getitem__(self, *args)
    def __setitem__(self, *args): return _COPASI.IntStdVector___setitem__(self, *args)
    def append(self, *args): return _COPASI.IntStdVector_append(self, *args)
    def empty(self): return _COPASI.IntStdVector_empty(self)
    def size(self): return _COPASI.IntStdVector_size(self)
    def clear(self): return _COPASI.IntStdVector_clear(self)
    def swap(self, *args): return _COPASI.IntStdVector_swap(self, *args)
    def get_allocator(self): return _COPASI.IntStdVector_get_allocator(self)
    def begin(self): return _COPASI.IntStdVector_begin(self)
    def end(self): return _COPASI.IntStdVector_end(self)
    def rbegin(self): return _COPASI.IntStdVector_rbegin(self)
    def rend(self): return _COPASI.IntStdVector_rend(self)
    def pop_back(self): return _COPASI.IntStdVector_pop_back(self)
    def erase(self, *args): return _COPASI.IntStdVector_erase(self, *args)
    def __init__(self, *args): 
        this = _COPASI.new_IntStdVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _COPASI.IntStdVector_push_back(self, *args)
    def front(self): return _COPASI.IntStdVector_front(self)
    def back(self): return _COPASI.IntStdVector_back(self)
    def assign(self, *args): return _COPASI.IntStdVector_assign(self, *args)
    def resize(self, *args): return _COPASI.IntStdVector_resize(self, *args)
    def insert(self, *args): return _COPASI.IntStdVector_insert(self, *args)
    def reserve(self, *args): return _COPASI.IntStdVector_reserve(self, *args)
    def capacity(self): return _COPASI.IntStdVector_capacity(self)
    __swig_destroy__ = _COPASI.delete_IntStdVector
    __del__ = lambda self : None;
IntStdVector_swigregister = _COPASI.IntStdVector_swigregister
IntStdVector_swigregister(IntStdVector)

class SizeTStdVector:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SizeTStdVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SizeTStdVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _COPASI.SizeTStdVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _COPASI.SizeTStdVector___nonzero__(self)
    def __bool__(self): return _COPASI.SizeTStdVector___bool__(self)
    def __len__(self): return _COPASI.SizeTStdVector___len__(self)
    def pop(self): return _COPASI.SizeTStdVector_pop(self)
    def __getslice__(self, *args): return _COPASI.SizeTStdVector___getslice__(self, *args)
    def __setslice__(self, *args): return _COPASI.SizeTStdVector___setslice__(self, *args)
    def __delslice__(self, *args): return _COPASI.SizeTStdVector___delslice__(self, *args)
    def __delitem__(self, *args): return _COPASI.SizeTStdVector___delitem__(self, *args)
    def __getitem__(self, *args): return _COPASI.SizeTStdVector___getitem__(self, *args)
    def __setitem__(self, *args): return _COPASI.SizeTStdVector___setitem__(self, *args)
    def append(self, *args): return _COPASI.SizeTStdVector_append(self, *args)
    def empty(self): return _COPASI.SizeTStdVector_empty(self)
    def size(self): return _COPASI.SizeTStdVector_size(self)
    def clear(self): return _COPASI.SizeTStdVector_clear(self)
    def swap(self, *args): return _COPASI.SizeTStdVector_swap(self, *args)
    def get_allocator(self): return _COPASI.SizeTStdVector_get_allocator(self)
    def begin(self): return _COPASI.SizeTStdVector_begin(self)
    def end(self): return _COPASI.SizeTStdVector_end(self)
    def rbegin(self): return _COPASI.SizeTStdVector_rbegin(self)
    def rend(self): return _COPASI.SizeTStdVector_rend(self)
    def pop_back(self): return _COPASI.SizeTStdVector_pop_back(self)
    def erase(self, *args): return _COPASI.SizeTStdVector_erase(self, *args)
    def __init__(self, *args): 
        this = _COPASI.new_SizeTStdVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _COPASI.SizeTStdVector_push_back(self, *args)
    def front(self): return _COPASI.SizeTStdVector_front(self)
    def back(self): return _COPASI.SizeTStdVector_back(self)
    def assign(self, *args): return _COPASI.SizeTStdVector_assign(self, *args)
    def resize(self, *args): return _COPASI.SizeTStdVector_resize(self, *args)
    def insert(self, *args): return _COPASI.SizeTStdVector_insert(self, *args)
    def reserve(self, *args): return _COPASI.SizeTStdVector_reserve(self, *args)
    def capacity(self): return _COPASI.SizeTStdVector_capacity(self)
    __swig_destroy__ = _COPASI.delete_SizeTStdVector
    __del__ = lambda self : None;
SizeTStdVector_swigregister = _COPASI.SizeTStdVector_swigregister
SizeTStdVector_swigregister(SizeTStdVector)

class StringStdVector:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringStdVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringStdVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _COPASI.StringStdVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _COPASI.StringStdVector___nonzero__(self)
    def __bool__(self): return _COPASI.StringStdVector___bool__(self)
    def __len__(self): return _COPASI.StringStdVector___len__(self)
    def pop(self): return _COPASI.StringStdVector_pop(self)
    def __getslice__(self, *args): return _COPASI.StringStdVector___getslice__(self, *args)
    def __setslice__(self, *args): return _COPASI.StringStdVector___setslice__(self, *args)
    def __delslice__(self, *args): return _COPASI.StringStdVector___delslice__(self, *args)
    def __delitem__(self, *args): return _COPASI.StringStdVector___delitem__(self, *args)
    def __getitem__(self, *args): return _COPASI.StringStdVector___getitem__(self, *args)
    def __setitem__(self, *args): return _COPASI.StringStdVector___setitem__(self, *args)
    def append(self, *args): return _COPASI.StringStdVector_append(self, *args)
    def empty(self): return _COPASI.StringStdVector_empty(self)
    def size(self): return _COPASI.StringStdVector_size(self)
    def clear(self): return _COPASI.StringStdVector_clear(self)
    def swap(self, *args): return _COPASI.StringStdVector_swap(self, *args)
    def get_allocator(self): return _COPASI.StringStdVector_get_allocator(self)
    def begin(self): return _COPASI.StringStdVector_begin(self)
    def end(self): return _COPASI.StringStdVector_end(self)
    def rbegin(self): return _COPASI.StringStdVector_rbegin(self)
    def rend(self): return _COPASI.StringStdVector_rend(self)
    def pop_back(self): return _COPASI.StringStdVector_pop_back(self)
    def erase(self, *args): return _COPASI.StringStdVector_erase(self, *args)
    def __init__(self, *args): 
        this = _COPASI.new_StringStdVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _COPASI.StringStdVector_push_back(self, *args)
    def front(self): return _COPASI.StringStdVector_front(self)
    def back(self): return _COPASI.StringStdVector_back(self)
    def assign(self, *args): return _COPASI.StringStdVector_assign(self, *args)
    def resize(self, *args): return _COPASI.StringStdVector_resize(self, *args)
    def insert(self, *args): return _COPASI.StringStdVector_insert(self, *args)
    def reserve(self, *args): return _COPASI.StringStdVector_reserve(self, *args)
    def capacity(self): return _COPASI.StringStdVector_capacity(self)
    __swig_destroy__ = _COPASI.delete_StringStdVector
    __del__ = lambda self : None;
StringStdVector_swigregister = _COPASI.StringStdVector_swigregister
StringStdVector_swigregister(StringStdVector)

class VectorOfStringVectors:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorOfStringVectors, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorOfStringVectors, name)
    __repr__ = _swig_repr
    def iterator(self): return _COPASI.VectorOfStringVectors_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _COPASI.VectorOfStringVectors___nonzero__(self)
    def __bool__(self): return _COPASI.VectorOfStringVectors___bool__(self)
    def __len__(self): return _COPASI.VectorOfStringVectors___len__(self)
    def pop(self): return _COPASI.VectorOfStringVectors_pop(self)
    def __getslice__(self, *args): return _COPASI.VectorOfStringVectors___getslice__(self, *args)
    def __setslice__(self, *args): return _COPASI.VectorOfStringVectors___setslice__(self, *args)
    def __delslice__(self, *args): return _COPASI.VectorOfStringVectors___delslice__(self, *args)
    def __delitem__(self, *args): return _COPASI.VectorOfStringVectors___delitem__(self, *args)
    def __getitem__(self, *args): return _COPASI.VectorOfStringVectors___getitem__(self, *args)
    def __setitem__(self, *args): return _COPASI.VectorOfStringVectors___setitem__(self, *args)
    def append(self, *args): return _COPASI.VectorOfStringVectors_append(self, *args)
    def empty(self): return _COPASI.VectorOfStringVectors_empty(self)
    def size(self): return _COPASI.VectorOfStringVectors_size(self)
    def clear(self): return _COPASI.VectorOfStringVectors_clear(self)
    def swap(self, *args): return _COPASI.VectorOfStringVectors_swap(self, *args)
    def get_allocator(self): return _COPASI.VectorOfStringVectors_get_allocator(self)
    def begin(self): return _COPASI.VectorOfStringVectors_begin(self)
    def end(self): return _COPASI.VectorOfStringVectors_end(self)
    def rbegin(self): return _COPASI.VectorOfStringVectors_rbegin(self)
    def rend(self): return _COPASI.VectorOfStringVectors_rend(self)
    def pop_back(self): return _COPASI.VectorOfStringVectors_pop_back(self)
    def erase(self, *args): return _COPASI.VectorOfStringVectors_erase(self, *args)
    def __init__(self, *args): 
        this = _COPASI.new_VectorOfStringVectors(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _COPASI.VectorOfStringVectors_push_back(self, *args)
    def front(self): return _COPASI.VectorOfStringVectors_front(self)
    def back(self): return _COPASI.VectorOfStringVectors_back(self)
    def assign(self, *args): return _COPASI.VectorOfStringVectors_assign(self, *args)
    def resize(self, *args): return _COPASI.VectorOfStringVectors_resize(self, *args)
    def insert(self, *args): return _COPASI.VectorOfStringVectors_insert(self, *args)
    def reserve(self, *args): return _COPASI.VectorOfStringVectors_reserve(self, *args)
    def capacity(self): return _COPASI.VectorOfStringVectors_capacity(self)
    __swig_destroy__ = _COPASI.delete_VectorOfStringVectors
    __del__ = lambda self : None;
VectorOfStringVectors_swigregister = _COPASI.VectorOfStringVectors_swigregister
VectorOfStringVectors_swigregister(VectorOfStringVectors)

class FloatStdVector:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FloatStdVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FloatStdVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _COPASI.FloatStdVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _COPASI.FloatStdVector___nonzero__(self)
    def __bool__(self): return _COPASI.FloatStdVector___bool__(self)
    def __len__(self): return _COPASI.FloatStdVector___len__(self)
    def pop(self): return _COPASI.FloatStdVector_pop(self)
    def __getslice__(self, *args): return _COPASI.FloatStdVector___getslice__(self, *args)
    def __setslice__(self, *args): return _COPASI.FloatStdVector___setslice__(self, *args)
    def __delslice__(self, *args): return _COPASI.FloatStdVector___delslice__(self, *args)
    def __delitem__(self, *args): return _COPASI.FloatStdVector___delitem__(self, *args)
    def __getitem__(self, *args): return _COPASI.FloatStdVector___getitem__(self, *args)
    def __setitem__(self, *args): return _COPASI.FloatStdVector___setitem__(self, *args)
    def append(self, *args): return _COPASI.FloatStdVector_append(self, *args)
    def empty(self): return _COPASI.FloatStdVector_empty(self)
    def size(self): return _COPASI.FloatStdVector_size(self)
    def clear(self): return _COPASI.FloatStdVector_clear(self)
    def swap(self, *args): return _COPASI.FloatStdVector_swap(self, *args)
    def get_allocator(self): return _COPASI.FloatStdVector_get_allocator(self)
    def begin(self): return _COPASI.FloatStdVector_begin(self)
    def end(self): return _COPASI.FloatStdVector_end(self)
    def rbegin(self): return _COPASI.FloatStdVector_rbegin(self)
    def rend(self): return _COPASI.FloatStdVector_rend(self)
    def pop_back(self): return _COPASI.FloatStdVector_pop_back(self)
    def erase(self, *args): return _COPASI.FloatStdVector_erase(self, *args)
    def __init__(self, *args): 
        this = _COPASI.new_FloatStdVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _COPASI.FloatStdVector_push_back(self, *args)
    def front(self): return _COPASI.FloatStdVector_front(self)
    def back(self): return _COPASI.FloatStdVector_back(self)
    def assign(self, *args): return _COPASI.FloatStdVector_assign(self, *args)
    def resize(self, *args): return _COPASI.FloatStdVector_resize(self, *args)
    def insert(self, *args): return _COPASI.FloatStdVector_insert(self, *args)
    def reserve(self, *args): return _COPASI.FloatStdVector_reserve(self, *args)
    def capacity(self): return _COPASI.FloatStdVector_capacity(self)
    __swig_destroy__ = _COPASI.delete_FloatStdVector
    __del__ = lambda self : None;
FloatStdVector_swigregister = _COPASI.FloatStdVector_swigregister
FloatStdVector_swigregister(FloatStdVector)

class OptItemStdVector:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptItemStdVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptItemStdVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _COPASI.OptItemStdVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _COPASI.OptItemStdVector___nonzero__(self)
    def __bool__(self): return _COPASI.OptItemStdVector___bool__(self)
    def __len__(self): return _COPASI.OptItemStdVector___len__(self)
    def pop(self): return _COPASI.OptItemStdVector_pop(self)
    def __getslice__(self, *args): return _COPASI.OptItemStdVector___getslice__(self, *args)
    def __setslice__(self, *args): return _COPASI.OptItemStdVector___setslice__(self, *args)
    def __delslice__(self, *args): return _COPASI.OptItemStdVector___delslice__(self, *args)
    def __delitem__(self, *args): return _COPASI.OptItemStdVector___delitem__(self, *args)
    def __getitem__(self, *args): return _COPASI.OptItemStdVector___getitem__(self, *args)
    def __setitem__(self, *args): return _COPASI.OptItemStdVector___setitem__(self, *args)
    def append(self, *args): return _COPASI.OptItemStdVector_append(self, *args)
    def empty(self): return _COPASI.OptItemStdVector_empty(self)
    def size(self): return _COPASI.OptItemStdVector_size(self)
    def clear(self): return _COPASI.OptItemStdVector_clear(self)
    def swap(self, *args): return _COPASI.OptItemStdVector_swap(self, *args)
    def get_allocator(self): return _COPASI.OptItemStdVector_get_allocator(self)
    def begin(self): return _COPASI.OptItemStdVector_begin(self)
    def end(self): return _COPASI.OptItemStdVector_end(self)
    def rbegin(self): return _COPASI.OptItemStdVector_rbegin(self)
    def rend(self): return _COPASI.OptItemStdVector_rend(self)
    def pop_back(self): return _COPASI.OptItemStdVector_pop_back(self)
    def erase(self, *args): return _COPASI.OptItemStdVector_erase(self, *args)
    def __init__(self, *args): 
        this = _COPASI.new_OptItemStdVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _COPASI.OptItemStdVector_push_back(self, *args)
    def front(self): return _COPASI.OptItemStdVector_front(self)
    def back(self): return _COPASI.OptItemStdVector_back(self)
    def assign(self, *args): return _COPASI.OptItemStdVector_assign(self, *args)
    def resize(self, *args): return _COPASI.OptItemStdVector_resize(self, *args)
    def insert(self, *args): return _COPASI.OptItemStdVector_insert(self, *args)
    def reserve(self, *args): return _COPASI.OptItemStdVector_reserve(self, *args)
    def capacity(self): return _COPASI.OptItemStdVector_capacity(self)
    __swig_destroy__ = _COPASI.delete_OptItemStdVector
    __del__ = lambda self : None;
OptItemStdVector_swigregister = _COPASI.OptItemStdVector_swigregister
OptItemStdVector_swigregister(OptItemStdVector)

class ContainerStdVector:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ContainerStdVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ContainerStdVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _COPASI.ContainerStdVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _COPASI.ContainerStdVector___nonzero__(self)
    def __bool__(self): return _COPASI.ContainerStdVector___bool__(self)
    def __len__(self): return _COPASI.ContainerStdVector___len__(self)
    def pop(self): return _COPASI.ContainerStdVector_pop(self)
    def __getslice__(self, *args): return _COPASI.ContainerStdVector___getslice__(self, *args)
    def __setslice__(self, *args): return _COPASI.ContainerStdVector___setslice__(self, *args)
    def __delslice__(self, *args): return _COPASI.ContainerStdVector___delslice__(self, *args)
    def __delitem__(self, *args): return _COPASI.ContainerStdVector___delitem__(self, *args)
    def __getitem__(self, *args): return _COPASI.ContainerStdVector___getitem__(self, *args)
    def __setitem__(self, *args): return _COPASI.ContainerStdVector___setitem__(self, *args)
    def append(self, *args): return _COPASI.ContainerStdVector_append(self, *args)
    def empty(self): return _COPASI.ContainerStdVector_empty(self)
    def size(self): return _COPASI.ContainerStdVector_size(self)
    def clear(self): return _COPASI.ContainerStdVector_clear(self)
    def swap(self, *args): return _COPASI.ContainerStdVector_swap(self, *args)
    def get_allocator(self): return _COPASI.ContainerStdVector_get_allocator(self)
    def begin(self): return _COPASI.ContainerStdVector_begin(self)
    def end(self): return _COPASI.ContainerStdVector_end(self)
    def rbegin(self): return _COPASI.ContainerStdVector_rbegin(self)
    def rend(self): return _COPASI.ContainerStdVector_rend(self)
    def pop_back(self): return _COPASI.ContainerStdVector_pop_back(self)
    def erase(self, *args): return _COPASI.ContainerStdVector_erase(self, *args)
    def __init__(self, *args): 
        this = _COPASI.new_ContainerStdVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _COPASI.ContainerStdVector_push_back(self, *args)
    def front(self): return _COPASI.ContainerStdVector_front(self)
    def back(self): return _COPASI.ContainerStdVector_back(self)
    def assign(self, *args): return _COPASI.ContainerStdVector_assign(self, *args)
    def resize(self, *args): return _COPASI.ContainerStdVector_resize(self, *args)
    def insert(self, *args): return _COPASI.ContainerStdVector_insert(self, *args)
    def reserve(self, *args): return _COPASI.ContainerStdVector_reserve(self, *args)
    def capacity(self): return _COPASI.ContainerStdVector_capacity(self)
    __swig_destroy__ = _COPASI.delete_ContainerStdVector
    __del__ = lambda self : None;
ContainerStdVector_swigregister = _COPASI.ContainerStdVector_swigregister
ContainerStdVector_swigregister(ContainerStdVector)

class PointStdVector:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PointStdVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PointStdVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _COPASI.PointStdVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _COPASI.PointStdVector___nonzero__(self)
    def __bool__(self): return _COPASI.PointStdVector___bool__(self)
    def __len__(self): return _COPASI.PointStdVector___len__(self)
    def pop(self): return _COPASI.PointStdVector_pop(self)
    def __getslice__(self, *args): return _COPASI.PointStdVector___getslice__(self, *args)
    def __setslice__(self, *args): return _COPASI.PointStdVector___setslice__(self, *args)
    def __delslice__(self, *args): return _COPASI.PointStdVector___delslice__(self, *args)
    def __delitem__(self, *args): return _COPASI.PointStdVector___delitem__(self, *args)
    def __getitem__(self, *args): return _COPASI.PointStdVector___getitem__(self, *args)
    def __setitem__(self, *args): return _COPASI.PointStdVector___setitem__(self, *args)
    def append(self, *args): return _COPASI.PointStdVector_append(self, *args)
    def empty(self): return _COPASI.PointStdVector_empty(self)
    def size(self): return _COPASI.PointStdVector_size(self)
    def clear(self): return _COPASI.PointStdVector_clear(self)
    def swap(self, *args): return _COPASI.PointStdVector_swap(self, *args)
    def get_allocator(self): return _COPASI.PointStdVector_get_allocator(self)
    def begin(self): return _COPASI.PointStdVector_begin(self)
    def end(self): return _COPASI.PointStdVector_end(self)
    def rbegin(self): return _COPASI.PointStdVector_rbegin(self)
    def rend(self): return _COPASI.PointStdVector_rend(self)
    def pop_back(self): return _COPASI.PointStdVector_pop_back(self)
    def erase(self, *args): return _COPASI.PointStdVector_erase(self, *args)
    def __init__(self, *args): 
        this = _COPASI.new_PointStdVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _COPASI.PointStdVector_push_back(self, *args)
    def front(self): return _COPASI.PointStdVector_front(self)
    def back(self): return _COPASI.PointStdVector_back(self)
    def assign(self, *args): return _COPASI.PointStdVector_assign(self, *args)
    def resize(self, *args): return _COPASI.PointStdVector_resize(self, *args)
    def insert(self, *args): return _COPASI.PointStdVector_insert(self, *args)
    def reserve(self, *args): return _COPASI.PointStdVector_reserve(self, *args)
    def capacity(self): return _COPASI.PointStdVector_capacity(self)
    __swig_destroy__ = _COPASI.delete_PointStdVector
    __del__ = lambda self : None;
PointStdVector_swigregister = _COPASI.PointStdVector_swigregister
PointStdVector_swigregister(PointStdVector)

class LineSegmentStdVector:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LineSegmentStdVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LineSegmentStdVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _COPASI.LineSegmentStdVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _COPASI.LineSegmentStdVector___nonzero__(self)
    def __bool__(self): return _COPASI.LineSegmentStdVector___bool__(self)
    def __len__(self): return _COPASI.LineSegmentStdVector___len__(self)
    def pop(self): return _COPASI.LineSegmentStdVector_pop(self)
    def __getslice__(self, *args): return _COPASI.LineSegmentStdVector___getslice__(self, *args)
    def __setslice__(self, *args): return _COPASI.LineSegmentStdVector___setslice__(self, *args)
    def __delslice__(self, *args): return _COPASI.LineSegmentStdVector___delslice__(self, *args)
    def __delitem__(self, *args): return _COPASI.LineSegmentStdVector___delitem__(self, *args)
    def __getitem__(self, *args): return _COPASI.LineSegmentStdVector___getitem__(self, *args)
    def __setitem__(self, *args): return _COPASI.LineSegmentStdVector___setitem__(self, *args)
    def append(self, *args): return _COPASI.LineSegmentStdVector_append(self, *args)
    def empty(self): return _COPASI.LineSegmentStdVector_empty(self)
    def size(self): return _COPASI.LineSegmentStdVector_size(self)
    def clear(self): return _COPASI.LineSegmentStdVector_clear(self)
    def swap(self, *args): return _COPASI.LineSegmentStdVector_swap(self, *args)
    def get_allocator(self): return _COPASI.LineSegmentStdVector_get_allocator(self)
    def begin(self): return _COPASI.LineSegmentStdVector_begin(self)
    def end(self): return _COPASI.LineSegmentStdVector_end(self)
    def rbegin(self): return _COPASI.LineSegmentStdVector_rbegin(self)
    def rend(self): return _COPASI.LineSegmentStdVector_rend(self)
    def pop_back(self): return _COPASI.LineSegmentStdVector_pop_back(self)
    def erase(self, *args): return _COPASI.LineSegmentStdVector_erase(self, *args)
    def __init__(self, *args): 
        this = _COPASI.new_LineSegmentStdVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _COPASI.LineSegmentStdVector_push_back(self, *args)
    def front(self): return _COPASI.LineSegmentStdVector_front(self)
    def back(self): return _COPASI.LineSegmentStdVector_back(self)
    def assign(self, *args): return _COPASI.LineSegmentStdVector_assign(self, *args)
    def resize(self, *args): return _COPASI.LineSegmentStdVector_resize(self, *args)
    def insert(self, *args): return _COPASI.LineSegmentStdVector_insert(self, *args)
    def reserve(self, *args): return _COPASI.LineSegmentStdVector_reserve(self, *args)
    def capacity(self): return _COPASI.LineSegmentStdVector_capacity(self)
    __swig_destroy__ = _COPASI.delete_LineSegmentStdVector
    __del__ = lambda self : None;
LineSegmentStdVector_swigregister = _COPASI.LineSegmentStdVector_swigregister
LineSegmentStdVector_swigregister(LineSegmentStdVector)

class FittingPointVector(CCopasiContainer):
    __swig_setmethods__ = {}
    for _s in [CCopasiContainer]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FittingPointVector, name, value)
    __swig_getmethods__ = {}
    for _s in [CCopasiContainer]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FittingPointVector, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _COPASI.delete_FittingPointVector
    __del__ = lambda self : None;
    def begin(self, *args): return _COPASI.FittingPointVector_begin(self, *args)
    def end(self, *args): return _COPASI.FittingPointVector_end(self, *args)
    def cleanup(self): return _COPASI.FittingPointVector_cleanup(self)
    def addCopy(self, *args): return _COPASI.FittingPointVector_addCopy(self, *args)
    def swap(self, *args): return _COPASI.FittingPointVector_swap(self, *args)
    def add(self, *args): return _COPASI.FittingPointVector_add(self, *args)
    def remove(self, *args): return _COPASI.FittingPointVector_remove(self, *args)
    def getObject(self, *args): return _COPASI.FittingPointVector_getObject(self, *args)
    def size(self): return _COPASI.FittingPointVector_size(self)
    def clear(self): return _COPASI.FittingPointVector_clear(self)
    def getIndex(self, *args): return _COPASI.FittingPointVector_getIndex(self, *args)
    def get(self, *args): return _COPASI.FittingPointVector_get(self, *args)
    def addAndOwn(self, *args): return _COPASI.FittingPointVector_addAndOwn(self, *args)
    def __len__(self): return _COPASI.FittingPointVector___len__(self)
FittingPointVector_swigregister = _COPASI.FittingPointVector_swigregister
FittingPointVector_swigregister(FittingPointVector)

class BiologicalDescriptionVector(CCopasiContainer):
    __swig_setmethods__ = {}
    for _s in [CCopasiContainer]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BiologicalDescriptionVector, name, value)
    __swig_getmethods__ = {}
    for _s in [CCopasiContainer]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, BiologicalDescriptionVector, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _COPASI.delete_BiologicalDescriptionVector
    __del__ = lambda self : None;
    def begin(self, *args): return _COPASI.BiologicalDescriptionVector_begin(self, *args)
    def end(self, *args): return _COPASI.BiologicalDescriptionVector_end(self, *args)
    def cleanup(self): return _COPASI.BiologicalDescriptionVector_cleanup(self)
    def addCopy(self, *args): return _COPASI.BiologicalDescriptionVector_addCopy(self, *args)
    def swap(self, *args): return _COPASI.BiologicalDescriptionVector_swap(self, *args)
    def add(self, *args): return _COPASI.BiologicalDescriptionVector_add(self, *args)
    def remove(self, *args): return _COPASI.BiologicalDescriptionVector_remove(self, *args)
    def getObject(self, *args): return _COPASI.BiologicalDescriptionVector_getObject(self, *args)
    def size(self): return _COPASI.BiologicalDescriptionVector_size(self)
    def clear(self): return _COPASI.BiologicalDescriptionVector_clear(self)
    def getIndex(self, *args): return _COPASI.BiologicalDescriptionVector_getIndex(self, *args)
    def get(self, *args): return _COPASI.BiologicalDescriptionVector_get(self, *args)
    def addAndOwn(self, *args): return _COPASI.BiologicalDescriptionVector_addAndOwn(self, *args)
    def __len__(self): return _COPASI.BiologicalDescriptionVector___len__(self)
BiologicalDescriptionVector_swigregister = _COPASI.BiologicalDescriptionVector_swigregister
BiologicalDescriptionVector_swigregister(BiologicalDescriptionVector)

class CreatorVector(CCopasiContainer):
    __swig_setmethods__ = {}
    for _s in [CCopasiContainer]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CreatorVector, name, value)
    __swig_getmethods__ = {}
    for _s in [CCopasiContainer]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CreatorVector, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _COPASI.delete_CreatorVector
    __del__ = lambda self : None;
    def begin(self, *args): return _COPASI.CreatorVector_begin(self, *args)
    def end(self, *args): return _COPASI.CreatorVector_end(self, *args)
    def cleanup(self): return _COPASI.CreatorVector_cleanup(self)
    def addCopy(self, *args): return _COPASI.CreatorVector_addCopy(self, *args)
    def swap(self, *args): return _COPASI.CreatorVector_swap(self, *args)
    def add(self, *args): return _COPASI.CreatorVector_add(self, *args)
    def remove(self, *args): return _COPASI.CreatorVector_remove(self, *args)
    def getObject(self, *args): return _COPASI.CreatorVector_getObject(self, *args)
    def size(self): return _COPASI.CreatorVector_size(self)
    def clear(self): return _COPASI.CreatorVector_clear(self)
    def getIndex(self, *args): return _COPASI.CreatorVector_getIndex(self, *args)
    def get(self, *args): return _COPASI.CreatorVector_get(self, *args)
    def addAndOwn(self, *args): return _COPASI.CreatorVector_addAndOwn(self, *args)
    def __len__(self): return _COPASI.CreatorVector___len__(self)
CreatorVector_swigregister = _COPASI.CreatorVector_swigregister
CreatorVector_swigregister(CreatorVector)

class ReferenceVector(CCopasiContainer):
    __swig_setmethods__ = {}
    for _s in [CCopasiContainer]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReferenceVector, name, value)
    __swig_getmethods__ = {}
    for _s in [CCopasiContainer]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ReferenceVector, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _COPASI.delete_ReferenceVector
    __del__ = lambda self : None;
    def begin(self, *args): return _COPASI.ReferenceVector_begin(self, *args)
    def end(self, *args): return _COPASI.ReferenceVector_end(self, *args)
    def cleanup(self): return _COPASI.ReferenceVector_cleanup(self)
    def addCopy(self, *args): return _COPASI.ReferenceVector_addCopy(self, *args)
    def swap(self, *args): return _COPASI.ReferenceVector_swap(self, *args)
    def add(self, *args): return _COPASI.ReferenceVector_add(self, *args)
    def remove(self, *args): return _COPASI.ReferenceVector_remove(self, *args)
    def getObject(self, *args): return _COPASI.ReferenceVector_getObject(self, *args)
    def size(self): return _COPASI.ReferenceVector_size(self)
    def clear(self): return _COPASI.ReferenceVector_clear(self)
    def getIndex(self, *args): return _COPASI.ReferenceVector_getIndex(self, *args)
    def get(self, *args): return _COPASI.ReferenceVector_get(self, *args)
    def addAndOwn(self, *args): return _COPASI.ReferenceVector_addAndOwn(self, *args)
    def __len__(self): return _COPASI.ReferenceVector___len__(self)
ReferenceVector_swigregister = _COPASI.ReferenceVector_swigregister
ReferenceVector_swigregister(ReferenceVector)

class ModificationVector(CCopasiContainer):
    __swig_setmethods__ = {}
    for _s in [CCopasiContainer]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModificationVector, name, value)
    __swig_getmethods__ = {}
    for _s in [CCopasiContainer]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModificationVector, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _COPASI.delete_ModificationVector
    __del__ = lambda self : None;
    def begin(self, *args): return _COPASI.ModificationVector_begin(self, *args)
    def end(self, *args): return _COPASI.ModificationVector_end(self, *args)
    def cleanup(self): return _COPASI.ModificationVector_cleanup(self)
    def addCopy(self, *args): return _COPASI.ModificationVector_addCopy(self, *args)
    def swap(self, *args): return _COPASI.ModificationVector_swap(self, *args)
    def add(self, *args): return _COPASI.ModificationVector_add(self, *args)
    def remove(self, *args): return _COPASI.ModificationVector_remove(self, *args)
    def getObject(self, *args): return _COPASI.ModificationVector_getObject(self, *args)
    def size(self): return _COPASI.ModificationVector_size(self)
    def clear(self): return _COPASI.ModificationVector_clear(self)
    def getIndex(self, *args): return _COPASI.ModificationVector_getIndex(self, *args)
    def get(self, *args): return _COPASI.ModificationVector_get(self, *args)
    def addAndOwn(self, *args): return _COPASI.ModificationVector_addAndOwn(self, *args)
    def __len__(self): return _COPASI.ModificationVector___len__(self)
ModificationVector_swigregister = _COPASI.ModificationVector_swigregister
ModificationVector_swigregister(ModificationVector)

class ObjectListTypeStdVector:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ObjectListTypeStdVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ObjectListTypeStdVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _COPASI.ObjectListTypeStdVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _COPASI.ObjectListTypeStdVector___nonzero__(self)
    def __bool__(self): return _COPASI.ObjectListTypeStdVector___bool__(self)
    def __len__(self): return _COPASI.ObjectListTypeStdVector___len__(self)
    def pop(self): return _COPASI.ObjectListTypeStdVector_pop(self)
    def __getslice__(self, *args): return _COPASI.ObjectListTypeStdVector___getslice__(self, *args)
    def __setslice__(self, *args): return _COPASI.ObjectListTypeStdVector___setslice__(self, *args)
    def __delslice__(self, *args): return _COPASI.ObjectListTypeStdVector___delslice__(self, *args)
    def __delitem__(self, *args): return _COPASI.ObjectListTypeStdVector___delitem__(self, *args)
    def __getitem__(self, *args): return _COPASI.ObjectListTypeStdVector___getitem__(self, *args)
    def __setitem__(self, *args): return _COPASI.ObjectListTypeStdVector___setitem__(self, *args)
    def append(self, *args): return _COPASI.ObjectListTypeStdVector_append(self, *args)
    def empty(self): return _COPASI.ObjectListTypeStdVector_empty(self)
    def size(self): return _COPASI.ObjectListTypeStdVector_size(self)
    def clear(self): return _COPASI.ObjectListTypeStdVector_clear(self)
    def swap(self, *args): return _COPASI.ObjectListTypeStdVector_swap(self, *args)
    def get_allocator(self): return _COPASI.ObjectListTypeStdVector_get_allocator(self)
    def begin(self): return _COPASI.ObjectListTypeStdVector_begin(self)
    def end(self): return _COPASI.ObjectListTypeStdVector_end(self)
    def rbegin(self): return _COPASI.ObjectListTypeStdVector_rbegin(self)
    def rend(self): return _COPASI.ObjectListTypeStdVector_rend(self)
    def pop_back(self): return _COPASI.ObjectListTypeStdVector_pop_back(self)
    def erase(self, *args): return _COPASI.ObjectListTypeStdVector_erase(self, *args)
    def __init__(self, *args): 
        this = _COPASI.new_ObjectListTypeStdVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _COPASI.ObjectListTypeStdVector_push_back(self, *args)
    def front(self): return _COPASI.ObjectListTypeStdVector_front(self)
    def back(self): return _COPASI.ObjectListTypeStdVector_back(self)
    def assign(self, *args): return _COPASI.ObjectListTypeStdVector_assign(self, *args)
    def resize(self, *args): return _COPASI.ObjectListTypeStdVector_resize(self, *args)
    def insert(self, *args): return _COPASI.ObjectListTypeStdVector_insert(self, *args)
    def reserve(self, *args): return _COPASI.ObjectListTypeStdVector_reserve(self, *args)
    def capacity(self): return _COPASI.ObjectListTypeStdVector_capacity(self)
    __swig_destroy__ = _COPASI.delete_ObjectListTypeStdVector
    __del__ = lambda self : None;
ObjectListTypeStdVector_swigregister = _COPASI.ObjectListTypeStdVector_swigregister
ObjectListTypeStdVector_swigregister(ObjectListTypeStdVector)

class CEigen(CCopasiContainer):
    __swig_setmethods__ = {}
    for _s in [CCopasiContainer]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CEigen, name, value)
    __swig_getmethods__ = {}
    for _s in [CCopasiContainer]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CEigen, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _COPASI.new_CEigen(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _COPASI.delete_CEigen
    __del__ = lambda self : None;
    def initialize(self): return _COPASI.CEigen_initialize(self)
    def cleanup(self): return _COPASI.CEigen_cleanup(self)
    def calcEigenValues(self, *args): return _COPASI.CEigen_calcEigenValues(self, *args)
    def stabilityAnalysis(self, *args): return _COPASI.CEigen_stabilityAnalysis(self, *args)
    def getMaxrealpart(self): return _COPASI.CEigen_getMaxrealpart(self)
    def getMaximagpart(self): return _COPASI.CEigen_getMaximagpart(self)
    def getNzero(self): return _COPASI.CEigen_getNzero(self)
    def getStiffness(self): return _COPASI.CEigen_getStiffness(self)
    def getHierarchy(self): return _COPASI.CEigen_getHierarchy(self)
    def getNreal(self): return _COPASI.CEigen_getNreal(self)
    def getNimag(self): return _COPASI.CEigen_getNimag(self)
    def getNcplxconj(self): return _COPASI.CEigen_getNcplxconj(self)
    def getNposreal(self): return _COPASI.CEigen_getNposreal(self)
    def getNnegreal(self): return _COPASI.CEigen_getNnegreal(self)
    def getI(self): return _COPASI.CEigen_getI(self)
    def getR(self): return _COPASI.CEigen_getR(self)
CEigen_swigregister = _COPASI.CEigen_swigregister
CEigen_swigregister(CEigen)

class CObjectLists:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CObjectLists, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CObjectLists, name)
    __repr__ = _swig_repr
    EMPTY_LIST = _COPASI.CObjectLists_EMPTY_LIST
    SINGLE_OBJECT = _COPASI.CObjectLists_SINGLE_OBJECT
    METABS = _COPASI.CObjectLists_METABS
    METAB_INITIAL_CONCENTRATIONS = _COPASI.CObjectLists_METAB_INITIAL_CONCENTRATIONS
    METAB_INITIAL_NUMBERS = _COPASI.CObjectLists_METAB_INITIAL_NUMBERS
    METAB_CONCENTRATIONS = _COPASI.CObjectLists_METAB_CONCENTRATIONS
    METAB_NUMBERS = _COPASI.CObjectLists_METAB_NUMBERS
    NON_CONST_METAB_CONCENTRATIONS = _COPASI.CObjectLists_NON_CONST_METAB_CONCENTRATIONS
    NON_CONST_METAB_NUMBERS = _COPASI.CObjectLists_NON_CONST_METAB_NUMBERS
    CONST_METAB_CONCENTRATIONS = _COPASI.CObjectLists_CONST_METAB_CONCENTRATIONS
    CONST_METAB_NUMBERS = _COPASI.CObjectLists_CONST_METAB_NUMBERS
    ODE_METAB_CONCENTRATIONS = _COPASI.CObjectLists_ODE_METAB_CONCENTRATIONS
    ODE_METAB_NUMBERS = _COPASI.CObjectLists_ODE_METAB_NUMBERS
    REACTION_METAB_CONCENTRATIONS = _COPASI.CObjectLists_REACTION_METAB_CONCENTRATIONS
    REACTION_METAB_NUMBERS = _COPASI.CObjectLists_REACTION_METAB_NUMBERS
    ASS_METAB_CONCENTRATIONS = _COPASI.CObjectLists_ASS_METAB_CONCENTRATIONS
    ASS_METAB_NUMBERS = _COPASI.CObjectLists_ASS_METAB_NUMBERS
    METAB_CONC_RATES = _COPASI.CObjectLists_METAB_CONC_RATES
    METAB_PART_RATES = _COPASI.CObjectLists_METAB_PART_RATES
    METAB_TRANSITION_TIME = _COPASI.CObjectLists_METAB_TRANSITION_TIME
    REACTIONS = _COPASI.CObjectLists_REACTIONS
    REACTION_CONC_FLUXES = _COPASI.CObjectLists_REACTION_CONC_FLUXES
    REACTION_PART_FLUXES = _COPASI.CObjectLists_REACTION_PART_FLUXES
    GLOBAL_PARAMETERS = _COPASI.CObjectLists_GLOBAL_PARAMETERS
    GLOBAL_PARAMETER_INITIAL_VALUES = _COPASI.CObjectLists_GLOBAL_PARAMETER_INITIAL_VALUES
    GLOBAL_PARAMETER_VALUES = _COPASI.CObjectLists_GLOBAL_PARAMETER_VALUES
    NON_CONST_GLOBAL_PARAMETER_VALUES = _COPASI.CObjectLists_NON_CONST_GLOBAL_PARAMETER_VALUES
    CONST_GLOBAL_PARAMETER_INITIAL_VALUES = _COPASI.CObjectLists_CONST_GLOBAL_PARAMETER_INITIAL_VALUES
    ODE_GLOBAL_PARAMETER_VALUES = _COPASI.CObjectLists_ODE_GLOBAL_PARAMETER_VALUES
    ASS_GLOBAL_PARAMETER_VALUES = _COPASI.CObjectLists_ASS_GLOBAL_PARAMETER_VALUES
    GLOBAL_PARAMETER_RATES = _COPASI.CObjectLists_GLOBAL_PARAMETER_RATES
    COMPARTMENTS = _COPASI.CObjectLists_COMPARTMENTS
    COMPARTMENT_INITIAL_VOLUMES = _COPASI.CObjectLists_COMPARTMENT_INITIAL_VOLUMES
    COMPARTMENT_VOLUMES = _COPASI.CObjectLists_COMPARTMENT_VOLUMES
    NON_CONST_COMPARTMENT_VOLUMES = _COPASI.CObjectLists_NON_CONST_COMPARTMENT_VOLUMES
    CONST_COMPARTMENT_VOLUMES = _COPASI.CObjectLists_CONST_COMPARTMENT_VOLUMES
    ODE_COMPARTMENT_VOLUMES = _COPASI.CObjectLists_ODE_COMPARTMENT_VOLUMES
    ASS_COMPARTMENT_VOLUMES = _COPASI.CObjectLists_ASS_COMPARTMENT_VOLUMES
    COMPARTMENT_RATES = _COPASI.CObjectLists_COMPARTMENT_RATES
    ALL_INITIAL_VALUES = _COPASI.CObjectLists_ALL_INITIAL_VALUES
    ALL_LOCAL_PARAMETER_VALUES = _COPASI.CObjectLists_ALL_LOCAL_PARAMETER_VALUES
    ALL_PARAMETER_VALUES = _COPASI.CObjectLists_ALL_PARAMETER_VALUES
    ALL_PARAMETER_AND_INITIAL_VALUES = _COPASI.CObjectLists_ALL_PARAMETER_AND_INITIAL_VALUES
    ALL_VARIABLES = _COPASI.CObjectLists_ALL_VARIABLES
    ALL_ODE_VARIABLES = _COPASI.CObjectLists_ALL_ODE_VARIABLES
    REDUCED_JACOBIAN_EV_RE = _COPASI.CObjectLists_REDUCED_JACOBIAN_EV_RE
    REDUCED_JACOBIAN_EV_IM = _COPASI.CObjectLists_REDUCED_JACOBIAN_EV_IM
    __swig_getmethods__["getListOfObjects"] = lambda x: _COPASI.CObjectLists_getListOfObjects
    __swig_getmethods__["getListOfConstObjects"] = lambda x: _COPASI.CObjectLists_getListOfConstObjects
    __swig_getmethods__["existsFixedMetab"] = lambda x: _COPASI.CObjectLists_existsFixedMetab
    def __init__(self): 
        this = _COPASI.new_CObjectLists()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _COPASI.delete_CObjectLists
    __del__ = lambda self : None;
CObjectLists_swigregister = _COPASI.CObjectLists_swigregister
CObjectLists_swigregister(CObjectLists)

def CObjectLists_getListOfObjects(*args):
  return _COPASI.CObjectLists_getListOfObjects(*args)
CObjectLists_getListOfObjects = _COPASI.CObjectLists_getListOfObjects

def CObjectLists_getListOfConstObjects(*args):
  return _COPASI.CObjectLists_getListOfConstObjects(*args)
CObjectLists_getListOfConstObjects = _COPASI.CObjectLists_getListOfConstObjects

def CObjectLists_existsFixedMetab(*args):
  return _COPASI.CObjectLists_existsFixedMetab(*args)
CObjectLists_existsFixedMetab = _COPASI.CObjectLists_existsFixedMetab

class CFunctionParameter(CCopasiContainer):
    __swig_setmethods__ = {}
    for _s in [CCopasiContainer]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CFunctionParameter, name, value)
    __swig_getmethods__ = {}
    for _s in [CCopasiContainer]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CFunctionParameter, name)
    __repr__ = _swig_repr
    SUBSTRATE = _COPASI.CFunctionParameter_SUBSTRATE
    PRODUCT = _COPASI.CFunctionParameter_PRODUCT
    MODIFIER = _COPASI.CFunctionParameter_MODIFIER
    PARAMETER = _COPASI.CFunctionParameter_PARAMETER
    VOLUME = _COPASI.CFunctionParameter_VOLUME
    TIME = _COPASI.CFunctionParameter_TIME
    VARIABLE = _COPASI.CFunctionParameter_VARIABLE
    TEMPORARY = _COPASI.CFunctionParameter_TEMPORARY
    __swig_getmethods__["xmlRole2Enum"] = lambda x: _COPASI.CFunctionParameter_xmlRole2Enum
    INT32 = _COPASI.CFunctionParameter_INT32
    FLOAT64 = _COPASI.CFunctionParameter_FLOAT64
    VINT32 = _COPASI.CFunctionParameter_VINT32
    VFLOAT64 = _COPASI.CFunctionParameter_VFLOAT64
    def __init__(self, *args): 
        this = _COPASI.new_CFunctionParameter(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _COPASI.delete_CFunctionParameter
    __del__ = lambda self : None;
    def cleanup(self): return _COPASI.CFunctionParameter_cleanup(self)
    def getKey(self): return _COPASI.CFunctionParameter_getKey(self)
    def getType(self): return _COPASI.CFunctionParameter_getType(self)
    def setType(self, *args): return _COPASI.CFunctionParameter_setType(self, *args)
    def getUsage(self): return _COPASI.CFunctionParameter_getUsage(self)
    def setUsage(self, *args): return _COPASI.CFunctionParameter_setUsage(self, *args)
    def setIsUsed(self, *args): return _COPASI.CFunctionParameter_setIsUsed(self, *args)
    def isUsed(self): return _COPASI.CFunctionParameter_isUsed(self)
CFunctionParameter_swigregister = _COPASI.CFunctionParameter_swigregister
CFunctionParameter_swigregister(CFunctionParameter)

def CFunctionParameter_xmlRole2Enum(*args):
  return _COPASI.CFunctionParameter_xmlRole2Enum(*args)
CFunctionParameter_xmlRole2Enum = _COPASI.CFunctionParameter_xmlRole2Enum

class CFunctionParameters(CCopasiContainer):
    __swig_setmethods__ = {}
    for _s in [CCopasiContainer]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CFunctionParameters, name, value)
    __swig_getmethods__ = {}
    for _s in [CCopasiContainer]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CFunctionParameters, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _COPASI.new_CFunctionParameters(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _COPASI.delete_CFunctionParameters
    __del__ = lambda self : None;
    def cleanup(self): return _COPASI.CFunctionParameters_cleanup(self)
    def addCopy(self, *args): return _COPASI.CFunctionParameters_addCopy(self, *args)
    def add(self, *args): return _COPASI.CFunctionParameters_add(self, *args)
    def remove(self, *args): return _COPASI.CFunctionParameters_remove(self, *args)
    def size(self): return _COPASI.CFunctionParameters_size(self)
    def swap(self, *args): return _COPASI.CFunctionParameters_swap(self, *args)
    def isVector(self, *args): return _COPASI.CFunctionParameters_isVector(self, *args)
    def getNumberOfParametersByUsage(self, *args): return _COPASI.CFunctionParameters_getNumberOfParametersByUsage(self, *args)
    def getParameterByUsage(self, *args): return _COPASI.CFunctionParameters_getParameterByUsage(self, *args)
    def findParameterByName(self, *args): return _COPASI.CFunctionParameters_findParameterByName(self, *args)
    def getParameter(self, *args): return _COPASI.CFunctionParameters_getParameter(self, *args)
CFunctionParameters_swigregister = _COPASI.CFunctionParameters_swigregister
CFunctionParameters_swigregister(CFunctionParameters)

class CFunctionParameterMap:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CFunctionParameterMap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CFunctionParameterMap, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _COPASI.new_CFunctionParameterMap(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _COPASI.delete_CFunctionParameterMap
    __del__ = lambda self : None;
    def setCallParameter(self, *args): return _COPASI.CFunctionParameterMap_setCallParameter(self, *args)
    def addCallParameter(self, *args): return _COPASI.CFunctionParameterMap_addCallParameter(self, *args)
    def clearCallParameter(self, *args): return _COPASI.CFunctionParameterMap_clearCallParameter(self, *args)
    def initializeFromFunctionParameters(self, *args): return _COPASI.CFunctionParameterMap_initializeFromFunctionParameters(self, *args)
    def getFunctionParameters(self): return _COPASI.CFunctionParameterMap_getFunctionParameters(self)
    def getPointers(self): return _COPASI.CFunctionParameterMap_getPointers(self)
    def findParameterbyName(self, *args): return _COPASI.CFunctionParameterMap_findParameterbyName(self, *args)
CFunctionParameterMap_swigregister = _COPASI.CFunctionParameterMap_swigregister
CFunctionParameterMap_swigregister(CFunctionParameterMap)

class PointerCallParameters:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PointerCallParameters, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PointerCallParameters, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _COPASI.new_PointerCallParameters(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _COPASI.delete_PointerCallParameters
    __del__ = lambda self : None;
    def resize(self, *args): return _COPASI.PointerCallParameters_resize(self, *args)
    def clear(self): return _COPASI.PointerCallParameters_clear(self)
    def size(self): return _COPASI.PointerCallParameters_size(self)
PointerCallParameters_swigregister = _COPASI.PointerCallParameters_swigregister
PointerCallParameters_swigregister(PointerCallParameters)

class ObjectCallParameters:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ObjectCallParameters, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ObjectCallParameters, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _COPASI.new_ObjectCallParameters(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _COPASI.delete_ObjectCallParameters
    __del__ = lambda self : None;
    def resize(self, *args): return _COPASI.ObjectCallParameters_resize(self, *args)
    def clear(self): return _COPASI.ObjectCallParameters_clear(self)
    def size(self): return _COPASI.ObjectCallParameters_size(self)
ObjectCallParameters_swigregister = _COPASI.ObjectCallParameters_swigregister
ObjectCallParameters_swigregister(ObjectCallParameters)

class CAnnotation:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CAnnotation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CAnnotation, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _COPASI.new_CAnnotation(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _COPASI.delete_CAnnotation
    __del__ = lambda self : None;
    def setMiriamAnnotation(self, *args): return _COPASI.CAnnotation_setMiriamAnnotation(self, *args)
    def getMiriamAnnotation(self): return _COPASI.CAnnotation_getMiriamAnnotation(self)
    def setNotes(self, *args): return _COPASI.CAnnotation_setNotes(self, *args)
    def getNotes(self): return _COPASI.CAnnotation_getNotes(self)
CAnnotation_swigregister = _COPASI.CAnnotation_swigregister
CAnnotation_swigregister(CAnnotation)

class CEvaluationTree(CCopasiContainer,CAnnotation):
    __swig_setmethods__ = {}
    for _s in [CCopasiContainer,CAnnotation]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CEvaluationTree, name, value)
    __swig_getmethods__ = {}
    for _s in [CCopasiContainer,CAnnotation]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CEvaluationTree, name)
    __repr__ = _swig_repr
    Function = _COPASI.CEvaluationTree_Function
    MassAction = _COPASI.CEvaluationTree_MassAction
    PreDefined = _COPASI.CEvaluationTree_PreDefined
    UserDefined = _COPASI.CEvaluationTree_UserDefined
    Expression = _COPASI.CEvaluationTree_Expression
    __swig_setmethods__["mSBMLId"] = _COPASI.CEvaluationTree_mSBMLId_set
    __swig_getmethods__["mSBMLId"] = _COPASI.CEvaluationTree_mSBMLId_get
    __swig_getmethods__["create"] = lambda x: _COPASI.CEvaluationTree_create
    __swig_getmethods__["copy"] = lambda x: _COPASI.CEvaluationTree_copy
    def __init__(self, *args): 
        this = _COPASI.new_CEvaluationTree(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _COPASI.delete_CEvaluationTree
    __del__ = lambda self : None;
    def getType(self): return _COPASI.CEvaluationTree_getType(self)
    def getKey(self): return _COPASI.CEvaluationTree_getKey(self)
    def setInfix(self, *args): return _COPASI.CEvaluationTree_setInfix(self, *args)
    def compile(self): return _COPASI.CEvaluationTree_compile(self)
    def isUsable(self): return _COPASI.CEvaluationTree_isUsable(self)
    def isBoolean(self): return _COPASI.CEvaluationTree_isBoolean(self)
    def getInfix(self): return _COPASI.CEvaluationTree_getInfix(self)
    def getVariableIndex(self, *args): return _COPASI.CEvaluationTree_getVariableIndex(self, *args)
    def getVariableValue(self, *args): return _COPASI.CEvaluationTree_getVariableValue(self, *args)
    def updateTree(self): return _COPASI.CEvaluationTree_updateTree(self)
    def setSBMLId(self, *args): return _COPASI.CEvaluationTree_setSBMLId(self, *args)
    def getSBMLId(self): return _COPASI.CEvaluationTree_getSBMLId(self)
    def hasCircularDependency(self): return _COPASI.CEvaluationTree_hasCircularDependency(self)
    def dependsOnTree(self, *args): return _COPASI.CEvaluationTree_dependsOnTree(self, *args)
    def getErrorLocation(self): return _COPASI.CEvaluationTree_getErrorLocation(self)
CEvaluationTree_swigregister = _COPASI.CEvaluationTree_swigregister
CEvaluationTree_swigregister(CEvaluationTree)

def CEvaluationTree_create(*args):
  return _COPASI.CEvaluationTree_create(*args)
CEvaluationTree_create = _COPASI.CEvaluationTree_create

def CEvaluationTree_copy(*args):
  return _COPASI.CEvaluationTree_copy(*args)
CEvaluationTree_copy = _COPASI.CEvaluationTree_copy

class CExpression(CEvaluationTree):
    __swig_setmethods__ = {}
    for _s in [CEvaluationTree]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CExpression, name, value)
    __swig_getmethods__ = {}
    for _s in [CEvaluationTree]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CExpression, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _COPASI.new_CExpression(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _COPASI.delete_CExpression
    __del__ = lambda self : None;
    __swig_getmethods__["createInitialExpression"] = lambda x: _COPASI.CExpression_createInitialExpression
    def setBooleanRequired(self, *args): return _COPASI.CExpression_setBooleanRequired(self, *args)
    def setInfix(self, *args): return _COPASI.CExpression_setInfix(self, *args)
    def compile(self, *args): return _COPASI.CExpression_compile(self, *args)
    def calcValue(self): return _COPASI.CExpression_calcValue(self)
    def refresh(self): return _COPASI.CExpression_refresh(self)
    def getNodeObject(self, *args): return _COPASI.CExpression_getNodeObject(self, *args)
    def getListOfContainer(self): return _COPASI.CExpression_getListOfContainer(self)
    def updateInfix(self): return _COPASI.CExpression_updateInfix(self)
    def getDisplayString(self): return _COPASI.CExpression_getDisplayString(self)
    def getDisplay_C_String(self): return _COPASI.CExpression_getDisplay_C_String(self)
    def getDisplay_MMD_String(self): return _COPASI.CExpression_getDisplay_MMD_String(self)
    def getDisplay_XPP_String(self): return _COPASI.CExpression_getDisplay_XPP_String(self)
    def writeMathML(self, *args): return _COPASI.CExpression_writeMathML(self, *args)
CExpression_swigregister = _COPASI.CExpression_swigregister
CExpression_swigregister(CExpression)

def CExpression_createInitialExpression(*args):
  return _COPASI.CExpression_createInitialExpression(*args)
CExpression_createInitialExpression = _COPASI.CExpression_createInitialExpression

class CFunction(CEvaluationTree):
    __swig_setmethods__ = {}
    for _s in [CEvaluationTree]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CFunction, name, value)
    __swig_getmethods__ = {}
    for _s in [CEvaluationTree]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CFunction, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _COPASI.new_CFunction(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _COPASI.delete_CFunction
    __del__ = lambda self : None;
    def setInfix(self, *args): return _COPASI.CFunction_setInfix(self, *args)
    def calcValue(self, *args): return _COPASI.CFunction_calcValue(self, *args)
    def getVariableIndex(self, *args): return _COPASI.CFunction_getVariableIndex(self, *args)
    def getVariableValue(self, *args): return _COPASI.CFunction_getVariableValue(self, *args)
    def setReversible(self, *args): return _COPASI.CFunction_setReversible(self, *args)
    def isReversible(self): return _COPASI.CFunction_isReversible(self)
    def getVariables(self, *args): return _COPASI.CFunction_getVariables(self, *args)
    def addVariable(self, *args): return _COPASI.CFunction_addVariable(self, *args)
    def isSuitable(self, *args): return _COPASI.CFunction_isSuitable(self, *args)
    __swig_getmethods__["completeFunctionList"] = lambda x: _COPASI.CFunction_completeFunctionList
    def createListOfParametersForMathML(self, *args): return _COPASI.CFunction_createListOfParametersForMathML(self, *args)
    def createCopy(self): return _COPASI.CFunction_createCopy(self)
CFunction_swigregister = _COPASI.CFunction_swigregister
CFunction_swigregister(CFunction)

def CFunction_completeFunctionList(*args):
  return _COPASI.CFunction_completeFunctionList(*args)
CFunction_completeFunctionList = _COPASI.CFunction_completeFunctionList

class CFunctionDB(CCopasiContainer):
    __swig_setmethods__ = {}
    for _s in [CCopasiContainer]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CFunctionDB, name, value)
    __swig_getmethods__ = {}
    for _s in [CCopasiContainer]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CFunctionDB, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _COPASI.new_CFunctionDB(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _COPASI.delete_CFunctionDB
    __del__ = lambda self : None;
    def cleanup(self): return _COPASI.CFunctionDB_cleanup(self)
    def initObjects(self): return _COPASI.CFunctionDB_initObjects(self)
    def load(self): return _COPASI.CFunctionDB_load(self)
    def setFilename(self, *args): return _COPASI.CFunctionDB_setFilename(self, *args)
    def getFilename(self): return _COPASI.CFunctionDB_getFilename(self)
    def addAndAdaptName(self, *args): return _COPASI.CFunctionDB_addAndAdaptName(self, *args)
    def removeFunction(self, *args): return _COPASI.CFunctionDB_removeFunction(self, *args)
    def findFunction(self, *args): return _COPASI.CFunctionDB_findFunction(self, *args)
    def findLoadFunction(self, *args): return _COPASI.CFunctionDB_findLoadFunction(self, *args)
    def loadedFunctions(self): return _COPASI.CFunctionDB_loadedFunctions(self)
    def suitableFunctions(self, *args): return _COPASI.CFunctionDB_suitableFunctions(self, *args)
    def getUsedFunctions(self, *args): return _COPASI.CFunctionDB_getUsedFunctions(self, *args)
    def createFunction(self, *args): return _COPASI.CFunctionDB_createFunction(self, *args)
    def addAndAdopt(self, *args): return _COPASI.CFunctionDB_addAndAdopt(self, *args)
    def add(self, *args): return _COPASI.CFunctionDB_add(self, *args)
CFunctionDB_swigregister = _COPASI.CFunctionDB_swigregister
CFunctionDB_swigregister(CFunctionDB)

class CCopasiParameter(CCopasiContainer):
    __swig_setmethods__ = {}
    for _s in [CCopasiContainer]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CCopasiParameter, name, value)
    __swig_getmethods__ = {}
    for _s in [CCopasiContainer]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CCopasiParameter, name)
    __repr__ = _swig_repr
    DOUBLE = _COPASI.CCopasiParameter_DOUBLE
    UDOUBLE = _COPASI.CCopasiParameter_UDOUBLE
    INT = _COPASI.CCopasiParameter_INT
    UINT = _COPASI.CCopasiParameter_UINT
    BOOL = _COPASI.CCopasiParameter_BOOL
    GROUP = _COPASI.CCopasiParameter_GROUP
    STRING = _COPASI.CCopasiParameter_STRING
    CN = _COPASI.CCopasiParameter_CN
    KEY = _COPASI.CCopasiParameter_KEY
    FILE = _COPASI.CCopasiParameter_FILE
    EXPRESSION = _COPASI.CCopasiParameter_EXPRESSION
    INVALID = _COPASI.CCopasiParameter_INVALID
    def __init__(self, *args): 
        this = _COPASI.new_CCopasiParameter(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _COPASI.delete_CCopasiParameter
    __del__ = lambda self : None;
    def getKey(self): return _COPASI.CCopasiParameter_getKey(self)
    def setValue(self, *args): return _COPASI.CCopasiParameter_setValue(self, *args)
    def getType(self): return _COPASI.CCopasiParameter_getType(self)
    def isValidValue(self, *args): return _COPASI.CCopasiParameter_isValidValue(self, *args)
    def getCN(self): return _COPASI.CCopasiParameter_getCN(self)
    def getObjectDisplayName(self, regular = True, richtext = False): return _COPASI.CCopasiParameter_getObjectDisplayName(self, regular, richtext)
    def getDblValue(self): return _COPASI.CCopasiParameter_getDblValue(self)
    def getUDblValue(self): return _COPASI.CCopasiParameter_getUDblValue(self)
    def getIntValue(self): return _COPASI.CCopasiParameter_getIntValue(self)
    def getUIntValue(self): return _COPASI.CCopasiParameter_getUIntValue(self)
    def getBoolValue(self): return _COPASI.CCopasiParameter_getBoolValue(self)
    def getGroupValue(self): return _COPASI.CCopasiParameter_getGroupValue(self)
    def getStringValue(self): return _COPASI.CCopasiParameter_getStringValue(self)
    def getCNValue(self): return _COPASI.CCopasiParameter_getCNValue(self)
    def getKeyValue(self): return _COPASI.CCopasiParameter_getKeyValue(self)
    def getFileValue(self): return _COPASI.CCopasiParameter_getFileValue(self)
    def setDblValue(self, *args): return _COPASI.CCopasiParameter_setDblValue(self, *args)
    def setUDblValue(self, *args): return _COPASI.CCopasiParameter_setUDblValue(self, *args)
    def setUIntValue(self, *args): return _COPASI.CCopasiParameter_setUIntValue(self, *args)
    def setIntValue(self, *args): return _COPASI.CCopasiParameter_setIntValue(self, *args)
    def setBoolValue(self, *args): return _COPASI.CCopasiParameter_setBoolValue(self, *args)
    def setGroupValue(self, *args): return _COPASI.CCopasiParameter_setGroupValue(self, *args)
    def setStringValue(self, *args): return _COPASI.CCopasiParameter_setStringValue(self, *args)
    def setCNValue(self, *args): return _COPASI.CCopasiParameter_setCNValue(self, *args)
    def setKeyValue(self, *args): return _COPASI.CCopasiParameter_setKeyValue(self, *args)
    def setFileValue(self, *args): return _COPASI.CCopasiParameter_setFileValue(self, *args)
    def setValue(self,arg):
      result=False
      if(type(arg)==types.IntType):
         if((self.getType()==self.INT) or (arg < 0)):
           result=self.setIntValue(arg)
         else:
           result=self.setUIntValue(arg) 
      elif(type(arg)==types.FloatType):
         result=self.setDblValue(arg) 
      elif(type(arg)==types.BooleanType):
         result=self.setBoolValue(arg) 
      elif(type(arg)==types.StringType):
         result=self.setStringValue(arg) 
      elif(arg.__class__==CRegisteredObjectName):
         result=self.setCNValue(arg) 
      elif(arg.__class__ == ParameterVector):
         result=self.setGroupValue(arg) 
      return result;

    def getValue(self):
      value=None
      if(self.getType()==CCopasiParameter.DOUBLE):
        value=self.getDblValue()
      if(self.getType()==CCopasiParameter.UDOUBLE):
        value=self.getUDblValue()
      if(self.getType()==CCopasiParameter.INT):
        value=self.getIntValue()
      if(self.getType()==CCopasiParameter.UINT):
        value=self.getUIntValue()
      if(self.getType()==CCopasiParameter.BOOL):
        value=self.getBoolValue()
      if(self.getType()==CCopasiParameter.GROUP):
        value=self.getGroupValue()
      if(self.getType()==CCopasiParameter.STRING):
        value=self.getStringValue()
      if(self.getType()==CCopasiParameter.KEY):
        value=self.getKeyValue()
      if(self.getType()==CCopasiParameter.FILE):
        value=self.getFileValue()
      if(self.getType()==CCopasiParameter.CN):
        value=self.getCNValue()
      return value            

CCopasiParameter_swigregister = _COPASI.CCopasiParameter_swigregister
CCopasiParameter_swigregister(CCopasiParameter)

class CCopasiParameterGroup(CCopasiParameter):
    __swig_setmethods__ = {}
    for _s in [CCopasiParameter]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CCopasiParameterGroup, name, value)
    __swig_getmethods__ = {}
    for _s in [CCopasiParameter]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CCopasiParameterGroup, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _COPASI.new_CCopasiParameterGroup(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _COPASI.delete_CCopasiParameterGroup
    __del__ = lambda self : None;
    def getObject(self, *args): return _COPASI.CCopasiParameterGroup_getObject(self, *args)
    def elevateChildren(self): return _COPASI.CCopasiParameterGroup_elevateChildren(self)
    def addParameterCopy(self, *args): return _COPASI.CCopasiParameterGroup_addParameterCopy(self, *args)
    def addGroup(self, *args): return _COPASI.CCopasiParameterGroup_addGroup(self, *args)
    def assertGroup(self, *args): return _COPASI.CCopasiParameterGroup_assertGroup(self, *args)
    def removeParameter(self, *args): return _COPASI.CCopasiParameterGroup_removeParameter(self, *args)
    def getParameter(self, *args): return _COPASI.CCopasiParameterGroup_getParameter(self, *args)
    def getGroup(self, *args): return _COPASI.CCopasiParameterGroup_getGroup(self, *args)
    def getType(self, *args): return _COPASI.CCopasiParameterGroup_getType(self, *args)
    def getKeyForParameter(self, *args): return _COPASI.CCopasiParameterGroup_getKeyForParameter(self, *args)
    def getName(self, *args): return _COPASI.CCopasiParameterGroup_getName(self, *args)
    def size(self): return _COPASI.CCopasiParameterGroup_size(self)
    def clear(self): return _COPASI.CCopasiParameterGroup_clear(self)
    def getIndex(self, *args): return _COPASI.CCopasiParameterGroup_getIndex(self, *args)
    def getUniqueParameterName(self, *args): return _COPASI.CCopasiParameterGroup_getUniqueParameterName(self, *args)
    def addParameter(self, *args): return _COPASI.CCopasiParameterGroup_addParameter(self, *args)
CCopasiParameterGroup_swigregister = _COPASI.CCopasiParameterGroup_swigregister
CCopasiParameterGroup_swigregister(CCopasiParameterGroup)

class CCopasiStaticString(CCopasiObject):
    __swig_setmethods__ = {}
    for _s in [CCopasiObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CCopasiStaticString, name, value)
    __swig_getmethods__ = {}
    for _s in [CCopasiObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CCopasiStaticString, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _COPASI.new_CCopasiStaticString(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _COPASI.delete_CCopasiStaticString
    __del__ = lambda self : None;
    def getObjectDisplayName(self, regular = True, richtext = False): return _COPASI.CCopasiStaticString_getObjectDisplayName(self, regular, richtext)
    def getStaticString(self): return _COPASI.CCopasiStaticString_getStaticString(self)
CCopasiStaticString_swigregister = _COPASI.CCopasiStaticString_swigregister
CCopasiStaticString_swigregister(CCopasiStaticString)

class CCopasiReportSeparator(CCopasiStaticString):
    __swig_setmethods__ = {}
    for _s in [CCopasiStaticString]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CCopasiReportSeparator, name, value)
    __swig_getmethods__ = {}
    for _s in [CCopasiStaticString]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CCopasiReportSeparator, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _COPASI.new_CCopasiReportSeparator(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _COPASI.delete_CCopasiReportSeparator
    __del__ = lambda self : None;
    def getObjectDisplayName(self, regular = True, richtext = False): return _COPASI.CCopasiReportSeparator_getObjectDisplayName(self, regular, richtext)
CCopasiReportSeparator_swigregister = _COPASI.CCopasiReportSeparator_swigregister
CCopasiReportSeparator_swigregister(CCopasiReportSeparator)

class CMoiety(CCopasiContainer):
    __swig_setmethods__ = {}
    for _s in [CCopasiContainer]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CMoiety, name, value)
    __swig_getmethods__ = {}
    for _s in [CCopasiContainer]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CMoiety, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _COPASI.new_CMoiety(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _COPASI.delete_CMoiety
    __del__ = lambda self : None;
    def add(self, *args): return _COPASI.CMoiety_add(self, *args)
    def cleanup(self): return _COPASI.CMoiety_cleanup(self)
    def refreshInitialValue(self): return _COPASI.CMoiety_refreshInitialValue(self)
    def getInitialValueReference(self): return _COPASI.CMoiety_getInitialValueReference(self)
    def refreshValue(self): return _COPASI.CMoiety_refreshValue(self)
    def getValueReference(self): return _COPASI.CMoiety_getValueReference(self)
    def getDescription(self, *args): return _COPASI.CMoiety_getDescription(self, *args)
    def dependentNumber(self): return _COPASI.CMoiety_dependentNumber(self)
    def getDependentNumber(self): return _COPASI.CMoiety_getDependentNumber(self)
    def getDependentNumberReference(self): return _COPASI.CMoiety_getDependentNumberReference(self)
    def getNumber(self): return _COPASI.CMoiety_getNumber(self)
    def getKey(self): return _COPASI.CMoiety_getKey(self)
    def setObjectParent(self, *args): return _COPASI.CMoiety_setObjectParent(self, *args)
    def refreshDependentNumber(self): return _COPASI.CMoiety_refreshDependentNumber(self)
    def getExpression(self): return _COPASI.CMoiety_getExpression(self)
    def getAmount(self): return _COPASI.CMoiety_getAmount(self)
    def refreshAmount(self): return _COPASI.CMoiety_refreshAmount(self)
CMoiety_swigregister = _COPASI.CMoiety_swigregister
CMoiety_swigregister(CMoiety)

class CModelEntity(CCopasiContainer,CAnnotation):
    __swig_setmethods__ = {}
    for _s in [CCopasiContainer,CAnnotation]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CModelEntity, name, value)
    __swig_getmethods__ = {}
    for _s in [CCopasiContainer,CAnnotation]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CModelEntity, name)
    __repr__ = _swig_repr
    FIXED = _COPASI.CModelEntity_FIXED
    ASSIGNMENT = _COPASI.CModelEntity_ASSIGNMENT
    REACTIONS = _COPASI.CModelEntity_REACTIONS
    ODE = _COPASI.CModelEntity_ODE
    TIME = _COPASI.CModelEntity_TIME
    def __init__(self, *args): 
        this = _COPASI.new_CModelEntity(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _COPASI.delete_CModelEntity
    __del__ = lambda self : None;
    def getKey(self): return _COPASI.CModelEntity_getKey(self)
    def getStatus(self): return _COPASI.CModelEntity_getStatus(self)
    def compile(self): return _COPASI.CModelEntity_compile(self)
    def calculate(self): return _COPASI.CModelEntity_calculate(self)
    def isFixed(self): return _COPASI.CModelEntity_isFixed(self)
    def getValue(self): return _COPASI.CModelEntity_getValue(self)
    def getInitialValue(self): return _COPASI.CModelEntity_getInitialValue(self)
    def refreshInitialValue(self): return _COPASI.CModelEntity_refreshInitialValue(self)
    def getRate(self): return _COPASI.CModelEntity_getRate(self)
    def setStatus(self, *args): return _COPASI.CModelEntity_setStatus(self, *args)
    def setValue(self, *args): return _COPASI.CModelEntity_setValue(self, *args)
    def setInitialValue(self, *args): return _COPASI.CModelEntity_setInitialValue(self, *args)
    def setRate(self, *args): return _COPASI.CModelEntity_setRate(self, *args)
    def getValueObject(self): return _COPASI.CModelEntity_getValueObject(self)
    def setObjectParent(self, *args): return _COPASI.CModelEntity_setObjectParent(self, *args)
    def setSBMLId(self, *args): return _COPASI.CModelEntity_setSBMLId(self, *args)
    def getSBMLId(self): return _COPASI.CModelEntity_getSBMLId(self)
    def setExpressionPtr(self, *args):
        val = _COPASI.CModelEntity_setExpressionPtr(self, *args)
        if(len(args) > 0 and args[0] != None and isinstance(args[0], COPASI.CExpression)):
          args[0].__disown__()


        return val

    def getExpressionPtr(self): return _COPASI.CModelEntity_getExpressionPtr(self)
    def setInitialExpressionPtr(self, *args):
        val = _COPASI.CModelEntity_setInitialExpressionPtr(self, *args)
        if(len(args) > 0 and args[0] != None and isinstance(args[0], COPASI.CExpression)):
          args[0].__disown__()


        return val

    def getInitialExpressionPtr(self): return _COPASI.CModelEntity_getInitialExpressionPtr(self)
    def setExpression(self, *args): return _COPASI.CModelEntity_setExpression(self, *args)
    def getExpression(self): return _COPASI.CModelEntity_getExpression(self)
    def setInitialExpression(self, *args): return _COPASI.CModelEntity_setInitialExpression(self, *args)
    def getInitialExpression(self): return _COPASI.CModelEntity_getInitialExpression(self)
    def setUsed(self, *args): return _COPASI.CModelEntity_setUsed(self, *args)
    def isUsed(self): return _COPASI.CModelEntity_isUsed(self)
    def getInitialValueReference(self): return _COPASI.CModelEntity_getInitialValueReference(self)
    def getValueReference(self): return _COPASI.CModelEntity_getValueReference(self)
    def getRateReference(self): return _COPASI.CModelEntity_getRateReference(self)
CModelEntity_swigregister = _COPASI.CModelEntity_swigregister
CModelEntity_swigregister(CModelEntity)

class CModelValue(CModelEntity):
    __swig_setmethods__ = {}
    for _s in [CModelEntity]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CModelValue, name, value)
    __swig_getmethods__ = {}
    for _s in [CModelEntity]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CModelValue, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _COPASI.new_CModelValue(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _COPASI.delete_CModelValue
    __del__ = lambda self : None;
CModelValue_swigregister = _COPASI.CModelValue_swigregister
CModelValue_swigregister(CModelValue)

class CMetab(CModelEntity):
    __swig_setmethods__ = {}
    for _s in [CModelEntity]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CMetab, name, value)
    __swig_getmethods__ = {}
    for _s in [CModelEntity]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CMetab, name)
    __repr__ = _swig_repr
    __swig_getmethods__["convertToNumber"] = lambda x: _COPASI.CMetab_convertToNumber
    __swig_getmethods__["convertToConcentration"] = lambda x: _COPASI.CMetab_convertToConcentration
    def __init__(self, *args): 
        this = _COPASI.new_CMetab(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _COPASI.delete_CMetab
    __del__ = lambda self : None;
    def getChildObjectUnits(self, *args): return _COPASI.CMetab_getChildObjectUnits(self, *args)
    def getValueObject(self): return _COPASI.CMetab_getValueObject(self)
    def getObjectDisplayName(self, regular = True, richtext = False): return _COPASI.CMetab_getObjectDisplayName(self, regular, richtext)
    def cleanup(self): return _COPASI.CMetab_cleanup(self)
    def initCompartment(self, pCompartment = None): return _COPASI.CMetab_initCompartment(self, pCompartment)
    def setObjectParent(self, *args): return _COPASI.CMetab_setObjectParent(self, *args)
    def setStatus(self, *args): return _COPASI.CMetab_setStatus(self, *args)
    def compile(self): return _COPASI.CMetab_compile(self)
    def compileInitialValueDependencies(self, *args): return _COPASI.CMetab_compileInitialValueDependencies(self, *args)
    def isInitialConcentrationChangeAllowed(self): return _COPASI.CMetab_isInitialConcentrationChangeAllowed(self)
    def calculate(self): return _COPASI.CMetab_calculate(self)
    def setConcentration(self, *args): return _COPASI.CMetab_setConcentration(self, *args)
    def getConcentration(self): return _COPASI.CMetab_getConcentration(self)
    def setInitialConcentration(self, *args): return _COPASI.CMetab_setInitialConcentration(self, *args)
    def getInitialConcentration(self): return _COPASI.CMetab_getInitialConcentration(self)
    def getInitialConcentrationReference(self): return _COPASI.CMetab_getInitialConcentrationReference(self)
    def getConcentrationReference(self): return _COPASI.CMetab_getConcentrationReference(self)
    def refreshInitialValue(self): return _COPASI.CMetab_refreshInitialValue(self)
    def refreshInitialConcentration(self): return _COPASI.CMetab_refreshInitialConcentration(self)
    def refreshConcentration(self): return _COPASI.CMetab_refreshConcentration(self)
    def refreshNumber(self): return _COPASI.CMetab_refreshNumber(self)
    def getCompartment(self): return _COPASI.CMetab_getCompartment(self)
    def getModel(self): return _COPASI.CMetab_getModel(self)
    def setTransitionTime(self, *args): return _COPASI.CMetab_setTransitionTime(self, *args)
    def getTransitionTime(self): return _COPASI.CMetab_getTransitionTime(self)
    def getConcentrationRate(self): return _COPASI.CMetab_getConcentrationRate(self)
    def refreshConcentrationRate(self): return _COPASI.CMetab_refreshConcentrationRate(self)
    def refreshRate(self): return _COPASI.CMetab_refreshRate(self)
    def refreshTransitionTime(self): return _COPASI.CMetab_refreshTransitionTime(self)
    def setDependentOn(self, *args): return _COPASI.CMetab_setDependentOn(self, *args)
    def isDependent(self): return _COPASI.CMetab_isDependent(self)
CMetab_swigregister = _COPASI.CMetab_swigregister
CMetab_swigregister(CMetab)

def CMetab_convertToNumber(*args):
  return _COPASI.CMetab_convertToNumber(*args)
CMetab_convertToNumber = _COPASI.CMetab_convertToNumber

def CMetab_convertToConcentration(*args):
  return _COPASI.CMetab_convertToConcentration(*args)
CMetab_convertToConcentration = _COPASI.CMetab_convertToConcentration

class CMetabOld(CCopasiContainer):
    __swig_setmethods__ = {}
    for _s in [CCopasiContainer]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CMetabOld, name, value)
    __swig_getmethods__ = {}
    for _s in [CCopasiContainer]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CMetabOld, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _COPASI.new_CMetabOld(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _COPASI.delete_CMetabOld
    __del__ = lambda self : None;
    def cleanup(self): return _COPASI.CMetabOld_cleanup(self)
    def getIndex(self): return _COPASI.CMetabOld_getIndex(self)
CMetabOld_swigregister = _COPASI.CMetabOld_swigregister
CMetabOld_swigregister(CMetabOld)

class CConcentrationReference(FloatReference):
    __swig_setmethods__ = {}
    for _s in [FloatReference]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CConcentrationReference, name, value)
    __swig_getmethods__ = {}
    for _s in [FloatReference]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CConcentrationReference, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _COPASI.delete_CConcentrationReference
    __del__ = lambda self : None;
CConcentrationReference_swigregister = _COPASI.CConcentrationReference_swigregister
CConcentrationReference_swigregister(CConcentrationReference)

class CParticleReference(FloatReference):
    __swig_setmethods__ = {}
    for _s in [FloatReference]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CParticleReference, name, value)
    __swig_getmethods__ = {}
    for _s in [FloatReference]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CParticleReference, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _COPASI.delete_CParticleReference
    __del__ = lambda self : None;
CParticleReference_swigregister = _COPASI.CParticleReference_swigregister
CParticleReference_swigregister(CParticleReference)

class CCompartment(CModelEntity):
    __swig_setmethods__ = {}
    for _s in [CModelEntity]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CCompartment, name, value)
    __swig_getmethods__ = {}
    for _s in [CModelEntity]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CCompartment, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _COPASI.new_CCompartment(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _COPASI.delete_CCompartment
    __del__ = lambda self : None;
    def getChildObjectUnits(self, *args): return _COPASI.CCompartment_getChildObjectUnits(self, *args)
    def cleanup(self): return _COPASI.CCompartment_cleanup(self)
    def getMetabolites(self, *args): return _COPASI.CCompartment_getMetabolites(self, *args)
    def createMetabolite(self, *args): return _COPASI.CCompartment_createMetabolite(self, *args)
    def addMetabolite(self, *args): return _COPASI.CCompartment_addMetabolite(self, *args)
    def setDimensionality(self, *args): return _COPASI.CCompartment_setDimensionality(self, *args)
    def getDimensionality(self): return _COPASI.CCompartment_getDimensionality(self)
    def removeMetabolite(self, *args): return _COPASI.CCompartment_removeMetabolite(self, *args)
CCompartment_swigregister = _COPASI.CCompartment_swigregister
CCompartment_swigregister(CCompartment)

class FloatMatrix:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FloatMatrix, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FloatMatrix, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _COPASI.new_FloatMatrix(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _COPASI.delete_FloatMatrix
    __del__ = lambda self : None;
    def size(self): return _COPASI.FloatMatrix_size(self)
    def numRows(self): return _COPASI.FloatMatrix_numRows(self)
    def numCols(self): return _COPASI.FloatMatrix_numCols(self)
    def resize(self, *args): return _COPASI.FloatMatrix_resize(self, *args)
    def __call__(self, *args): return _COPASI.FloatMatrix___call__(self, *args)
    def array(self, *args): return _COPASI.FloatMatrix_array(self, *args)
    def applyPivot(self, *args): return _COPASI.FloatMatrix_applyPivot(self, *args)
    def get(self, *args): return _COPASI.FloatMatrix_get(self, *args)
FloatMatrix_swigregister = _COPASI.FloatMatrix_swigregister
FloatMatrix_swigregister(FloatMatrix)

class CStateTemplate:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CStateTemplate, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CStateTemplate, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _COPASI.new_CStateTemplate(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _COPASI.delete_CStateTemplate
    __del__ = lambda self : None;
    def add(self, *args): return _COPASI.CStateTemplate_add(self, *args)
    def remove(self, *args): return _COPASI.CStateTemplate_remove(self, *args)
    def getIndex(self, *args): return _COPASI.CStateTemplate_getIndex(self, *args)
    def getUserOrder(self): return _COPASI.CStateTemplate_getUserOrder(self)
    def getNumIndependent(self): return _COPASI.CStateTemplate_getNumIndependent(self)
    def getNumDependent(self): return _COPASI.CStateTemplate_getNumDependent(self)
    def getNumVariable(self): return _COPASI.CStateTemplate_getNumVariable(self)
    def getNumFixed(self): return _COPASI.CStateTemplate_getNumFixed(self)
    def size(self): return _COPASI.CStateTemplate_size(self)
    def getEntity(self, *args): return _COPASI.CStateTemplate_getEntity(self, *args)
    def getIndependent(self, *args): return _COPASI.CStateTemplate_getIndependent(self, *args)
    def getDependent(self, *args): return _COPASI.CStateTemplate_getDependent(self, *args)
    def getFixed(self, *args): return _COPASI.CStateTemplate_getFixed(self, *args)
CStateTemplate_swigregister = _COPASI.CStateTemplate_swigregister
CStateTemplate_swigregister(CStateTemplate)

class CState:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CState, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CState, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _COPASI.new_CState(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _COPASI.delete_CState
    __del__ = lambda self : None;
    def getTime(self): return _COPASI.CState_getTime(self)
    def setTime(self, *args): return _COPASI.CState_setTime(self, *args)
    def getNumIndependent(self): return _COPASI.CState_getNumIndependent(self)
    def getNumDependent(self): return _COPASI.CState_getNumDependent(self)
    def getNumVariable(self): return _COPASI.CState_getNumVariable(self)
    def getNumFixed(self): return _COPASI.CState_getNumFixed(self)
    def isValid(self): return _COPASI.CState_isValid(self)
    def getIndependent(self, *args): return _COPASI.CState_getIndependent(self, *args)
    def getDependent(self, *args): return _COPASI.CState_getDependent(self, *args)
    def getFixed(self, *args): return _COPASI.CState_getFixed(self, *args)
CState_swigregister = _COPASI.CState_swigregister
CState_swigregister(CState)

class CChemEqElement(CCopasiContainer):
    __swig_setmethods__ = {}
    for _s in [CCopasiContainer]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CChemEqElement, name, value)
    __swig_getmethods__ = {}
    for _s in [CCopasiContainer]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CChemEqElement, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _COPASI.new_CChemEqElement(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _COPASI.delete_CChemEqElement
    __del__ = lambda self : None;
    def cleanup(self): return _COPASI.CChemEqElement_cleanup(self)
    def setMultiplicity(self, *args): return _COPASI.CChemEqElement_setMultiplicity(self, *args)
    def addToMultiplicity(self, multiplicity = 1.0): return _COPASI.CChemEqElement_addToMultiplicity(self, multiplicity)
    def getMultiplicity(self): return _COPASI.CChemEqElement_getMultiplicity(self)
    def setMetabolite(self, *args): return _COPASI.CChemEqElement_setMetabolite(self, *args)
    def getMetabolite(self): return _COPASI.CChemEqElement_getMetabolite(self)
    def getMetaboliteKey(self): return _COPASI.CChemEqElement_getMetaboliteKey(self)
CChemEqElement_swigregister = _COPASI.CChemEqElement_swigregister
CChemEqElement_swigregister(CChemEqElement)

class CChemEq(CCopasiContainer):
    __swig_setmethods__ = {}
    for _s in [CCopasiContainer]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CChemEq, name, value)
    __swig_getmethods__ = {}
    for _s in [CCopasiContainer]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CChemEq, name)
    __repr__ = _swig_repr
    PRODUCT = _COPASI.CChemEq_PRODUCT
    SUBSTRATE = _COPASI.CChemEq_SUBSTRATE
    MODIFIER = _COPASI.CChemEq_MODIFIER
    NOROLE = _COPASI.CChemEq_NOROLE
    def __init__(self, *args): 
        this = _COPASI.new_CChemEq(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _COPASI.delete_CChemEq
    __del__ = lambda self : None;
    def cleanup(self): return _COPASI.CChemEq_cleanup(self)
    def setReversibility(self, *args): return _COPASI.CChemEq_setReversibility(self, *args)
    def getReversibility(self): return _COPASI.CChemEq_getReversibility(self)
    def addMetabolite(self, *args): return _COPASI.CChemEq_addMetabolite(self, *args)
    def getSubstrates(self): return _COPASI.CChemEq_getSubstrates(self)
    def getProducts(self): return _COPASI.CChemEq_getProducts(self)
    def getModifiers(self): return _COPASI.CChemEq_getModifiers(self)
    def getBalances(self): return _COPASI.CChemEq_getBalances(self)
    def getCompartmentNumber(self): return _COPASI.CChemEq_getCompartmentNumber(self)
    def getLargestCompartment(self): return _COPASI.CChemEq_getLargestCompartment(self)
    def getMolecularity(self, *args): return _COPASI.CChemEq_getMolecularity(self, *args)
    def setMultiplicity(self, *args): return _COPASI.CChemEq_setMultiplicity(self, *args)
    def getSubstrate(self, *args): return _COPASI.CChemEq_getSubstrate(self, *args)
    def getProduct(self, *args): return _COPASI.CChemEq_getProduct(self, *args)
    def getModifier(self, *args): return _COPASI.CChemEq_getModifier(self, *args)
    def getBalance(self, *args): return _COPASI.CChemEq_getBalance(self, *args)
CChemEq_swigregister = _COPASI.CChemEq_swigregister
CChemEq_swigregister(CChemEq)

class CReaction(CCopasiContainer,CAnnotation):
    __swig_setmethods__ = {}
    for _s in [CCopasiContainer,CAnnotation]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CReaction, name, value)
    __swig_getmethods__ = {}
    for _s in [CCopasiContainer,CAnnotation]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CReaction, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _COPASI.new_CReaction(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _COPASI.delete_CReaction
    __del__ = lambda self : None;
    def getChildObjectUnits(self, *args): return _COPASI.CReaction_getChildObjectUnits(self, *args)
    def cleanup(self): return _COPASI.CReaction_cleanup(self)
    def getObjectDisplayName(self, regular = True, richtext = False): return _COPASI.CReaction_getObjectDisplayName(self, regular, richtext)
    def setObjectParent(self, *args): return _COPASI.CReaction_setObjectParent(self, *args)
    def getKey(self): return _COPASI.CReaction_getKey(self)
    def getChemEq(self, *args): return _COPASI.CReaction_getChemEq(self, *args)
    def getFunction(self): return _COPASI.CReaction_getFunction(self)
    def getFlux(self): return _COPASI.CReaction_getFlux(self)
    def getParticleFlux(self): return _COPASI.CReaction_getParticleFlux(self)
    def isReversible(self): return _COPASI.CReaction_isReversible(self)
    def addSubstrate(self, *args): return _COPASI.CReaction_addSubstrate(self, *args)
    def addProduct(self, *args): return _COPASI.CReaction_addProduct(self, *args)
    def addModifier(self, *args): return _COPASI.CReaction_addModifier(self, *args)
    def setFunction(self, *args): return _COPASI.CReaction_setFunction(self, *args)
    def setParameterValue(self, *args): return _COPASI.CReaction_setParameterValue(self, *args)
    def getParameterValue(self, *args): return _COPASI.CReaction_getParameterValue(self, *args)
    def setParameterMapping(self, *args): return _COPASI.CReaction_setParameterMapping(self, *args)
    def addParameterMapping(self, *args): return _COPASI.CReaction_addParameterMapping(self, *args)
    def setParameterMappingVector(self, *args): return _COPASI.CReaction_setParameterMappingVector(self, *args)
    def clearParameterMapping(self, *args): return _COPASI.CReaction_clearParameterMapping(self, *args)
    def getParameterMappings(self): return _COPASI.CReaction_getParameterMappings(self)
    def getParameterMapping(self, *args): return _COPASI.CReaction_getParameterMapping(self, *args)
    def getParameters(self, *args): return _COPASI.CReaction_getParameters(self, *args)
    def isLocalParameter(self, *args): return _COPASI.CReaction_isLocalParameter(self, *args)
    def getObject(self, *args): return _COPASI.CReaction_getObject(self, *args)
    def getFunctionParameters(self): return _COPASI.CReaction_getFunctionParameters(self)
    def setReversible(self, *args): return _COPASI.CReaction_setReversible(self, *args)
    def compile(self): return _COPASI.CReaction_compile(self)
    def calculateFlux(self): return _COPASI.CReaction_calculateFlux(self)
    def calculateParticleFlux(self): return _COPASI.CReaction_calculateParticleFlux(self)
    def getParticleFluxReference(self): return _COPASI.CReaction_getParticleFluxReference(self)
    def getCompartmentNumber(self): return _COPASI.CReaction_getCompartmentNumber(self)
    def getLargestCompartment(self): return _COPASI.CReaction_getLargestCompartment(self)
    def setSBMLId(self, *args): return _COPASI.CReaction_setSBMLId(self, *args)
    def getSBMLId(self): return _COPASI.CReaction_getSBMLId(self)
    def printDebug(self): return _COPASI.CReaction_printDebug(self)
CReaction_swigregister = _COPASI.CReaction_swigregister
CReaction_swigregister(CReaction)

class ObjectStdVector:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ObjectStdVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ObjectStdVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _COPASI.ObjectStdVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _COPASI.ObjectStdVector___nonzero__(self)
    def __bool__(self): return _COPASI.ObjectStdVector___bool__(self)
    def __len__(self): return _COPASI.ObjectStdVector___len__(self)
    def pop(self): return _COPASI.ObjectStdVector_pop(self)
    def __getslice__(self, *args): return _COPASI.ObjectStdVector___getslice__(self, *args)
    def __setslice__(self, *args): return _COPASI.ObjectStdVector___setslice__(self, *args)
    def __delslice__(self, *args): return _COPASI.ObjectStdVector___delslice__(self, *args)
    def __delitem__(self, *args): return _COPASI.ObjectStdVector___delitem__(self, *args)
    def __getitem__(self, *args): return _COPASI.ObjectStdVector___getitem__(self, *args)
    def __setitem__(self, *args): return _COPASI.ObjectStdVector___setitem__(self, *args)
    def append(self, *args): return _COPASI.ObjectStdVector_append(self, *args)
    def empty(self): return _COPASI.ObjectStdVector_empty(self)
    def size(self): return _COPASI.ObjectStdVector_size(self)
    def clear(self): return _COPASI.ObjectStdVector_clear(self)
    def swap(self, *args): return _COPASI.ObjectStdVector_swap(self, *args)
    def get_allocator(self): return _COPASI.ObjectStdVector_get_allocator(self)
    def begin(self): return _COPASI.ObjectStdVector_begin(self)
    def end(self): return _COPASI.ObjectStdVector_end(self)
    def rbegin(self): return _COPASI.ObjectStdVector_rbegin(self)
    def rend(self): return _COPASI.ObjectStdVector_rend(self)
    def pop_back(self): return _COPASI.ObjectStdVector_pop_back(self)
    def erase(self, *args): return _COPASI.ObjectStdVector_erase(self, *args)
    def __init__(self, *args): 
        this = _COPASI.new_ObjectStdVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _COPASI.ObjectStdVector_push_back(self, *args)
    def front(self): return _COPASI.ObjectStdVector_front(self)
    def back(self): return _COPASI.ObjectStdVector_back(self)
    def assign(self, *args): return _COPASI.ObjectStdVector_assign(self, *args)
    def resize(self, *args): return _COPASI.ObjectStdVector_resize(self, *args)
    def insert(self, *args): return _COPASI.ObjectStdVector_insert(self, *args)
    def reserve(self, *args): return _COPASI.ObjectStdVector_reserve(self, *args)
    def capacity(self): return _COPASI.ObjectStdVector_capacity(self)
    __swig_destroy__ = _COPASI.delete_ObjectStdVector
    __del__ = lambda self : None;
ObjectStdVector_swigregister = _COPASI.ObjectStdVector_swigregister
ObjectStdVector_swigregister(ObjectStdVector)

class CModel(CModelEntity):
    __swig_setmethods__ = {}
    for _s in [CModelEntity]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CModel, name, value)
    __swig_getmethods__ = {}
    for _s in [CModelEntity]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CModel, name)
    __repr__ = _swig_repr
    dimensionlessVolume = _COPASI.CModel_dimensionlessVolume
    m3 = _COPASI.CModel_m3
    l = _COPASI.CModel_l
    ml = _COPASI.CModel_ml
    microl = _COPASI.CModel_microl
    nl = _COPASI.CModel_nl
    pl = _COPASI.CModel_pl
    fl = _COPASI.CModel_fl
    dimensionlessArea = _COPASI.CModel_dimensionlessArea
    m2 = _COPASI.CModel_m2
    dm2 = _COPASI.CModel_dm2
    cm2 = _COPASI.CModel_cm2
    mm2 = _COPASI.CModel_mm2
    microm2 = _COPASI.CModel_microm2
    nm2 = _COPASI.CModel_nm2
    pm2 = _COPASI.CModel_pm2
    fm2 = _COPASI.CModel_fm2
    dimensionlessLength = _COPASI.CModel_dimensionlessLength
    m = _COPASI.CModel_m
    dm = _COPASI.CModel_dm
    cm = _COPASI.CModel_cm
    mm = _COPASI.CModel_mm
    microm = _COPASI.CModel_microm
    nm = _COPASI.CModel_nm
    pm = _COPASI.CModel_pm
    fm = _COPASI.CModel_fm
    dimensionlessTime = _COPASI.CModel_dimensionlessTime
    d = _COPASI.CModel_d
    h = _COPASI.CModel_h
    min = _COPASI.CModel_min
    s = _COPASI.CModel_s
    ms = _COPASI.CModel_ms
    micros = _COPASI.CModel_micros
    ns = _COPASI.CModel_ns
    ps = _COPASI.CModel_ps
    fs = _COPASI.CModel_fs
    OldMinute = _COPASI.CModel_OldMinute
    dimensionlessQuantity = _COPASI.CModel_dimensionlessQuantity
    Mol = _COPASI.CModel_Mol
    mMol = _COPASI.CModel_mMol
    microMol = _COPASI.CModel_microMol
    nMol = _COPASI.CModel_nMol
    pMol = _COPASI.CModel_pMol
    fMol = _COPASI.CModel_fMol
    number = _COPASI.CModel_number
    OldXML = _COPASI.CModel_OldXML
    deterministic = _COPASI.CModel_deterministic
    stochastic = _COPASI.CModel_stochastic
    def __init__(self, *args): 
        this = _COPASI.new_CModel(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _COPASI.delete_CModel
    __del__ = lambda self : None;
    def getChildObjectUnits(self, *args): return _COPASI.CModel_getChildObjectUnits(self, *args)
    def cleanup(self): return _COPASI.CModel_cleanup(self)
    def convert2NonReversible(self): return _COPASI.CModel_convert2NonReversible(self)
    def initializeMetabolites(self): return _COPASI.CModel_initializeMetabolites(self)
    def setCompileFlag(self, flag = True): return _COPASI.CModel_setCompileFlag(self, flag)
    def compileDefaultMetabInitialValueDependencies(self): return _COPASI.CModel_compileDefaultMetabInitialValueDependencies(self)
    def buildStoi(self): return _COPASI.CModel_buildStoi(self)
    def buildLinkZero(self): return _COPASI.CModel_buildLinkZero(self)
    def buildRedStoi(self): return _COPASI.CModel_buildRedStoi(self)
    def buildMoieties(self): return _COPASI.CModel_buildMoieties(self)
    def getMetabolites(self): return _COPASI.CModel_getMetabolites(self)
    def getMetabolitesX(self): return _COPASI.CModel_getMetabolitesX(self)
    def getNumMetabs(self): return _COPASI.CModel_getNumMetabs(self)
    def getNumVariableMetabs(self): return _COPASI.CModel_getNumVariableMetabs(self)
    def getNumODEMetabs(self): return _COPASI.CModel_getNumODEMetabs(self)
    def getNumAssignmentMetabs(self): return _COPASI.CModel_getNumAssignmentMetabs(self)
    def getNumIndependentReactionMetabs(self): return _COPASI.CModel_getNumIndependentReactionMetabs(self)
    def getNumDependentReactionMetabs(self): return _COPASI.CModel_getNumDependentReactionMetabs(self)
    def getModelValues(self): return _COPASI.CModel_getModelValues(self)
    def getNumModelValues(self): return _COPASI.CModel_getNumModelValues(self)
    def getReactions(self): return _COPASI.CModel_getReactions(self)
    def getTotSteps(self): return _COPASI.CModel_getTotSteps(self)
    def getParticleFlux(self): return _COPASI.CModel_getParticleFlux(self)
    def getEvents(self): return _COPASI.CModel_getEvents(self)
    def getKey(self): return _COPASI.CModel_getKey(self)
    def setTitle(self, *args): return _COPASI.CModel_setTitle(self, *args)
    def setInitialTime(self, *args): return _COPASI.CModel_setInitialTime(self, *args)
    def getInitialTime(self): return _COPASI.CModel_getInitialTime(self)
    def setTime(self, *args): return _COPASI.CModel_setTime(self, *args)
    def getTime(self): return _COPASI.CModel_getTime(self)
    def getCompartments(self): return _COPASI.CModel_getCompartments(self)
    def getStoi(self): return _COPASI.CModel_getStoi(self)
    def getRedStoi(self): return _COPASI.CModel_getRedStoi(self)
    def getStoiReordered(self): return _COPASI.CModel_getStoiReordered(self)
    def getMoieties(self): return _COPASI.CModel_getMoieties(self)
    def findMetabByName(self, *args): return _COPASI.CModel_findMetabByName(self, *args)
    def findMoiety(self, *args): return _COPASI.CModel_findMoiety(self, *args)
    def getL0(self): return _COPASI.CModel_getL0(self)
    def applyInitialValues(self): return _COPASI.CModel_applyInitialValues(self)
    def getInitialState(self): return _COPASI.CModel_getInitialState(self)
    def getState(self): return _COPASI.CModel_getState(self)
    def setInitialState(self, *args): return _COPASI.CModel_setInitialState(self, *args)
    def setState(self, *args): return _COPASI.CModel_setState(self, *args)
    def updateSimulatedValues(self, *args): return _COPASI.CModel_updateSimulatedValues(self, *args)
    def updateNonSimulatedValues(self): return _COPASI.CModel_updateNonSimulatedValues(self)
    def calculateJacobian(self, *args): return _COPASI.CModel_calculateJacobian(self, *args)
    def calculateJacobianX(self, *args): return _COPASI.CModel_calculateJacobianX(self, *args)
    def calculateDivergence(self): return _COPASI.CModel_calculateDivergence(self)
    def setVolumeUnit(self, *args): return _COPASI.CModel_setVolumeUnit(self, *args)
    def getVolumeUnitName(self): return _COPASI.CModel_getVolumeUnitName(self)
    def getVolumeUnitEnum(self): return _COPASI.CModel_getVolumeUnitEnum(self)
    def setAreaUnit(self, *args): return _COPASI.CModel_setAreaUnit(self, *args)
    def getAreaUnitName(self): return _COPASI.CModel_getAreaUnitName(self)
    def getAreaUnitEnum(self): return _COPASI.CModel_getAreaUnitEnum(self)
    def setLengthUnit(self, *args): return _COPASI.CModel_setLengthUnit(self, *args)
    def getLengthUnitName(self): return _COPASI.CModel_getLengthUnitName(self)
    def getLengthUnitEnum(self): return _COPASI.CModel_getLengthUnitEnum(self)
    def setTimeUnit(self, *args): return _COPASI.CModel_setTimeUnit(self, *args)
    def getTimeUnitName(self): return _COPASI.CModel_getTimeUnitName(self)
    def getTimeUnitEnum(self): return _COPASI.CModel_getTimeUnitEnum(self)
    def setQuantityUnit(self, *args): return _COPASI.CModel_setQuantityUnit(self, *args)
    def getQuantityUnitName(self): return _COPASI.CModel_getQuantityUnitName(self)
    def getQuantityUnitOldXMLName(self): return _COPASI.CModel_getQuantityUnitOldXMLName(self)
    def getQuantityUnitEnum(self): return _COPASI.CModel_getQuantityUnitEnum(self)
    def setModelType(self, *args): return _COPASI.CModel_setModelType(self, *args)
    def getModelType(self): return _COPASI.CModel_getModelType(self)
    def setAvogadro(self, *args): return _COPASI.CModel_setAvogadro(self, *args)
    def getAvogadro(self): return _COPASI.CModel_getAvogadro(self)
    def getQuantity2NumberFactor(self): return _COPASI.CModel_getQuantity2NumberFactor(self)
    def getNumber2QuantityFactor(self): return _COPASI.CModel_getNumber2QuantityFactor(self)
    def createMetabolite(self, *args): return _COPASI.CModel_createMetabolite(self, *args)
    def removeMetabolite(self, *args): return _COPASI.CModel_removeMetabolite(self, *args)
    def createCompartment(self, *args): return _COPASI.CModel_createCompartment(self, *args)
    def removeCompartment(self, *args): return _COPASI.CModel_removeCompartment(self, *args)
    def createReaction(self, *args): return _COPASI.CModel_createReaction(self, *args)
    def removeReaction(self, *args): return _COPASI.CModel_removeReaction(self, *args)
    def removeLocalReactionParameter(self, *args): return _COPASI.CModel_removeLocalReactionParameter(self, *args)
    def createEvent(self, *args): return _COPASI.CModel_createEvent(self, *args)
    def removeEvent(self, *args): return _COPASI.CModel_removeEvent(self, *args)
    def synchronizeEventOrder(self, *args): return _COPASI.CModel_synchronizeEventOrder(self, *args)
    def createModelValue(self, *args): return _COPASI.CModel_createModelValue(self, *args)
    def removeModelValue(self, *args): return _COPASI.CModel_removeModelValue(self, *args)
    def getMetabolitePermutation(self): return _COPASI.CModel_getMetabolitePermutation(self)
    def getStateTemplate(self): return _COPASI.CModel_getStateTemplate(self)
    def hasReversibleReaction(self): return _COPASI.CModel_hasReversibleReaction(self)
    def suitableForStochasticSimulation(self): return _COPASI.CModel_suitableForStochasticSimulation(self)
    def isAutonomous(self): return _COPASI.CModel_isAutonomous(self)
    def initializeAtolVector(self, *args): return _COPASI.CModel_initializeAtolVector(self, *args)
    def printParameterOverview(self): return _COPASI.CModel_printParameterOverview(self)
    def getTimeUnitsDisplayString(self): return _COPASI.CModel_getTimeUnitsDisplayString(self)
    def getFrequencyUnitsDisplayString(self): return _COPASI.CModel_getFrequencyUnitsDisplayString(self)
    def getVolumeUnitsDisplayString(self): return _COPASI.CModel_getVolumeUnitsDisplayString(self)
    def getVolumeRateUnitsDisplayString(self): return _COPASI.CModel_getVolumeRateUnitsDisplayString(self)
    def getConcentrationUnitsDisplayString(self): return _COPASI.CModel_getConcentrationUnitsDisplayString(self)
    def getConcentrationRateUnitsDisplayString(self): return _COPASI.CModel_getConcentrationRateUnitsDisplayString(self)
    def getQuantityUnitsDisplayString(self): return _COPASI.CModel_getQuantityUnitsDisplayString(self)
    def getQuantityRateUnitsDisplayString(self): return _COPASI.CModel_getQuantityRateUnitsDisplayString(self)
    def evaluateRoots(self, *args): return _COPASI.CModel_evaluateRoots(self, *args)
    def getProcessQueueExecutionTime(self): return _COPASI.CModel_getProcessQueueExecutionTime(self)
    def getNumRoots(self): return _COPASI.CModel_getNumRoots(self)
    def calculateRootDerivatives(self, *args): return _COPASI.CModel_calculateRootDerivatives(self, *args)
    def getNumCompartments(self): return _COPASI.CModel_getNumCompartments(self)
    def getNumReactions(self): return _COPASI.CModel_getNumReactions(self)
    def getReaction(self, *args): return _COPASI.CModel_getReaction(self, *args)
    def getCompartment(self, *args): return _COPASI.CModel_getCompartment(self, *args)
    def getMetabolite(self, *args): return _COPASI.CModel_getMetabolite(self, *args)
    def getMoiety(self, *args): return _COPASI.CModel_getMoiety(self, *args)
    def forceCompile(self): return _COPASI.CModel_forceCompile(self)
    def compileIfNecessary(self): return _COPASI.CModel_compileIfNecessary(self)
    def updateInitialValues(self, *args): return _COPASI.CModel_updateInitialValues(self, *args)
    def getModelValue(self, *args): return _COPASI.CModel_getModelValue(self, *args)
    def getNumIndependentMetabs(self): return _COPASI.CModel_getNumIndependentMetabs(self)
    def getNumDependentMetabs(self): return _COPASI.CModel_getNumDependentMetabs(self)
    def setComments(self, *args): return _COPASI.CModel_setComments(self, *args)
    def getComments(self): return _COPASI.CModel_getComments(self)
CModel_swigregister = _COPASI.CModel_swigregister
CModel_swigregister(CModel)

class CVersion:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CVersion, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CVersion, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _COPASI.new_CVersion()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _COPASI.delete_CVersion
    __del__ = lambda self : None;
    def getVersionMajor(self): return _COPASI.CVersion_getVersionMajor(self)
    def getVersionMinor(self): return _COPASI.CVersion_getVersionMinor(self)
    def getVersionDevel(self): return _COPASI.CVersion_getVersionDevel(self)
    def getVersion(self): return _COPASI.CVersion_getVersion(self)
    def setVersion(self, *args): return _COPASI.CVersion_setVersion(self, *args)
CVersion_swigregister = _COPASI.CVersion_swigregister
CVersion_swigregister(CVersion)
CVersion.VERSION = _COPASI.cvar.CVersion_VERSION

class CCopasiMethod(CCopasiParameterGroup):
    __swig_setmethods__ = {}
    for _s in [CCopasiParameterGroup]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CCopasiMethod, name, value)
    __swig_getmethods__ = {}
    for _s in [CCopasiParameterGroup]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CCopasiMethod, name)
    __repr__ = _swig_repr
    unset = _COPASI.CCopasiMethod_unset
    RandomSearch = _COPASI.CCopasiMethod_RandomSearch
    RandomSearchMaster = _COPASI.CCopasiMethod_RandomSearchMaster
    SimulatedAnnealing = _COPASI.CCopasiMethod_SimulatedAnnealing
    GeneticAlgorithm = _COPASI.CCopasiMethod_GeneticAlgorithm
    EvolutionaryProgram = _COPASI.CCopasiMethod_EvolutionaryProgram
    SteepestDescent = _COPASI.CCopasiMethod_SteepestDescent
    HybridGASA = _COPASI.CCopasiMethod_HybridGASA
    GeneticAlgorithmSR = _COPASI.CCopasiMethod_GeneticAlgorithmSR
    HookeJeeves = _COPASI.CCopasiMethod_HookeJeeves
    LevenbergMarquardt = _COPASI.CCopasiMethod_LevenbergMarquardt
    NelderMead = _COPASI.CCopasiMethod_NelderMead
    SRES = _COPASI.CCopasiMethod_SRES
    Statistics = _COPASI.CCopasiMethod_Statistics
    ParticleSwarm = _COPASI.CCopasiMethod_ParticleSwarm
    Praxis = _COPASI.CCopasiMethod_Praxis
    TruncatedNewton = _COPASI.CCopasiMethod_TruncatedNewton
    Newton = _COPASI.CCopasiMethod_Newton
    deterministic = _COPASI.CCopasiMethod_deterministic
    LSODAR = _COPASI.CCopasiMethod_LSODAR
    directMethod = _COPASI.CCopasiMethod_directMethod
    stochastic = _COPASI.CCopasiMethod_stochastic
    tauLeap = _COPASI.CCopasiMethod_tauLeap
    adaptiveSA = _COPASI.CCopasiMethod_adaptiveSA
    hybrid = _COPASI.CCopasiMethod_hybrid
    hybridLSODA = _COPASI.CCopasiMethod_hybridLSODA
    DsaLsodar = _COPASI.CCopasiMethod_DsaLsodar
    tssILDM = _COPASI.CCopasiMethod_tssILDM
    tssILDMModified = _COPASI.CCopasiMethod_tssILDMModified
    tssCSP = _COPASI.CCopasiMethod_tssCSP
    mcaMethodReder = _COPASI.CCopasiMethod_mcaMethodReder
    scanMethod = _COPASI.CCopasiMethod_scanMethod
    lyapWolf = _COPASI.CCopasiMethod_lyapWolf
    sensMethod = _COPASI.CCopasiMethod_sensMethod
    EFMAlgorithm = _COPASI.CCopasiMethod_EFMAlgorithm
    EFMBitPatternTreeAlgorithm = _COPASI.CCopasiMethod_EFMBitPatternTreeAlgorithm
    EFMBitPatternAlgorithm = _COPASI.CCopasiMethod_EFMBitPatternAlgorithm
    Householder = _COPASI.CCopasiMethod_Householder
    crossSectionMethod = _COPASI.CCopasiMethod_crossSectionMethod
    def __init__(self, *args): 
        this = _COPASI.new_CCopasiMethod(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _COPASI.delete_CCopasiMethod
    __del__ = lambda self : None;
    def getType(self): return _COPASI.CCopasiMethod_getType(self)
    def getSubType(self): return _COPASI.CCopasiMethod_getSubType(self)
    def isValidProblem(self, *args): return _COPASI.CCopasiMethod_isValidProblem(self, *args)
    __swig_getmethods__["getSubTypeName"] = lambda x: _COPASI.CCopasiMethod_getSubTypeName
    __swig_getmethods__["TypeNameToEnum"] = lambda x: _COPASI.CCopasiMethod_TypeNameToEnum
CCopasiMethod_swigregister = _COPASI.CCopasiMethod_swigregister
CCopasiMethod_swigregister(CCopasiMethod)

def CCopasiMethod_getSubTypeName(*args):
  return _COPASI.CCopasiMethod_getSubTypeName(*args)
CCopasiMethod_getSubTypeName = _COPASI.CCopasiMethod_getSubTypeName

def CCopasiMethod_TypeNameToEnum(*args):
  return _COPASI.CCopasiMethod_TypeNameToEnum(*args)
CCopasiMethod_TypeNameToEnum = _COPASI.CCopasiMethod_TypeNameToEnum

class CCopasiProblem(CCopasiParameterGroup):
    __swig_setmethods__ = {}
    for _s in [CCopasiParameterGroup]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CCopasiProblem, name, value)
    __swig_getmethods__ = {}
    for _s in [CCopasiParameterGroup]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CCopasiProblem, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _COPASI.new_CCopasiProblem(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _COPASI.delete_CCopasiProblem
    __del__ = lambda self : None;
    def getType(self): return _COPASI.CCopasiProblem_getType(self)
    def setModel(self, *args): return _COPASI.CCopasiProblem_setModel(self, *args)
    def getModel(self): return _COPASI.CCopasiProblem_getModel(self)
CCopasiProblem_swigregister = _COPASI.CCopasiProblem_swigregister
CCopasiProblem_swigregister(CCopasiProblem)

class COutputInterface:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, COutputInterface, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, COutputInterface, name)
    __repr__ = _swig_repr
    BEFORE = _COPASI.COutputInterface_BEFORE
    DURING = _COPASI.COutputInterface_DURING
    AFTER = _COPASI.COutputInterface_AFTER
    def __init__(self, *args): 
        this = _COPASI.new_COutputInterface(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _COPASI.delete_COutputInterface
    __del__ = lambda self : None;
    def compile(self, *args): return _COPASI.COutputInterface_compile(self, *args)
    def output(self, *args): return _COPASI.COutputInterface_output(self, *args)
    def separate(self, *args): return _COPASI.COutputInterface_separate(self, *args)
    def finish(self): return _COPASI.COutputInterface_finish(self)
COutputInterface_swigregister = _COPASI.COutputInterface_swigregister
COutputInterface_swigregister(COutputInterface)

class COutputHandler(COutputInterface):
    __swig_setmethods__ = {}
    for _s in [COutputInterface]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, COutputHandler, name, value)
    __swig_getmethods__ = {}
    for _s in [COutputInterface]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, COutputHandler, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _COPASI.new_COutputHandler(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _COPASI.delete_COutputHandler
    __del__ = lambda self : None;
    def compile(self, *args): return _COPASI.COutputHandler_compile(self, *args)
    def output(self, *args): return _COPASI.COutputHandler_output(self, *args)
    def separate(self, *args): return _COPASI.COutputHandler_separate(self, *args)
    def finish(self): return _COPASI.COutputHandler_finish(self)
    def addInterface(self, *args): return _COPASI.COutputHandler_addInterface(self, *args)
    def removeInterface(self, *args): return _COPASI.COutputHandler_removeInterface(self, *args)
    def setMaster(self, *args): return _COPASI.COutputHandler_setMaster(self, *args)
    def isMaster(self): return _COPASI.COutputHandler_isMaster(self)
    def getInterfaces(self): return _COPASI.COutputHandler_getInterfaces(self)
COutputHandler_swigregister = _COPASI.COutputHandler_swigregister
COutputHandler_swigregister(COutputHandler)

class CReport(COutputInterface):
    __swig_setmethods__ = {}
    for _s in [COutputInterface]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CReport, name, value)
    __swig_getmethods__ = {}
    for _s in [COutputInterface]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CReport, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _COPASI.new_CReport(*args)
        try: self.this.append(this)
        except: self.this = this
    def cleanup(self): return _COPASI.CReport_cleanup(self)
    __swig_destroy__ = _COPASI.delete_CReport
    __del__ = lambda self : None;
    def compile(self, *args): return _COPASI.CReport_compile(self, *args)
    def output(self, *args): return _COPASI.CReport_output(self, *args)
    def separate(self, *args): return _COPASI.CReport_separate(self, *args)
    def finish(self): return _COPASI.CReport_finish(self)
    def getReportDefinition(self): return _COPASI.CReport_getReportDefinition(self)
    def setReportDefinition(self, *args): return _COPASI.CReport_setReportDefinition(self, *args)
    def getTarget(self): return _COPASI.CReport_getTarget(self)
    def setTarget(self, *args): return _COPASI.CReport_setTarget(self, *args)
    def append(self): return _COPASI.CReport_append(self)
    def setAppend(self, *args): return _COPASI.CReport_setAppend(self, *args)
CReport_swigregister = _COPASI.CReport_swigregister
CReport_swigregister(CReport)

class CCopasiTask(CCopasiContainer):
    __swig_setmethods__ = {}
    for _s in [CCopasiContainer]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CCopasiTask, name, value)
    __swig_getmethods__ = {}
    for _s in [CCopasiContainer]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CCopasiTask, name)
    __repr__ = _swig_repr
    steadyState = _COPASI.CCopasiTask_steadyState
    timeCourse = _COPASI.CCopasiTask_timeCourse
    scan = _COPASI.CCopasiTask_scan
    fluxMode = _COPASI.CCopasiTask_fluxMode
    optimization = _COPASI.CCopasiTask_optimization
    parameterFitting = _COPASI.CCopasiTask_parameterFitting
    mca = _COPASI.CCopasiTask_mca
    lyap = _COPASI.CCopasiTask_lyap
    tssAnalysis = _COPASI.CCopasiTask_tssAnalysis
    sens = _COPASI.CCopasiTask_sens
    moieties = _COPASI.CCopasiTask_moieties
    crosssection = _COPASI.CCopasiTask_crosssection
    unset = _COPASI.CCopasiTask_unset
    INITIALIZE = _COPASI.CCopasiTask_INITIALIZE
    STREAM = _COPASI.CCopasiTask_STREAM
    FINISH = _COPASI.CCopasiTask_FINISH
    REPORT = _COPASI.CCopasiTask_REPORT
    PLOT = _COPASI.CCopasiTask_PLOT
    TIME_SERIES = _COPASI.CCopasiTask_TIME_SERIES
    NO_OUTPUT = _COPASI.CCopasiTask_NO_OUTPUT
    OUTPUT_BEFORE = _COPASI.CCopasiTask_OUTPUT_BEFORE
    OUTPUT_AFTER = _COPASI.CCopasiTask_OUTPUT_AFTER
    OUTPUT = _COPASI.CCopasiTask_OUTPUT
    OUTPUT_SE = _COPASI.CCopasiTask_OUTPUT_SE
    OUTPUT_UI = _COPASI.CCopasiTask_OUTPUT_UI
    ONLY_TIME_SERIES = _COPASI.CCopasiTask_ONLY_TIME_SERIES
    def __init__(self, *args): 
        this = _COPASI.new_CCopasiTask(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _COPASI.delete_CCopasiTask
    __del__ = lambda self : None;
    def getType(self): return _COPASI.CCopasiTask_getType(self)
    def setType(self, *args): return _COPASI.CCopasiTask_setType(self, *args)
    def getKey(self): return _COPASI.CCopasiTask_getKey(self)
    def setScheduled(self, *args): return _COPASI.CCopasiTask_setScheduled(self, *args)
    def isScheduled(self): return _COPASI.CCopasiTask_isScheduled(self)
    def setUpdateModel(self, *args): return _COPASI.CCopasiTask_setUpdateModel(self, *args)
    def isUpdateModel(self): return _COPASI.CCopasiTask_isUpdateModel(self)
    def updateMatrices(self): return _COPASI.CCopasiTask_updateMatrices(self)
    def restore(self): return _COPASI.CCopasiTask_restore(self)
    def getProblem(self, *args): return _COPASI.CCopasiTask_getProblem(self, *args)
    def setMethodType(self, *args): return _COPASI.CCopasiTask_setMethodType(self, *args)
    def createMethod(self, *args): return _COPASI.CCopasiTask_createMethod(self, *args)
    def getMethod(self, *args): return _COPASI.CCopasiTask_getMethod(self, *args)
    def getReport(self): return _COPASI.CCopasiTask_getReport(self)
    def cleanup(self): return _COPASI.CCopasiTask_cleanup(self)
    def getSliders(self): return _COPASI.CCopasiTask_getSliders(self)
    def output(self, *args): return _COPASI.CCopasiTask_output(self, *args)
    def separate(self, *args): return _COPASI.CCopasiTask_separate(self, *args)
    def getOutputMode(self): return _COPASI.CCopasiTask_getOutputMode(self)
    def getOutputHandler(self): return _COPASI.CCopasiTask_getOutputHandler(self)
    def getValidMethods(self): return _COPASI.CCopasiTask_getValidMethods(self)
    def process(self, *args): return _COPASI.CCopasiTask_process(self, *args)
CCopasiTask_swigregister = _COPASI.CCopasiTask_swigregister
CCopasiTask_swigregister(CCopasiTask)

class CReportDefinition(CCopasiObject):
    __swig_setmethods__ = {}
    for _s in [CCopasiObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CReportDefinition, name, value)
    __swig_getmethods__ = {}
    for _s in [CCopasiObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CReportDefinition, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _COPASI.new_CReportDefinition(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _COPASI.delete_CReportDefinition
    __del__ = lambda self : None;
    def cleanup(self): return _COPASI.CReportDefinition_cleanup(self)
    def preCompileTable(self, *args): return _COPASI.CReportDefinition_preCompileTable(self, *args)
    def getComment(self): return _COPASI.CReportDefinition_getComment(self)
    def setComment(self, *args): return _COPASI.CReportDefinition_setComment(self, *args)
    def getBodyAddr(self): return _COPASI.CReportDefinition_getBodyAddr(self)
    def getHeaderAddr(self): return _COPASI.CReportDefinition_getHeaderAddr(self)
    def getFooterAddr(self): return _COPASI.CReportDefinition_getFooterAddr(self)
    def getTableAddr(self): return _COPASI.CReportDefinition_getTableAddr(self)
    def setTaskType(self, *args): return _COPASI.CReportDefinition_setTaskType(self, *args)
    def getTaskType(self): return _COPASI.CReportDefinition_getTaskType(self)
    def setSeparator(self, *args): return _COPASI.CReportDefinition_setSeparator(self, *args)
    def getSeparator(self): return _COPASI.CReportDefinition_getSeparator(self)
    def getTitle(self): return _COPASI.CReportDefinition_getTitle(self)
    def setTitle(self, *args): return _COPASI.CReportDefinition_setTitle(self, *args)
    def isTable(self): return _COPASI.CReportDefinition_isTable(self)
    def setIsTable(self, *args): return _COPASI.CReportDefinition_setIsTable(self, *args)
    def setPrecision(self, *args): return _COPASI.CReportDefinition_setPrecision(self, *args)
    def getPrecision(self): return _COPASI.CReportDefinition_getPrecision(self)
    def getKey(self): return _COPASI.CReportDefinition_getKey(self)
CReportDefinition_swigregister = _COPASI.CReportDefinition_swigregister
CReportDefinition_swigregister(CReportDefinition)

class CReportDefinitionVector(ReportDefinitionVectorN):
    __swig_setmethods__ = {}
    for _s in [ReportDefinitionVectorN]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CReportDefinitionVector, name, value)
    __swig_getmethods__ = {}
    for _s in [ReportDefinitionVectorN]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CReportDefinitionVector, name)
    __repr__ = _swig_repr
    def __init__(self, name = "ReportDefinitions", pParent = None): 
        this = _COPASI.new_CReportDefinitionVector(name, pParent)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _COPASI.delete_CReportDefinitionVector
    __del__ = lambda self : None;
    def createReportDefinition(self, *args): return _COPASI.CReportDefinitionVector_createReportDefinition(self, *args)
    def removeReportDefinition(self, *args): return _COPASI.CReportDefinitionVector_removeReportDefinition(self, *args)
    def cleanup(self): return _COPASI.CReportDefinitionVector_cleanup(self)
    def getKey(self): return _COPASI.CReportDefinitionVector_getKey(self)
CReportDefinitionVector_swigregister = _COPASI.CReportDefinitionVector_swigregister
CReportDefinitionVector_swigregister(CReportDefinitionVector)

class CCopasiDataModel(CCopasiContainer,COutputHandler):
    __swig_setmethods__ = {}
    for _s in [CCopasiContainer,COutputHandler]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CCopasiDataModel, name, value)
    __swig_getmethods__ = {}
    for _s in [CCopasiContainer,COutputHandler]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CCopasiDataModel, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _COPASI.new_CCopasiDataModel(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _COPASI.delete_CCopasiDataModel
    __del__ = lambda self : None;
    def importSBMLFromString(self, *args): return _COPASI.CCopasiDataModel_importSBMLFromString(self, *args)
    def importSBML(self, *args): return _COPASI.CCopasiDataModel_importSBML(self, *args)
    def exportSBML(self, *args): return _COPASI.CCopasiDataModel_exportSBML(self, *args)
    def deleteOldData(self): return _COPASI.CCopasiDataModel_deleteOldData(self)
    def getModel(self): return _COPASI.CCopasiDataModel_getModel(self)
    def getTaskList(self): return _COPASI.CCopasiDataModel_getTaskList(self)
    def addTask(self, *args): return _COPASI.CCopasiDataModel_addTask(self, *args)
    def addDefaultTasks(self): return _COPASI.CCopasiDataModel_addDefaultTasks(self)
    def appendDependentTasks(self, *args): return _COPASI.CCopasiDataModel_appendDependentTasks(self, *args)
    def getReportDefinitionList(self): return _COPASI.CCopasiDataModel_getReportDefinitionList(self)
    def addDefaultReports(self): return _COPASI.CCopasiDataModel_addDefaultReports(self)
    def getListOfLayouts(self): return _COPASI.CCopasiDataModel_getListOfLayouts(self)
    def removeLayout(self, *args): return _COPASI.CCopasiDataModel_removeLayout(self, *args)
    def getFileName(self): return _COPASI.CCopasiDataModel_getFileName(self)
    def getSBMLFileName(self): return _COPASI.CCopasiDataModel_getSBMLFileName(self)
    def ObjectFromName(self, *args): return _COPASI.CCopasiDataModel_ObjectFromName(self, *args)
    def loadModel(self, *args): return _COPASI.CCopasiDataModel_loadModel(self, *args)
    def saveModel(self, *args): return _COPASI.CCopasiDataModel_saveModel(self, *args)
    def exportSBMLToString(self, *args): return _COPASI.CCopasiDataModel_exportSBMLToString(self, *args)
    def newModel(self): return _COPASI.CCopasiDataModel_newModel(self)
    def getReportDefinition(self, *args): return _COPASI.CCopasiDataModel_getReportDefinition(self, *args)
    def getTask(self, *args): return _COPASI.CCopasiDataModel_getTask(self, *args)
CCopasiDataModel_swigregister = _COPASI.CCopasiDataModel_swigregister
CCopasiDataModel_swigregister(CCopasiDataModel)

class CTimeSeries(COutputInterface):
    __swig_setmethods__ = {}
    for _s in [COutputInterface]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CTimeSeries, name, value)
    __swig_getmethods__ = {}
    for _s in [COutputInterface]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CTimeSeries, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _COPASI.new_CTimeSeries(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _COPASI.delete_CTimeSeries
    __del__ = lambda self : None;
    def compile(self, *args): return _COPASI.CTimeSeries_compile(self, *args)
    def output(self, *args): return _COPASI.CTimeSeries_output(self, *args)
    def separate(self, *args): return _COPASI.CTimeSeries_separate(self, *args)
    def finish(self): return _COPASI.CTimeSeries_finish(self)
    def allocate(self, *args): return _COPASI.CTimeSeries_allocate(self, *args)
    def clear(self): return _COPASI.CTimeSeries_clear(self)
    def save(self, *args): return _COPASI.CTimeSeries_save(self, *args)
    def getRecordedSteps(self): return _COPASI.CTimeSeries_getRecordedSteps(self)
    def getNumVariables(self): return _COPASI.CTimeSeries_getNumVariables(self)
    def getData(self, *args): return _COPASI.CTimeSeries_getData(self, *args)
    def getConcentrationData(self, *args): return _COPASI.CTimeSeries_getConcentrationData(self, *args)
    def getTitle(self, *args): return _COPASI.CTimeSeries_getTitle(self, *args)
    def getKey(self, *args): return _COPASI.CTimeSeries_getKey(self, *args)
    def getSBMLId(self, *args): return _COPASI.CTimeSeries_getSBMLId(self, *args)
    def getTitles(self):
      """Returns the titles of the variables in the time series
      as a python list.
      If the time series contains no variables, an empty list is returned.
      """
      result=[]
      x=self.getNumVariables();
      for index in range(0,x):
          result.append(self.getTitle(index))
      return result;

    def getDataForIndex(self,index):
      """Returns the complete time course particle number data for the variable with the given index.
      The index has to be an integer type, otherwise an AttributeError is raised.

      If the given index is invalid, None is returned.
      """
      if type(index) != types.IntType:
          raise AttributeError("index argument to getConcentrationDataForIndex must be an int")
      result=None
      x=self.getNumVariables()
      if (index >= 0) and (index < x):
        result=[]
        y=self.getRecordedSteps()
        for step in range(0,y):
          result.append(self.getData(step,index))
      return result;

    def getConcentrationDataForIndex(self,index):
      """Returns the complete time course concentration data for the variable with the given index.
      The index has to be an integer type, otherwise an AttributeError is raised.

      If the given index is invalid, None is returned.
      """
      if type(index) != types.IntType:
          raise AttributeError("index argument to getConcentrationDataForIndex must be an int")
      result=None
      x=self.getNumVariables()
      if (index >= 0) and (index < x):
        result=[]
        y=self.getRecordedSteps()
        for step in range(0,y):
          result.append(self.getConcentrationData(step,index))
      return result;

    def getDataForObject(self,object):
      """Returns the complete time course particle number data for the variable corresponding to the given object.
      The key of the object must match the key of one of the variables of the time course as returned by the getKey method.

      If no fitting key is found, None is returned.

      The object argument must be an instance of CCopasiObject, otherwise an AttributeError is raised. 
      """
      if not isinstance(object,CCopasiObject):
          raise AttributeError("object argument to getConcentrationDataForObject must be an instance of CCopasiObject")
      result=None
      x=self.getNumVariables()
      for v in range(0,x):
          if self.getKey(v) == object.getKey():
              break
      if v != x:
          result=self.getDataForIndex(v)
      return result;

    def getConcentrationDataForObject(self,object):
      """Returns the complete time course concentration data for the variable corresponding to the given object.
      The key of the object must match the key of one of the variables of the time course as returned by the getKey method.

      If no fitting key is found, None is returned.
      
      The object argument must be an instance of CCopasiObject, otherwise an AttributeError is raised. 
      """
      if not isinstance(object,CCopasiObject):
          raise AttributeError("object argument to getConcentrationDataForObject must be an instance of CCopasiObject")
      result=None
      x=self.getNumVariables()
      for v in range(0,x):
          if self.getKey(v) == object.getKey():
              break
      if v != x:
          result=self.getConcentrationDataForIndex(v)
      return result;


CTimeSeries_swigregister = _COPASI.CTimeSeries_swigregister
CTimeSeries_swigregister(CTimeSeries)

class CTrajectoryProblem(CCopasiProblem):
    __swig_setmethods__ = {}
    for _s in [CCopasiProblem]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CTrajectoryProblem, name, value)
    __swig_getmethods__ = {}
    for _s in [CCopasiProblem]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CTrajectoryProblem, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _COPASI.new_CTrajectoryProblem(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _COPASI.delete_CTrajectoryProblem
    __del__ = lambda self : None;
    def elevateChildren(self): return _COPASI.CTrajectoryProblem_elevateChildren(self)
    def setStepNumber(self, *args): return _COPASI.CTrajectoryProblem_setStepNumber(self, *args)
    def getStepNumber(self): return _COPASI.CTrajectoryProblem_getStepNumber(self)
    def setStepSize(self, *args): return _COPASI.CTrajectoryProblem_setStepSize(self, *args)
    def getStepSize(self): return _COPASI.CTrajectoryProblem_getStepSize(self)
    def setDuration(self, *args): return _COPASI.CTrajectoryProblem_setDuration(self, *args)
    def getDuration(self): return _COPASI.CTrajectoryProblem_getDuration(self)
    def setOutputStartTime(self, *args): return _COPASI.CTrajectoryProblem_setOutputStartTime(self, *args)
    def getOutputStartTime(self): return _COPASI.CTrajectoryProblem_getOutputStartTime(self)
    def setTimeSeriesRequested(self, *args): return _COPASI.CTrajectoryProblem_setTimeSeriesRequested(self, *args)
    def timeSeriesRequested(self): return _COPASI.CTrajectoryProblem_timeSeriesRequested(self)
    def setOutputEvent(self, *args): return _COPASI.CTrajectoryProblem_setOutputEvent(self, *args)
    def getOutputEvent(self): return _COPASI.CTrajectoryProblem_getOutputEvent(self)
CTrajectoryProblem_swigregister = _COPASI.CTrajectoryProblem_swigregister
CTrajectoryProblem_swigregister(CTrajectoryProblem)

class CTrajectoryMethod(CCopasiMethod):
    __swig_setmethods__ = {}
    for _s in [CCopasiMethod]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CTrajectoryMethod, name, value)
    __swig_getmethods__ = {}
    for _s in [CCopasiMethod]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CTrajectoryMethod, name)
    __repr__ = _swig_repr
    FAILURE = _COPASI.CTrajectoryMethod_FAILURE
    NORMAL = _COPASI.CTrajectoryMethod_NORMAL
    ROOT = _COPASI.CTrajectoryMethod_ROOT
    __swig_getmethods__["createMethod"] = lambda x: _COPASI.CTrajectoryMethod_createMethod
    def __init__(self, *args): 
        this = _COPASI.new_CTrajectoryMethod(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _COPASI.delete_CTrajectoryMethod
    __del__ = lambda self : None;
    def setCurrentState(self, *args): return _COPASI.CTrajectoryMethod_setCurrentState(self, *args)
    def setProblem(self, *args): return _COPASI.CTrajectoryMethod_setProblem(self, *args)
    def stateChanged(self): return _COPASI.CTrajectoryMethod_stateChanged(self)
    def step(self, *args): return _COPASI.CTrajectoryMethod_step(self, *args)
    def start(self, *args): return _COPASI.CTrajectoryMethod_start(self, *args)
    def isValidProblem(self, *args): return _COPASI.CTrajectoryMethod_isValidProblem(self, *args)
CTrajectoryMethod_swigregister = _COPASI.CTrajectoryMethod_swigregister
CTrajectoryMethod_swigregister(CTrajectoryMethod)

def CTrajectoryMethod_createMethod(*args):
  return _COPASI.CTrajectoryMethod_createMethod(*args)
CTrajectoryMethod_createMethod = _COPASI.CTrajectoryMethod_createMethod

class CTrajectoryTask(CCopasiTask):
    __swig_setmethods__ = {}
    for _s in [CCopasiTask]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CTrajectoryTask, name, value)
    __swig_getmethods__ = {}
    for _s in [CCopasiTask]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CTrajectoryTask, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _COPASI.new_CTrajectoryTask(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _COPASI.delete_CTrajectoryTask
    __del__ = lambda self : None;
    def processStart(self, *args): return _COPASI.CTrajectoryTask_processStart(self, *args)
    def processStep(self, *args): return _COPASI.CTrajectoryTask_processStep(self, *args)
    def restore(self): return _COPASI.CTrajectoryTask_restore(self)
    def setMethodType(self, *args): return _COPASI.CTrajectoryTask_setMethodType(self, *args)
    def createMethod(self, *args): return _COPASI.CTrajectoryTask_createMethod(self, *args)
    def getState(self): return _COPASI.CTrajectoryTask_getState(self)
    def getTimeSeries(self): return _COPASI.CTrajectoryTask_getTimeSeries(self)
    def getValidMethods(self): return _COPASI.CTrajectoryTask_getValidMethods(self)
CTrajectoryTask_swigregister = _COPASI.CTrajectoryTask_swigregister
CTrajectoryTask_swigregister(CTrajectoryTask)

class CDefaultOutputDescription:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CDefaultOutputDescription, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CDefaultOutputDescription, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _COPASI.new_CDefaultOutputDescription()
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["name"] = _COPASI.CDefaultOutputDescription_name_set
    __swig_getmethods__["name"] = _COPASI.CDefaultOutputDescription_name_get
    __swig_setmethods__["description"] = _COPASI.CDefaultOutputDescription_description_set
    __swig_getmethods__["description"] = _COPASI.CDefaultOutputDescription_description_get
    __swig_setmethods__["isPlot"] = _COPASI.CDefaultOutputDescription_isPlot_set
    __swig_getmethods__["isPlot"] = _COPASI.CDefaultOutputDescription_isPlot_get
    __swig_setmethods__["mTaskType"] = _COPASI.CDefaultOutputDescription_mTaskType_set
    __swig_getmethods__["mTaskType"] = _COPASI.CDefaultOutputDescription_mTaskType_get
    __swig_setmethods__["mSecondaryTask"] = _COPASI.CDefaultOutputDescription_mSecondaryTask_set
    __swig_getmethods__["mSecondaryTask"] = _COPASI.CDefaultOutputDescription_mSecondaryTask_get
    __swig_destroy__ = _COPASI.delete_CDefaultOutputDescription
    __del__ = lambda self : None;
CDefaultOutputDescription_swigregister = _COPASI.CDefaultOutputDescription_swigregister
CDefaultOutputDescription_swigregister(CDefaultOutputDescription)

class COutputAssistant:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, COutputAssistant, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, COutputAssistant, name)
    __repr__ = _swig_repr
    __swig_getmethods__["getListOfDefaultOutputDescriptions"] = lambda x: _COPASI.COutputAssistant_getListOfDefaultOutputDescriptions
    __swig_getmethods__["getDefaultReportIndex"] = lambda x: _COPASI.COutputAssistant_getDefaultReportIndex
    __swig_getmethods__["getItemName"] = lambda x: _COPASI.COutputAssistant_getItemName
    __swig_getmethods__["getItem"] = lambda x: _COPASI.COutputAssistant_getItem
    __swig_getmethods__["createDefaultOutput"] = lambda x: _COPASI.COutputAssistant_createDefaultOutput
    def __init__(self): 
        this = _COPASI.new_COutputAssistant()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _COPASI.delete_COutputAssistant
    __del__ = lambda self : None;
COutputAssistant_swigregister = _COPASI.COutputAssistant_swigregister
COutputAssistant_swigregister(COutputAssistant)

def COutputAssistant_getListOfDefaultOutputDescriptions(task = None):
  return _COPASI.COutputAssistant_getListOfDefaultOutputDescriptions(task)
COutputAssistant_getListOfDefaultOutputDescriptions = _COPASI.COutputAssistant_getListOfDefaultOutputDescriptions

def COutputAssistant_getDefaultReportIndex(*args):
  return _COPASI.COutputAssistant_getDefaultReportIndex(*args)
COutputAssistant_getDefaultReportIndex = _COPASI.COutputAssistant_getDefaultReportIndex

def COutputAssistant_getItemName(*args):
  return _COPASI.COutputAssistant_getItemName(*args)
COutputAssistant_getItemName = _COPASI.COutputAssistant_getItemName

def COutputAssistant_getItem(*args):
  return _COPASI.COutputAssistant_getItem(*args)
COutputAssistant_getItem = _COPASI.COutputAssistant_getItem

def COutputAssistant_createDefaultOutput(*args):
  return _COPASI.COutputAssistant_createDefaultOutput(*args)
COutputAssistant_createDefaultOutput = _COPASI.COutputAssistant_createDefaultOutput

class CSteadyStateProblem(CCopasiProblem):
    __swig_setmethods__ = {}
    for _s in [CCopasiProblem]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CSteadyStateProblem, name, value)
    __swig_getmethods__ = {}
    for _s in [CCopasiProblem]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CSteadyStateProblem, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _COPASI.new_CSteadyStateProblem(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _COPASI.delete_CSteadyStateProblem
    __del__ = lambda self : None;
    def isJacobianRequested(self): return _COPASI.CSteadyStateProblem_isJacobianRequested(self)
    def isStabilityAnalysisRequested(self): return _COPASI.CSteadyStateProblem_isStabilityAnalysisRequested(self)
    def setJacobianRequested(self, *args): return _COPASI.CSteadyStateProblem_setJacobianRequested(self, *args)
    def setStabilityAnalysisRequested(self, *args): return _COPASI.CSteadyStateProblem_setStabilityAnalysisRequested(self, *args)
CSteadyStateProblem_swigregister = _COPASI.CSteadyStateProblem_swigregister
CSteadyStateProblem_swigregister(CSteadyStateProblem)

class CSteadyStateMethod(CCopasiMethod):
    __swig_setmethods__ = {}
    for _s in [CCopasiMethod]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CSteadyStateMethod, name, value)
    __swig_getmethods__ = {}
    for _s in [CCopasiMethod]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CSteadyStateMethod, name)
    __repr__ = _swig_repr
    notFound = _COPASI.CSteadyStateMethod_notFound
    found = _COPASI.CSteadyStateMethod_found
    foundEquilibrium = _COPASI.CSteadyStateMethod_foundEquilibrium
    foundNegative = _COPASI.CSteadyStateMethod_foundNegative
    __swig_getmethods__["createMethod"] = lambda x: _COPASI.CSteadyStateMethod_createMethod
    def __init__(self, *args): 
        this = _COPASI.new_CSteadyStateMethod(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _COPASI.delete_CSteadyStateMethod
    __del__ = lambda self : None;
    def elevateChildren(self): return _COPASI.CSteadyStateMethod_elevateChildren(self)
    def isValidProblem(self, *args): return _COPASI.CSteadyStateMethod_isValidProblem(self, *args)
    def initialize(self, *args): return _COPASI.CSteadyStateMethod_initialize(self, *args)
    def doJacobian(self, *args): return _COPASI.CSteadyStateMethod_doJacobian(self, *args)
    def getStabilityResolution(self): return _COPASI.CSteadyStateMethod_getStabilityResolution(self)
    def getMethodLog(self): return _COPASI.CSteadyStateMethod_getMethodLog(self)
CSteadyStateMethod_swigregister = _COPASI.CSteadyStateMethod_swigregister
CSteadyStateMethod_swigregister(CSteadyStateMethod)

def CSteadyStateMethod_createMethod(*args):
  return _COPASI.CSteadyStateMethod_createMethod(*args)
CSteadyStateMethod_createMethod = _COPASI.CSteadyStateMethod_createMethod

class CSteadyStateTask(CCopasiTask):
    __swig_setmethods__ = {}
    for _s in [CCopasiTask]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CSteadyStateTask, name, value)
    __swig_getmethods__ = {}
    for _s in [CCopasiTask]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CSteadyStateTask, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _COPASI.new_CSteadyStateTask(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _COPASI.delete_CSteadyStateTask
    __del__ = lambda self : None;
    def createMethod(self, *args): return _COPASI.CSteadyStateTask_createMethod(self, *args)
    def updateMatrices(self): return _COPASI.CSteadyStateTask_updateMatrices(self)
    def restore(self): return _COPASI.CSteadyStateTask_restore(self)
    def setInitialState(self): return _COPASI.CSteadyStateTask_setInitialState(self)
    def getState(self): return _COPASI.CSteadyStateTask_getState(self)
    def getJacobian(self): return _COPASI.CSteadyStateTask_getJacobian(self)
    def getJacobianAnnotated(self): return _COPASI.CSteadyStateTask_getJacobianAnnotated(self)
    def getJacobianReduced(self): return _COPASI.CSteadyStateTask_getJacobianReduced(self)
    def getJacobianXAnnotated(self): return _COPASI.CSteadyStateTask_getJacobianXAnnotated(self)
    def getEigenValues(self): return _COPASI.CSteadyStateTask_getEigenValues(self)
    def getEigenValuesReduced(self): return _COPASI.CSteadyStateTask_getEigenValuesReduced(self)
    def getResult(self): return _COPASI.CSteadyStateTask_getResult(self)
CSteadyStateTask_swigregister = _COPASI.CSteadyStateTask_swigregister
CSteadyStateTask_swigregister(CSteadyStateTask)

class CNewtonMethod(CSteadyStateMethod):
    __swig_setmethods__ = {}
    for _s in [CSteadyStateMethod]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CNewtonMethod, name, value)
    __swig_getmethods__ = {}
    for _s in [CSteadyStateMethod]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CNewtonMethod, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _COPASI.new_CNewtonMethod(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _COPASI.delete_CNewtonMethod
    __del__ = lambda self : None;
    def elevateChildren(self): return _COPASI.CNewtonMethod_elevateChildren(self)
    def processInternal(self): return _COPASI.CNewtonMethod_processInternal(self)
    def isSteadyState(self, *args): return _COPASI.CNewtonMethod_isSteadyState(self, *args)
    def targetFunction(self, *args): return _COPASI.CNewtonMethod_targetFunction(self, *args)
    def isValidProblem(self, *args): return _COPASI.CNewtonMethod_isValidProblem(self, *args)
    def initialize(self, *args): return _COPASI.CNewtonMethod_initialize(self, *args)
CNewtonMethod_swigregister = _COPASI.CNewtonMethod_swigregister
CNewtonMethod_swigregister(CNewtonMethod)

class CScanItem:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CScanItem, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CScanItem, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_getmethods__["createScanItemFromParameterGroup"] = lambda x: _COPASI.CScanItem_createScanItemFromParameterGroup
    def getNumSteps(self): return _COPASI.CScanItem_getNumSteps(self)
    def restoreValue(self): return _COPASI.CScanItem_restoreValue(self)
    def storeValue(self): return _COPASI.CScanItem_storeValue(self)
    def reset(self): return _COPASI.CScanItem_reset(self)
    def step(self): return _COPASI.CScanItem_step(self)
    def isFinished(self): return _COPASI.CScanItem_isFinished(self)
    def isNesting(self): return _COPASI.CScanItem_isNesting(self)
    __swig_destroy__ = _COPASI.delete_CScanItem
    __del__ = lambda self : None;
    def isValidScanItem(self): return _COPASI.CScanItem_isValidScanItem(self)
    def getObject(self): return _COPASI.CScanItem_getObject(self)
CScanItem_swigregister = _COPASI.CScanItem_swigregister
CScanItem_swigregister(CScanItem)

def CScanItem_createScanItemFromParameterGroup(*args):
  return _COPASI.CScanItem_createScanItemFromParameterGroup(*args)
CScanItem_createScanItemFromParameterGroup = _COPASI.CScanItem_createScanItemFromParameterGroup

class CScanItemRepeat(CScanItem):
    __swig_setmethods__ = {}
    for _s in [CScanItem]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CScanItemRepeat, name, value)
    __swig_getmethods__ = {}
    for _s in [CScanItem]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CScanItemRepeat, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _COPASI.new_CScanItemRepeat(*args)
        try: self.this.append(this)
        except: self.this = this
    def step(self): return _COPASI.CScanItemRepeat_step(self)
    __swig_destroy__ = _COPASI.delete_CScanItemRepeat
    __del__ = lambda self : None;
CScanItemRepeat_swigregister = _COPASI.CScanItemRepeat_swigregister
CScanItemRepeat_swigregister(CScanItemRepeat)

class CScanItemLinear(CScanItem):
    __swig_setmethods__ = {}
    for _s in [CScanItem]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CScanItemLinear, name, value)
    __swig_getmethods__ = {}
    for _s in [CScanItem]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CScanItemLinear, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _COPASI.new_CScanItemLinear(*args)
        try: self.this.append(this)
        except: self.this = this
    def step(self): return _COPASI.CScanItemLinear_step(self)
    __swig_destroy__ = _COPASI.delete_CScanItemLinear
    __del__ = lambda self : None;
    def isValidScanItem(self): return _COPASI.CScanItemLinear_isValidScanItem(self)
CScanItemLinear_swigregister = _COPASI.CScanItemLinear_swigregister
CScanItemLinear_swigregister(CScanItemLinear)

class CScanItemRandom(CScanItem):
    __swig_setmethods__ = {}
    for _s in [CScanItem]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CScanItemRandom, name, value)
    __swig_getmethods__ = {}
    for _s in [CScanItem]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CScanItemRandom, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _COPASI.new_CScanItemRandom(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _COPASI.delete_CScanItemRandom
    __del__ = lambda self : None;
    def step(self): return _COPASI.CScanItemRandom_step(self)
    def isNesting(self): return _COPASI.CScanItemRandom_isNesting(self)
    def isValidScanItem(self): return _COPASI.CScanItemRandom_isValidScanItem(self)
CScanItemRandom_swigregister = _COPASI.CScanItemRandom_swigregister
CScanItemRandom_swigregister(CScanItemRandom)

class CScanMethod(CCopasiMethod):
    __swig_setmethods__ = {}
    for _s in [CCopasiMethod]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CScanMethod, name, value)
    __swig_getmethods__ = {}
    for _s in [CCopasiMethod]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CScanMethod, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_getmethods__["createMethod"] = lambda x: _COPASI.CScanMethod_createMethod
    __swig_destroy__ = _COPASI.delete_CScanMethod
    __del__ = lambda self : None;
    def setProblem(self, *args): return _COPASI.CScanMethod_setProblem(self, *args)
    def scan(self): return _COPASI.CScanMethod_scan(self)
    def getTotalNumberOfSteps(self): return _COPASI.CScanMethod_getTotalNumberOfSteps(self)
    def isValidProblem(self, *args): return _COPASI.CScanMethod_isValidProblem(self, *args)
CScanMethod_swigregister = _COPASI.CScanMethod_swigregister
CScanMethod_swigregister(CScanMethod)

def CScanMethod_createMethod(*args):
  return _COPASI.CScanMethod_createMethod(*args)
CScanMethod_createMethod = _COPASI.CScanMethod_createMethod

class CScanProblem(CCopasiProblem):
    __swig_setmethods__ = {}
    for _s in [CCopasiProblem]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CScanProblem, name, value)
    __swig_getmethods__ = {}
    for _s in [CCopasiProblem]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CScanProblem, name)
    __repr__ = _swig_repr
    SCAN_REPEAT = _COPASI.CScanProblem_SCAN_REPEAT
    SCAN_LINEAR = _COPASI.CScanProblem_SCAN_LINEAR
    SCAN_RANDOM = _COPASI.CScanProblem_SCAN_RANDOM
    SCAN_BREAK = _COPASI.CScanProblem_SCAN_BREAK
    SD_UNIFORM = _COPASI.CScanProblem_SD_UNIFORM
    SD_GAUSS = _COPASI.CScanProblem_SD_GAUSS
    SD_BOLTZ = _COPASI.CScanProblem_SD_BOLTZ
    SD_REGULAR = _COPASI.CScanProblem_SD_REGULAR
    def __init__(self, *args): 
        this = _COPASI.new_CScanProblem(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _COPASI.delete_CScanProblem
    __del__ = lambda self : None;
    def setSubtask(self, *args): return _COPASI.CScanProblem_setSubtask(self, *args)
    def getSubtask(self): return _COPASI.CScanProblem_getSubtask(self)
    def setOutputInSubtask(self, *args): return _COPASI.CScanProblem_setOutputInSubtask(self, *args)
    def getOutputInSubtask(self): return _COPASI.CScanProblem_getOutputInSubtask(self)
    def setAdjustInitialConditions(self, *args): return _COPASI.CScanProblem_setAdjustInitialConditions(self, *args)
    def getAdjustInitialConditions(self): return _COPASI.CScanProblem_getAdjustInitialConditions(self)
    def getNumberOfScanItems(self): return _COPASI.CScanProblem_getNumberOfScanItems(self)
    def getScanItem(self, *args): return _COPASI.CScanProblem_getScanItem(self, *args)
    def createScanItem(self, *args): return _COPASI.CScanProblem_createScanItem(self, *args)
    def clearScanItems(self): return _COPASI.CScanProblem_clearScanItems(self)
CScanProblem_swigregister = _COPASI.CScanProblem_swigregister
CScanProblem_swigregister(CScanProblem)

class CScanTask(CCopasiTask):
    __swig_setmethods__ = {}
    for _s in [CCopasiTask]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CScanTask, name, value)
    __swig_getmethods__ = {}
    for _s in [CCopasiTask]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CScanTask, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _COPASI.new_CScanTask(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _COPASI.delete_CScanTask
    __del__ = lambda self : None;
    def cleanup(self): return _COPASI.CScanTask_cleanup(self)
    def createMethod(self, *args): return _COPASI.CScanTask_createMethod(self, *args)
    def processCallback(self): return _COPASI.CScanTask_processCallback(self)
    def outputSeparatorCallback(self, isLast = False): return _COPASI.CScanTask_outputSeparatorCallback(self, isLast)
CScanTask_swigregister = _COPASI.CScanTask_swigregister
CScanTask_swigregister(CScanTask)

class MethodSubTypeVector:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MethodSubTypeVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MethodSubTypeVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _COPASI.MethodSubTypeVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _COPASI.MethodSubTypeVector___nonzero__(self)
    def __bool__(self): return _COPASI.MethodSubTypeVector___bool__(self)
    def __len__(self): return _COPASI.MethodSubTypeVector___len__(self)
    def pop(self): return _COPASI.MethodSubTypeVector_pop(self)
    def __getslice__(self, *args): return _COPASI.MethodSubTypeVector___getslice__(self, *args)
    def __setslice__(self, *args): return _COPASI.MethodSubTypeVector___setslice__(self, *args)
    def __delslice__(self, *args): return _COPASI.MethodSubTypeVector___delslice__(self, *args)
    def __delitem__(self, *args): return _COPASI.MethodSubTypeVector___delitem__(self, *args)
    def __getitem__(self, *args): return _COPASI.MethodSubTypeVector___getitem__(self, *args)
    def __setitem__(self, *args): return _COPASI.MethodSubTypeVector___setitem__(self, *args)
    def append(self, *args): return _COPASI.MethodSubTypeVector_append(self, *args)
    def empty(self): return _COPASI.MethodSubTypeVector_empty(self)
    def size(self): return _COPASI.MethodSubTypeVector_size(self)
    def clear(self): return _COPASI.MethodSubTypeVector_clear(self)
    def swap(self, *args): return _COPASI.MethodSubTypeVector_swap(self, *args)
    def get_allocator(self): return _COPASI.MethodSubTypeVector_get_allocator(self)
    def begin(self): return _COPASI.MethodSubTypeVector_begin(self)
    def end(self): return _COPASI.MethodSubTypeVector_end(self)
    def rbegin(self): return _COPASI.MethodSubTypeVector_rbegin(self)
    def rend(self): return _COPASI.MethodSubTypeVector_rend(self)
    def pop_back(self): return _COPASI.MethodSubTypeVector_pop_back(self)
    def erase(self, *args): return _COPASI.MethodSubTypeVector_erase(self, *args)
    def __init__(self, *args): 
        this = _COPASI.new_MethodSubTypeVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _COPASI.MethodSubTypeVector_push_back(self, *args)
    def front(self): return _COPASI.MethodSubTypeVector_front(self)
    def back(self): return _COPASI.MethodSubTypeVector_back(self)
    def assign(self, *args): return _COPASI.MethodSubTypeVector_assign(self, *args)
    def resize(self, *args): return _COPASI.MethodSubTypeVector_resize(self, *args)
    def insert(self, *args): return _COPASI.MethodSubTypeVector_insert(self, *args)
    def reserve(self, *args): return _COPASI.MethodSubTypeVector_reserve(self, *args)
    def capacity(self): return _COPASI.MethodSubTypeVector_capacity(self)
    __swig_destroy__ = _COPASI.delete_MethodSubTypeVector
    __del__ = lambda self : None;
MethodSubTypeVector_swigregister = _COPASI.MethodSubTypeVector_swigregister
MethodSubTypeVector_swigregister(MethodSubTypeVector)

class CLyapMethod(CCopasiMethod):
    __swig_setmethods__ = {}
    for _s in [CCopasiMethod]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CLyapMethod, name, value)
    __swig_getmethods__ = {}
    for _s in [CCopasiMethod]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CLyapMethod, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_getmethods__["isValidSubType"] = lambda x: _COPASI.CLyapMethod_isValidSubType
    __swig_getmethods__["createMethod"] = lambda x: _COPASI.CLyapMethod_createMethod
    __swig_destroy__ = _COPASI.delete_CLyapMethod
    __del__ = lambda self : None;
    def setProblem(self, *args): return _COPASI.CLyapMethod_setProblem(self, *args)
    def step(self, *args): return _COPASI.CLyapMethod_step(self, *args)
    def calculate(self): return _COPASI.CLyapMethod_calculate(self)
    def start(self, *args): return _COPASI.CLyapMethod_start(self, *args)
    def isValidProblem(self, *args): return _COPASI.CLyapMethod_isValidProblem(self, *args)
CLyapMethod_swigregister = _COPASI.CLyapMethod_swigregister
CLyapMethod_swigregister(CLyapMethod)

def CLyapMethod_isValidSubType(*args):
  return _COPASI.CLyapMethod_isValidSubType(*args)
CLyapMethod_isValidSubType = _COPASI.CLyapMethod_isValidSubType

def CLyapMethod_createMethod(*args):
  return _COPASI.CLyapMethod_createMethod(*args)
CLyapMethod_createMethod = _COPASI.CLyapMethod_createMethod

class CLyapProblem(CCopasiProblem):
    __swig_setmethods__ = {}
    for _s in [CCopasiProblem]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CLyapProblem, name, value)
    __swig_getmethods__ = {}
    for _s in [CCopasiProblem]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CLyapProblem, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _COPASI.new_CLyapProblem(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _COPASI.delete_CLyapProblem
    __del__ = lambda self : None;
    def elevateChildren(self): return _COPASI.CLyapProblem_elevateChildren(self)
    def setExponentNumber(self, *args): return _COPASI.CLyapProblem_setExponentNumber(self, *args)
    def getExponentNumber(self): return _COPASI.CLyapProblem_getExponentNumber(self)
    def setTransientTime(self, *args): return _COPASI.CLyapProblem_setTransientTime(self, *args)
    def getTransientTime(self): return _COPASI.CLyapProblem_getTransientTime(self)
    def setDivergenceRequested(self, *args): return _COPASI.CLyapProblem_setDivergenceRequested(self, *args)
    def divergenceRequested(self): return _COPASI.CLyapProblem_divergenceRequested(self)
CLyapProblem_swigregister = _COPASI.CLyapProblem_swigregister
CLyapProblem_swigregister(CLyapProblem)

class CLyapTask(CCopasiTask):
    __swig_setmethods__ = {}
    for _s in [CCopasiTask]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CLyapTask, name, value)
    __swig_getmethods__ = {}
    for _s in [CCopasiTask]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CLyapTask, name)
    __repr__ = _swig_repr
    def __init__(self, pParent = None): 
        this = _COPASI.new_CLyapTask(pParent)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _COPASI.delete_CLyapTask
    __del__ = lambda self : None;
    def restore(self): return _COPASI.CLyapTask_restore(self)
    def exponents(self): return _COPASI.CLyapTask_exponents(self)
    def sumOfExponents(self): return _COPASI.CLyapTask_sumOfExponents(self)
    def averageDivergence(self): return _COPASI.CLyapTask_averageDivergence(self)
    def resultAvailable(self): return _COPASI.CLyapTask_resultAvailable(self)
    def resultHasDivergence(self): return _COPASI.CLyapTask_resultHasDivergence(self)
    def modelVariablesInResult(self): return _COPASI.CLyapTask_modelVariablesInResult(self)
    def numberOfExponentsCalculated(self): return _COPASI.CLyapTask_numberOfExponentsCalculated(self)
    def setMethodType(self, *args): return _COPASI.CLyapTask_setMethodType(self, *args)
    def createMethod(self, *args): return _COPASI.CLyapTask_createMethod(self, *args)
    def methodCallback(self, *args): return _COPASI.CLyapTask_methodCallback(self, *args)
CLyapTask_swigregister = _COPASI.CLyapTask_swigregister
CLyapTask_swigregister(CLyapTask)

class COptItem(CCopasiParameterGroup):
    __swig_setmethods__ = {}
    for _s in [CCopasiParameterGroup]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, COptItem, name, value)
    __swig_getmethods__ = {}
    for _s in [CCopasiParameterGroup]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, COptItem, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _COPASI.new_COptItem(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _COPASI.delete_COptItem
    __del__ = lambda self : None;
    def setObjectCN(self, *args): return _COPASI.COptItem_setObjectCN(self, *args)
    def getObjectCN(self): return _COPASI.COptItem_getObjectCN(self)
    def getObject(self): return _COPASI.COptItem_getObject(self)
    def getObjectDisplayName(self): return _COPASI.COptItem_getObjectDisplayName(self)
    def setLowerBound(self, *args): return _COPASI.COptItem_setLowerBound(self, *args)
    def getLowerBound(self): return _COPASI.COptItem_getLowerBound(self)
    def setUpperBound(self, *args): return _COPASI.COptItem_setUpperBound(self, *args)
    def getUpperBound(self): return _COPASI.COptItem_getUpperBound(self)
    __swig_getmethods__["isValid"] = lambda x: _COPASI.COptItem_isValid
    def compile(self, *args): return _COPASI.COptItem_compile(self, *args)
    def getConstraintViolation(self): return _COPASI.COptItem_getConstraintViolation(self)
    def checkConstraint(self, *args): return _COPASI.COptItem_checkConstraint(self, *args)
    def checkLowerBound(self, *args): return _COPASI.COptItem_checkLowerBound(self, *args)
    def checkUpperBound(self, *args): return _COPASI.COptItem_checkUpperBound(self, *args)
    def setStartValue(self, *args): return _COPASI.COptItem_setStartValue(self, *args)
    def getStartValue(self): return _COPASI.COptItem_getStartValue(self)
    def getRandomValue(self, pRandom = None): return _COPASI.COptItem_getRandomValue(self, pRandom)
    def getObjectValue(self): return _COPASI.COptItem_getObjectValue(self)
    def getLowerBoundValue(self): return _COPASI.COptItem_getLowerBoundValue(self)
    def getUpperBoundValue(self): return _COPASI.COptItem_getUpperBoundValue(self)
COptItem_swigregister = _COPASI.COptItem_swigregister
COptItem_swigregister(COptItem)

def COptItem_isValid(*args):
  return _COPASI.COptItem_isValid(*args)
COptItem_isValid = _COPASI.COptItem_isValid

class COptMethod(CCopasiMethod):
    __swig_setmethods__ = {}
    for _s in [CCopasiMethod]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, COptMethod, name, value)
    __swig_getmethods__ = {}
    for _s in [CCopasiMethod]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, COptMethod, name)
    __repr__ = _swig_repr
    __swig_getmethods__["createMethod"] = lambda x: _COPASI.COptMethod_createMethod
    def __init__(self, *args): 
        this = _COPASI.new_COptMethod(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _COPASI.delete_COptMethod
    __del__ = lambda self : None;
    def optimise(self): return _COPASI.COptMethod_optimise(self)
    def isBounded(self): return _COPASI.COptMethod_isBounded(self)
    def setProblem(self, *args): return _COPASI.COptMethod_setProblem(self, *args)
    def initialize(self): return _COPASI.COptMethod_initialize(self)
    def isValidProblem(self, *args): return _COPASI.COptMethod_isValidProblem(self, *args)
COptMethod_swigregister = _COPASI.COptMethod_swigregister
COptMethod_swigregister(COptMethod)

def COptMethod_createMethod(*args):
  return _COPASI.COptMethod_createMethod(*args)
COptMethod_createMethod = _COPASI.COptMethod_createMethod

class FloatCVector(FloatVectorCore):
    __swig_setmethods__ = {}
    for _s in [FloatVectorCore]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FloatCVector, name, value)
    __swig_getmethods__ = {}
    for _s in [FloatVectorCore]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FloatCVector, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _COPASI.new_FloatCVector(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _COPASI.delete_FloatCVector
    __del__ = lambda self : None;
FloatCVector_swigregister = _COPASI.FloatCVector_swigregister
FloatCVector_swigregister(FloatCVector)

SteadyState = _COPASI.SteadyState
Trajectory = _COPASI.Trajectory
class COptProblem(CCopasiProblem):
    __swig_setmethods__ = {}
    for _s in [CCopasiProblem]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, COptProblem, name, value)
    __swig_getmethods__ = {}
    for _s in [CCopasiProblem]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, COptProblem, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _COPASI.new_COptProblem(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _COPASI.delete_COptProblem
    __del__ = lambda self : None;
    def elevateChildren(self): return _COPASI.COptProblem_elevateChildren(self)
    def setModel(self, *args): return _COPASI.COptProblem_setModel(self, *args)
    def initializeSubtaskBeforeOutput(self): return _COPASI.COptProblem_initializeSubtaskBeforeOutput(self)
    def restoreModel(self, *args): return _COPASI.COptProblem_restoreModel(self, *args)
    def calculateStatistics(self, factor = 1.0e-003, resolution = 1.0e-009): return _COPASI.COptProblem_calculateStatistics(self, factor, resolution)
    def getOptItemList(self): return _COPASI.COptProblem_getOptItemList(self)
    def getConstraintList(self): return _COPASI.COptProblem_getConstraintList(self)
    def getCalculateValue(self): return _COPASI.COptProblem_getCalculateValue(self)
    def getSolutionVariables(self): return _COPASI.COptProblem_getSolutionVariables(self)
    def getVariableGradients(self): return _COPASI.COptProblem_getVariableGradients(self)
    def setSolution(self, *args): return _COPASI.COptProblem_setSolution(self, *args)
    def getSolutionValue(self): return _COPASI.COptProblem_getSolutionValue(self)
    def getOptItem(self, *args): return _COPASI.COptProblem_getOptItem(self, *args)
    def getOptItemSize(self): return _COPASI.COptProblem_getOptItemSize(self)
    def addOptItem(self, *args): return _COPASI.COptProblem_addOptItem(self, *args)
    def removeOptItem(self, *args): return _COPASI.COptProblem_removeOptItem(self, *args)
    def swapOptItem(self, *args): return _COPASI.COptProblem_swapOptItem(self, *args)
    def setObjectiveFunction(self, *args): return _COPASI.COptProblem_setObjectiveFunction(self, *args)
    def getObjectiveFunction(self): return _COPASI.COptProblem_getObjectiveFunction(self)
    def setSubtaskType(self, *args): return _COPASI.COptProblem_setSubtaskType(self, *args)
    def getSubtaskType(self): return _COPASI.COptProblem_getSubtaskType(self)
    def setMaximize(self, *args): return _COPASI.COptProblem_setMaximize(self, *args)
    def maximize(self): return _COPASI.COptProblem_maximize(self)
    def setRandomizeStartValues(self, *args): return _COPASI.COptProblem_setRandomizeStartValues(self, *args)
    def getRandomizeStartValues(self): return _COPASI.COptProblem_getRandomizeStartValues(self)
    def randomizeStartValues(self): return _COPASI.COptProblem_randomizeStartValues(self)
    def setCalculateStatistics(self, *args): return _COPASI.COptProblem_setCalculateStatistics(self, *args)
    def getCalculateStatistics(self): return _COPASI.COptProblem_getCalculateStatistics(self)
    def getFunctionEvaluations(self): return _COPASI.COptProblem_getFunctionEvaluations(self)
    def getExecutionTime(self): return _COPASI.COptProblem_getExecutionTime(self)
COptProblem_swigregister = _COPASI.COptProblem_swigregister
COptProblem_swigregister(COptProblem)

class COptTask(CCopasiTask):
    __swig_setmethods__ = {}
    for _s in [CCopasiTask]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, COptTask, name, value)
    __swig_getmethods__ = {}
    for _s in [CCopasiTask]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, COptTask, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _COPASI.new_COptTask(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _COPASI.delete_COptTask
    __del__ = lambda self : None;
    def cleanup(self): return _COPASI.COptTask_cleanup(self)
    def setMethodType(self, *args): return _COPASI.COptTask_setMethodType(self, *args)
    def createMethod(self, *args): return _COPASI.COptTask_createMethod(self, *args)
    def getValidMethods(self): return _COPASI.COptTask_getValidMethods(self)
COptTask_swigregister = _COPASI.COptTask_swigregister
COptTask_swigregister(COptTask)

class CExperimentFileInfo:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CExperimentFileInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CExperimentFileInfo, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _COPASI.new_CExperimentFileInfo(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _COPASI.delete_CExperimentFileInfo
    __del__ = lambda self : None;
    def setFileName(self, *args): return _COPASI.CExperimentFileInfo_setFileName(self, *args)
    def getFileName(self): return _COPASI.CExperimentFileInfo_getFileName(self)
    def sync(self): return _COPASI.CExperimentFileInfo_sync(self)
    def validate(self): return _COPASI.CExperimentFileInfo_validate(self)
    def validateFirst(self, *args): return _COPASI.CExperimentFileInfo_validateFirst(self, *args)
    def validateLast(self, *args): return _COPASI.CExperimentFileInfo_validateLast(self, *args)
    def validateHeader(self, *args): return _COPASI.CExperimentFileInfo_validateHeader(self, *args)
    def getExperimentNames(self): return _COPASI.CExperimentFileInfo_getExperimentNames(self)
    def getExperiment(self, *args): return _COPASI.CExperimentFileInfo_getExperiment(self, *args)
CExperimentFileInfo_swigregister = _COPASI.CExperimentFileInfo_swigregister
CExperimentFileInfo_swigregister(CExperimentFileInfo)

class CFittingPoint(CCopasiContainer):
    __swig_setmethods__ = {}
    for _s in [CCopasiContainer]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CFittingPoint, name, value)
    __swig_getmethods__ = {}
    for _s in [CCopasiContainer]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CFittingPoint, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _COPASI.new_CFittingPoint(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _COPASI.delete_CFittingPoint
    __del__ = lambda self : None;
    def setValues(self, *args): return _COPASI.CFittingPoint_setValues(self, *args)
CFittingPoint_swigregister = _COPASI.CFittingPoint_swigregister
CFittingPoint_swigregister(CFittingPoint)

class CExperiment(CCopasiParameterGroup):
    __swig_setmethods__ = {}
    for _s in [CCopasiParameterGroup]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CExperiment, name, value)
    __swig_getmethods__ = {}
    for _s in [CCopasiParameterGroup]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CExperiment, name)
    __repr__ = _swig_repr
    ignore = _COPASI.CExperiment_ignore
    independent = _COPASI.CExperiment_independent
    dependent = _COPASI.CExperiment_dependent
    time = _COPASI.CExperiment_time
    MEAN = _COPASI.CExperiment_MEAN
    MEAN_SQUARE = _COPASI.CExperiment_MEAN_SQUARE
    SD = _COPASI.CExperiment_SD
    def __init__(self, *args): 
        this = _COPASI.new_CExperiment(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _COPASI.delete_CExperiment
    __del__ = lambda self : None;
    def elevateChildren(self): return _COPASI.CExperiment_elevateChildren(self)
    def compile(self, *args): return _COPASI.CExperiment_compile(self, *args)
    def calculateWeights(self): return _COPASI.CExperiment_calculateWeights(self)
    def calculateStatistics(self): return _COPASI.CExperiment_calculateStatistics(self)
    def readColumnNames(self): return _COPASI.CExperiment_readColumnNames(self)
    def guessColumnNumber(self): return _COPASI.CExperiment_guessColumnNumber(self)
    def getColumnNames(self): return _COPASI.CExperiment_getColumnNames(self)
    def updateModelWithIndependentData(self, *args): return _COPASI.CExperiment_updateModelWithIndependentData(self, *args)
    def restoreModelIndependentData(self): return _COPASI.CExperiment_restoreModelIndependentData(self)
    def setExperimentType(self, *args): return _COPASI.CExperiment_setExperimentType(self, *args)
    def getExperimentType(self): return _COPASI.CExperiment_getExperimentType(self)
    def getTimeData(self): return _COPASI.CExperiment_getTimeData(self)
    def getIndependentData(self): return _COPASI.CExperiment_getIndependentData(self)
    def getDependentData(self): return _COPASI.CExperiment_getDependentData(self)
    def getFileName(self): return _COPASI.CExperiment_getFileName(self)
    def setFileName(self, *args): return _COPASI.CExperiment_setFileName(self, *args)
    def getObjectMap(self): return _COPASI.CExperiment_getObjectMap(self)
    def getFittingPoints(self): return _COPASI.CExperiment_getFittingPoints(self)
    def updateFittedPoints(self): return _COPASI.CExperiment_updateFittedPoints(self)
    def updateFittedPointValues(self, *args): return _COPASI.CExperiment_updateFittedPointValues(self, *args)
    def getNumColumns(self): return _COPASI.CExperiment_getNumColumns(self)
    def setNumColumns(self, *args): return _COPASI.CExperiment_setNumColumns(self, *args)
    def getFirstRow(self): return _COPASI.CExperiment_getFirstRow(self)
    def setFirstRow(self, *args): return _COPASI.CExperiment_setFirstRow(self, *args)
    def getLastRow(self): return _COPASI.CExperiment_getLastRow(self)
    def setLastRow(self, *args): return _COPASI.CExperiment_setLastRow(self, *args)
    def getHeaderRow(self): return _COPASI.CExperiment_getHeaderRow(self)
    def setHeaderRow(self, *args): return _COPASI.CExperiment_setHeaderRow(self, *args)
    def getNumDataRows(self): return _COPASI.CExperiment_getNumDataRows(self)
    def getSeparator(self): return _COPASI.CExperiment_getSeparator(self)
    def setSeparator(self, *args): return _COPASI.CExperiment_setSeparator(self, *args)
    def getWeightMethod(self): return _COPASI.CExperiment_getWeightMethod(self)
    def setWeightMethod(self, *args): return _COPASI.CExperiment_setWeightMethod(self, *args)
    def isRowOriented(self): return _COPASI.CExperiment_isRowOriented(self)
    def setIsRowOriented(self, *args): return _COPASI.CExperiment_setIsRowOriented(self, *args)
    __swig_getmethods__["compare"] = lambda x: _COPASI.CExperiment_compare
    def getObjectiveValue(self, *args): return _COPASI.CExperiment_getObjectiveValue(self, *args)
    def getDefaultWeight(self, *args): return _COPASI.CExperiment_getDefaultWeight(self, *args)
    def getRMS(self, *args): return _COPASI.CExperiment_getRMS(self, *args)
    def getErrorMean(self, *args): return _COPASI.CExperiment_getErrorMean(self, *args)
    def getErrorMeanSD(self, *args): return _COPASI.CExperiment_getErrorMeanSD(self, *args)
    def getCount(self, *args): return _COPASI.CExperiment_getCount(self, *args)
    def getIndependentObjects(self): return _COPASI.CExperiment_getIndependentObjects(self)
    def read(self, *args): return _COPASI.CExperiment_read(self, *args)
CExperiment_swigregister = _COPASI.CExperiment_swigregister
CExperiment_swigregister(CExperiment)

def CExperiment_compare(*args):
  return _COPASI.CExperiment_compare(*args)
CExperiment_compare = _COPASI.CExperiment_compare

class CExperimentSet(CCopasiParameterGroup):
    __swig_setmethods__ = {}
    for _s in [CCopasiParameterGroup]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CExperimentSet, name, value)
    __swig_getmethods__ = {}
    for _s in [CCopasiParameterGroup]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CExperimentSet, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _COPASI.new_CExperimentSet(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _COPASI.delete_CExperimentSet
    __del__ = lambda self : None;
    def elevateChildren(self): return _COPASI.CExperimentSet_elevateChildren(self)
    def compile(self, *args): return _COPASI.CExperimentSet_compile(self, *args)
    def calculateStatistics(self): return _COPASI.CExperimentSet_calculateStatistics(self)
    def getExperimentCount(self): return _COPASI.CExperimentSet_getExperimentCount(self)
    def addExperiment(self, *args): return _COPASI.CExperimentSet_addExperiment(self, *args)
    def removeExperiment(self, *args): return _COPASI.CExperimentSet_removeExperiment(self, *args)
    def getExperiment(self, *args): return _COPASI.CExperimentSet_getExperiment(self, *args)
    def hasDataForTaskType(self, *args): return _COPASI.CExperimentSet_hasDataForTaskType(self, *args)
    def getExperimentType(self, *args): return _COPASI.CExperimentSet_getExperimentType(self, *args)
    def getIndependentData(self, *args): return _COPASI.CExperimentSet_getIndependentData(self, *args)
    def getDependentData(self, *args): return _COPASI.CExperimentSet_getDependentData(self, *args)
    def keyToIndex(self, *args): return _COPASI.CExperimentSet_keyToIndex(self, *args)
    def sort(self): return _COPASI.CExperimentSet_sort(self)
    def getFileNames(self): return _COPASI.CExperimentSet_getFileNames(self)
    def getDataPointCount(self): return _COPASI.CExperimentSet_getDataPointCount(self)
    def getDependentObjects(self): return _COPASI.CExperimentSet_getDependentObjects(self)
    def getDependentObjectiveValues(self): return _COPASI.CExperimentSet_getDependentObjectiveValues(self)
    def getDependentRMS(self): return _COPASI.CExperimentSet_getDependentRMS(self)
    def getDependentErrorMean(self): return _COPASI.CExperimentSet_getDependentErrorMean(self)
    def getDependentErrorMeanSD(self): return _COPASI.CExperimentSet_getDependentErrorMeanSD(self)
CExperimentSet_swigregister = _COPASI.CExperimentSet_swigregister
CExperimentSet_swigregister(CExperimentSet)

class CExperimentObjectMap(CCopasiParameterGroup):
    __swig_setmethods__ = {}
    for _s in [CCopasiParameterGroup]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CExperimentObjectMap, name, value)
    __swig_getmethods__ = {}
    for _s in [CCopasiParameterGroup]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CExperimentObjectMap, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _COPASI.new_CExperimentObjectMap(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _COPASI.delete_CExperimentObjectMap
    __del__ = lambda self : None;
    def elevateChildren(self): return _COPASI.CExperimentObjectMap_elevateChildren(self)
    def setNumCols(self, *args): return _COPASI.CExperimentObjectMap_setNumCols(self, *args)
    def getLastNotIgnoredColumn(self): return _COPASI.CExperimentObjectMap_getLastNotIgnoredColumn(self)
    def getName(self, *args): return _COPASI.CExperimentObjectMap_getName(self, *args)
    def setRole(self, *args): return _COPASI.CExperimentObjectMap_setRole(self, *args)
    def getRole(self, *args): return _COPASI.CExperimentObjectMap_getRole(self, *args)
    def setObjectCN(self, *args): return _COPASI.CExperimentObjectMap_setObjectCN(self, *args)
    def getObjectCN(self, *args): return _COPASI.CExperimentObjectMap_getObjectCN(self, *args)
    def setWeight(self, *args): return _COPASI.CExperimentObjectMap_setWeight(self, *args)
    def getWeight(self, *args): return _COPASI.CExperimentObjectMap_getWeight(self, *args)
    def getDefaultWeight(self, *args): return _COPASI.CExperimentObjectMap_getDefaultWeight(self, *args)
    def compile(self, *args): return _COPASI.CExperimentObjectMap_compile(self, *args)
    def getMappedObjects(self): return _COPASI.CExperimentObjectMap_getMappedObjects(self)
    def getLastColumn(self): return _COPASI.CExperimentObjectMap_getLastColumn(self)
CExperimentObjectMap_swigregister = _COPASI.CExperimentObjectMap_swigregister
CExperimentObjectMap_swigregister(CExperimentObjectMap)

class CFitItem(COptItem):
    __swig_setmethods__ = {}
    for _s in [COptItem]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CFitItem, name, value)
    __swig_getmethods__ = {}
    for _s in [COptItem]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CFitItem, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _COPASI.new_CFitItem(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _COPASI.delete_CFitItem
    __del__ = lambda self : None;
    def elevateChildren(self): return _COPASI.CFitItem_elevateChildren(self)
    __swig_getmethods__["isValid"] = lambda x: _COPASI.CFitItem_isValid
    def compile(self, *args): return _COPASI.CFitItem_compile(self, *args)
    def checkConstraint(self): return _COPASI.CFitItem_checkConstraint(self)
    def getConstraintViolation(self): return _COPASI.CFitItem_getConstraintViolation(self)
    def setLocalValue(self, *args): return _COPASI.CFitItem_setLocalValue(self, *args)
    def getLocalValue(self): return _COPASI.CFitItem_getLocalValue(self)
    def addExperiment(self, *args): return _COPASI.CFitItem_addExperiment(self, *args)
    def getExperiment(self, *args): return _COPASI.CFitItem_getExperiment(self, *args)
    def removeExperiment(self, *args): return _COPASI.CFitItem_removeExperiment(self, *args)
    def getExperimentCount(self): return _COPASI.CFitItem_getExperimentCount(self)
    def getExperiments(self): return _COPASI.CFitItem_getExperiments(self)
    def getObjectValue(self): return _COPASI.CFitItem_getObjectValue(self)
CFitItem_swigregister = _COPASI.CFitItem_swigregister
CFitItem_swigregister(CFitItem)

def CFitItem_isValid(*args):
  return _COPASI.CFitItem_isValid(*args)
CFitItem_isValid = _COPASI.CFitItem_isValid

class CFitConstraint(CFitItem):
    __swig_setmethods__ = {}
    for _s in [CFitItem]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CFitConstraint, name, value)
    __swig_getmethods__ = {}
    for _s in [CFitItem]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CFitConstraint, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _COPASI.new_CFitConstraint(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _COPASI.delete_CFitConstraint
    __del__ = lambda self : None;
    def resetConstraintViolation(self): return _COPASI.CFitConstraint_resetConstraintViolation(self)
    def calculateConstraintViolation(self): return _COPASI.CFitConstraint_calculateConstraintViolation(self)
    def checkConstraint(self): return _COPASI.CFitConstraint_checkConstraint(self)
    def getConstraintViolation(self): return _COPASI.CFitConstraint_getConstraintViolation(self)
CFitConstraint_swigregister = _COPASI.CFitConstraint_swigregister
CFitConstraint_swigregister(CFitConstraint)

class CFitMethod(COptMethod):
    __swig_setmethods__ = {}
    for _s in [COptMethod]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CFitMethod, name, value)
    __swig_getmethods__ = {}
    for _s in [COptMethod]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CFitMethod, name)
    __repr__ = _swig_repr
    __swig_getmethods__["createMethod"] = lambda x: _COPASI.CFitMethod_createMethod
    def __init__(self, *args): 
        this = _COPASI.new_CFitMethod(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _COPASI.delete_CFitMethod
    __del__ = lambda self : None;
    def initialize(self): return _COPASI.CFitMethod_initialize(self)
    def isValidProblem(self, *args): return _COPASI.CFitMethod_isValidProblem(self, *args)
CFitMethod_swigregister = _COPASI.CFitMethod_swigregister
CFitMethod_swigregister(CFitMethod)

def CFitMethod_createMethod(*args):
  return _COPASI.CFitMethod_createMethod(*args)
CFitMethod_createMethod = _COPASI.CFitMethod_createMethod

class CFitProblem(COptProblem):
    __swig_setmethods__ = {}
    for _s in [COptProblem]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CFitProblem, name, value)
    __swig_getmethods__ = {}
    for _s in [COptProblem]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CFitProblem, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _COPASI.new_CFitProblem(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _COPASI.delete_CFitProblem
    __del__ = lambda self : None;
    def elevateChildren(self): return _COPASI.CFitProblem_elevateChildren(self)
    def setModel(self, *args): return _COPASI.CFitProblem_setModel(self, *args)
    def updateInitialState(self): return _COPASI.CFitProblem_updateInitialState(self)
    def setResidualsRequired(self, *args): return _COPASI.CFitProblem_setResidualsRequired(self, *args)
    def getResiduals(self): return _COPASI.CFitProblem_getResiduals(self)
    def calculateStatistics(self, factor = 1.0e-003, resolution = 1.0e-009): return _COPASI.CFitProblem_calculateStatistics(self, factor, resolution)
    def getRMS(self): return _COPASI.CFitProblem_getRMS(self)
    def getStdDeviation(self): return _COPASI.CFitProblem_getStdDeviation(self)
    def getVariableStdDeviations(self): return _COPASI.CFitProblem_getVariableStdDeviations(self)
    def getFisherInformation(self): return _COPASI.CFitProblem_getFisherInformation(self)
    def getCorrelations(self): return _COPASI.CFitProblem_getCorrelations(self)
    def getExperiementSet(self): return _COPASI.CFitProblem_getExperiementSet(self)
CFitProblem_swigregister = _COPASI.CFitProblem_swigregister
CFitProblem_swigregister(CFitProblem)

class CFitTask(COptTask):
    __swig_setmethods__ = {}
    for _s in [COptTask]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CFitTask, name, value)
    __swig_getmethods__ = {}
    for _s in [COptTask]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CFitTask, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _COPASI.new_CFitTask(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _COPASI.delete_CFitTask
    __del__ = lambda self : None;
    def cleanup(self): return _COPASI.CFitTask_cleanup(self)
    def setMethodType(self, *args): return _COPASI.CFitTask_setMethodType(self, *args)
    def createMethod(self, *args): return _COPASI.CFitTask_createMethod(self, *args)
    def getValidMethods(self): return _COPASI.CFitTask_getValidMethods(self)
CFitTask_swigregister = _COPASI.CFitTask_swigregister
CFitTask_swigregister(CFitTask)


def create_expression(*args):
  return _COPASI.create_expression(*args)
create_expression = _COPASI.create_expression
class CCopasiRootContainer(CCopasiContainer):
    __swig_setmethods__ = {}
    for _s in [CCopasiContainer]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CCopasiRootContainer, name, value)
    __swig_getmethods__ = {}
    for _s in [CCopasiContainer]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CCopasiRootContainer, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _COPASI.delete_CCopasiRootContainer
    __del__ = lambda self : None;
    __swig_getmethods__["destroy"] = lambda x: _COPASI.CCopasiRootContainer_destroy
    __swig_getmethods__["getRoot"] = lambda x: _COPASI.CCopasiRootContainer_getRoot
    __swig_getmethods__["getFunctionList"] = lambda x: _COPASI.CCopasiRootContainer_getFunctionList
    __swig_getmethods__["getDatamodelList"] = lambda x: _COPASI.CCopasiRootContainer_getDatamodelList
    __swig_getmethods__["addDatamodel"] = lambda x: _COPASI.CCopasiRootContainer_addDatamodel
    __swig_getmethods__["getUndefinedFunction"] = lambda x: _COPASI.CCopasiRootContainer_getUndefinedFunction
    __swig_getmethods__["getKeyFactory"] = lambda x: _COPASI.CCopasiRootContainer_getKeyFactory
    __swig_getmethods__["getUnknownMiriamResource"] = lambda x: _COPASI.CCopasiRootContainer_getUnknownMiriamResource
    __swig_getmethods__["removeDatamodel"] = lambda x: _COPASI.CCopasiRootContainer_removeDatamodel
    __swig_getmethods__["removeDatamodelWithIndex"] = lambda x: _COPASI.CCopasiRootContainer_removeDatamodelWithIndex
    __swig_getmethods__["getLicenseTxt"] = lambda x: _COPASI.CCopasiRootContainer_getLicenseTxt
    __swig_getmethods__["getLicenseHTML"] = lambda x: _COPASI.CCopasiRootContainer_getLicenseHTML
    __swig_getmethods__["getDatamodel"] = lambda x: _COPASI.CCopasiRootContainer_getDatamodel
    __swig_getmethods__["init"] = lambda x: _COPASI.CCopasiRootContainer_init
CCopasiRootContainer_swigregister = _COPASI.CCopasiRootContainer_swigregister
CCopasiRootContainer_swigregister(CCopasiRootContainer)

def CCopasiRootContainer_destroy():
  return _COPASI.CCopasiRootContainer_destroy()
CCopasiRootContainer_destroy = _COPASI.CCopasiRootContainer_destroy

def CCopasiRootContainer_getRoot():
  return _COPASI.CCopasiRootContainer_getRoot()
CCopasiRootContainer_getRoot = _COPASI.CCopasiRootContainer_getRoot

def CCopasiRootContainer_getFunctionList():
  return _COPASI.CCopasiRootContainer_getFunctionList()
CCopasiRootContainer_getFunctionList = _COPASI.CCopasiRootContainer_getFunctionList

def CCopasiRootContainer_getDatamodelList():
  return _COPASI.CCopasiRootContainer_getDatamodelList()
CCopasiRootContainer_getDatamodelList = _COPASI.CCopasiRootContainer_getDatamodelList

def CCopasiRootContainer_addDatamodel():
  return _COPASI.CCopasiRootContainer_addDatamodel()
CCopasiRootContainer_addDatamodel = _COPASI.CCopasiRootContainer_addDatamodel

def CCopasiRootContainer_getUndefinedFunction():
  return _COPASI.CCopasiRootContainer_getUndefinedFunction()
CCopasiRootContainer_getUndefinedFunction = _COPASI.CCopasiRootContainer_getUndefinedFunction

def CCopasiRootContainer_getKeyFactory():
  return _COPASI.CCopasiRootContainer_getKeyFactory()
CCopasiRootContainer_getKeyFactory = _COPASI.CCopasiRootContainer_getKeyFactory

def CCopasiRootContainer_getUnknownMiriamResource():
  return _COPASI.CCopasiRootContainer_getUnknownMiriamResource()
CCopasiRootContainer_getUnknownMiriamResource = _COPASI.CCopasiRootContainer_getUnknownMiriamResource

def CCopasiRootContainer_removeDatamodel(*args):
  return _COPASI.CCopasiRootContainer_removeDatamodel(*args)
CCopasiRootContainer_removeDatamodel = _COPASI.CCopasiRootContainer_removeDatamodel

def CCopasiRootContainer_removeDatamodelWithIndex(*args):
  return _COPASI.CCopasiRootContainer_removeDatamodelWithIndex(*args)
CCopasiRootContainer_removeDatamodelWithIndex = _COPASI.CCopasiRootContainer_removeDatamodelWithIndex

def CCopasiRootContainer_getLicenseTxt():
  return _COPASI.CCopasiRootContainer_getLicenseTxt()
CCopasiRootContainer_getLicenseTxt = _COPASI.CCopasiRootContainer_getLicenseTxt

def CCopasiRootContainer_getLicenseHTML():
  return _COPASI.CCopasiRootContainer_getLicenseHTML()
CCopasiRootContainer_getLicenseHTML = _COPASI.CCopasiRootContainer_getLicenseHTML

def CCopasiRootContainer_getDatamodel(*args):
  return _COPASI.CCopasiRootContainer_getDatamodel(*args)
CCopasiRootContainer_getDatamodel = _COPASI.CCopasiRootContainer_getDatamodel

def CCopasiRootContainer_init():
  return _COPASI.CCopasiRootContainer_init()
CCopasiRootContainer_init = _COPASI.CCopasiRootContainer_init

class CEventAssignment(CCopasiContainer):
    __swig_setmethods__ = {}
    for _s in [CCopasiContainer]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CEventAssignment, name, value)
    __swig_getmethods__ = {}
    for _s in [CCopasiContainer]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CEventAssignment, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _COPASI.new_CEventAssignment(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _COPASI.delete_CEventAssignment
    __del__ = lambda self : None;
    def setObjectParent(self, *args): return _COPASI.CEventAssignment_setObjectParent(self, *args)
    def compile(self, *args): return _COPASI.CEventAssignment_compile(self, *args)
    def getKey(self): return _COPASI.CEventAssignment_getKey(self)
    def setTargetKey(self, *args): return _COPASI.CEventAssignment_setTargetKey(self, *args)
    def getTargetKey(self): return _COPASI.CEventAssignment_getTargetKey(self)
    def getTargetObject(self): return _COPASI.CEventAssignment_getTargetObject(self)
    def setExpression(self, *args): return _COPASI.CEventAssignment_setExpression(self, *args)
    def setExpressionPtr(self, *args):
        val = _COPASI.CEventAssignment_setExpressionPtr(self, *args)
        if(len(args) > 0 and args[0] != None and isinstance(args[0], COPASI.CExpression)):
          args[0].__disown__()


        return val

    def getExpression(self): return _COPASI.CEventAssignment_getExpression(self)
    def getExpressionPtr(self): return _COPASI.CEventAssignment_getExpressionPtr(self)
CEventAssignment_swigregister = _COPASI.CEventAssignment_swigregister
CEventAssignment_swigregister(CEventAssignment)

class CEvent(CCopasiContainer,CAnnotation):
    __swig_setmethods__ = {}
    for _s in [CCopasiContainer,CAnnotation]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CEvent, name, value)
    __swig_getmethods__ = {}
    for _s in [CCopasiContainer,CAnnotation]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CEvent, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _COPASI.new_CEvent(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _COPASI.delete_CEvent
    __del__ = lambda self : None;
    def setObjectParent(self, *args): return _COPASI.CEvent_setObjectParent(self, *args)
    def getObjectDisplayName(self, regular = True, richtext = False): return _COPASI.CEvent_getObjectDisplayName(self, regular, richtext)
    def getKey(self): return _COPASI.CEvent_getKey(self)
    def compile(self, *args): return _COPASI.CEvent_compile(self, *args)
    def setOrder(self, *args): return _COPASI.CEvent_setOrder(self, *args)
    def getOrder(self): return _COPASI.CEvent_getOrder(self)
    def setSBMLId(self, *args): return _COPASI.CEvent_setSBMLId(self, *args)
    def getSBMLId(self): return _COPASI.CEvent_getSBMLId(self)
    def setDelayAssignment(self, *args): return _COPASI.CEvent_setDelayAssignment(self, *args)
    def getDelayAssignment(self): return _COPASI.CEvent_getDelayAssignment(self)
    def setTriggerExpression(self, *args): return _COPASI.CEvent_setTriggerExpression(self, *args)
    def setTriggerExpressionPtr(self, *args):
        val = _COPASI.CEvent_setTriggerExpressionPtr(self, *args)
        if(len(args) > 0 and args[0] != None and isinstance(args[0], COPASI.CExpression)):
          args[0].__disown__()


        return val

    def getTriggerExpression(self): return _COPASI.CEvent_getTriggerExpression(self)
    def getTriggerExpressionPtr(self): return _COPASI.CEvent_getTriggerExpressionPtr(self)
    def setDelayExpression(self, *args): return _COPASI.CEvent_setDelayExpression(self, *args)
    def setDelayExpressionPtr(self, *args):
        val = _COPASI.CEvent_setDelayExpressionPtr(self, *args)
        if(len(args) > 0 and args[0] != None and isinstance(args[0], COPASI.CExpression)):
          args[0].__disown__()


        return val

    def getDelayExpression(self): return _COPASI.CEvent_getDelayExpression(self)
    def getDelayExpressionPtr(self): return _COPASI.CEvent_getDelayExpressionPtr(self)
    def getAssignments(self): return _COPASI.CEvent_getAssignments(self)
    def deleteAssignment(self, *args): return _COPASI.CEvent_deleteAssignment(self, *args)
    def createAssignment(self): return _COPASI.CEvent_createAssignment(self)
CEvent_swigregister = _COPASI.CEvent_swigregister
CEvent_swigregister(CEvent)

class CLBase:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CLBase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CLBase, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _COPASI.new_CLBase(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _COPASI.delete_CLBase
    __del__ = lambda self : None;
CLBase_swigregister = _COPASI.CLBase_swigregister
CLBase_swigregister(CLBase)

class CLPoint(CLBase):
    __swig_setmethods__ = {}
    for _s in [CLBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CLPoint, name, value)
    __swig_getmethods__ = {}
    for _s in [CLBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CLPoint, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _COPASI.new_CLPoint(*args)
        try: self.this.append(this)
        except: self.this = this
    def setX(self, *args): return _COPASI.CLPoint_setX(self, *args)
    def setY(self, *args): return _COPASI.CLPoint_setY(self, *args)
    def scale(self, *args): return _COPASI.CLPoint_scale(self, *args)
    def __eq__(self, *args): return _COPASI.CLPoint___eq__(self, *args)
    def getX(self): return _COPASI.CLPoint_getX(self)
    def getY(self): return _COPASI.CLPoint_getY(self)
    __swig_destroy__ = _COPASI.delete_CLPoint
    __del__ = lambda self : None;
CLPoint_swigregister = _COPASI.CLPoint_swigregister
CLPoint_swigregister(CLPoint)

class CLDimensions(CLBase):
    __swig_setmethods__ = {}
    for _s in [CLBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CLDimensions, name, value)
    __swig_getmethods__ = {}
    for _s in [CLBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CLDimensions, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _COPASI.new_CLDimensions(*args)
        try: self.this.append(this)
        except: self.this = this
    def setWidth(self, *args): return _COPASI.CLDimensions_setWidth(self, *args)
    def setHeight(self, *args): return _COPASI.CLDimensions_setHeight(self, *args)
    def scale(self, *args): return _COPASI.CLDimensions_scale(self, *args)
    def getHeight(self): return _COPASI.CLDimensions_getHeight(self)
    def getWidth(self): return _COPASI.CLDimensions_getWidth(self)
    __swig_destroy__ = _COPASI.delete_CLDimensions
    __del__ = lambda self : None;
CLDimensions_swigregister = _COPASI.CLDimensions_swigregister
CLDimensions_swigregister(CLDimensions)

class CLBoundingBox(CLBase):
    __swig_setmethods__ = {}
    for _s in [CLBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CLBoundingBox, name, value)
    __swig_getmethods__ = {}
    for _s in [CLBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CLBoundingBox, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _COPASI.new_CLBoundingBox(*args)
        try: self.this.append(this)
        except: self.this = this
    def getPosition(self): return _COPASI.CLBoundingBox_getPosition(self)
    def getDimensions(self): return _COPASI.CLBoundingBox_getDimensions(self)
    def setPosition(self, *args): return _COPASI.CLBoundingBox_setPosition(self, *args)
    def setDimensions(self, *args): return _COPASI.CLBoundingBox_setDimensions(self, *args)
    def scale(self, *args): return _COPASI.CLBoundingBox_scale(self, *args)
    __swig_destroy__ = _COPASI.delete_CLBoundingBox
    __del__ = lambda self : None;
CLBoundingBox_swigregister = _COPASI.CLBoundingBox_swigregister
CLBoundingBox_swigregister(CLBoundingBox)

class CLGraphicalObject(CLBase,CCopasiContainer):
    __swig_setmethods__ = {}
    for _s in [CLBase,CCopasiContainer]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CLGraphicalObject, name, value)
    __swig_getmethods__ = {}
    for _s in [CLBase,CCopasiContainer]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CLGraphicalObject, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _COPASI.new_CLGraphicalObject(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _COPASI.delete_CLGraphicalObject
    __del__ = lambda self : None;
    def getKey(self): return _COPASI.CLGraphicalObject_getKey(self)
    def getBoundingBox(self): return _COPASI.CLGraphicalObject_getBoundingBox(self)
    def setBoundingBox(self, *args): return _COPASI.CLGraphicalObject_setBoundingBox(self, *args)
    def getPosition(self): return _COPASI.CLGraphicalObject_getPosition(self)
    def setPosition(self, *args): return _COPASI.CLGraphicalObject_setPosition(self, *args)
    def getX(self): return _COPASI.CLGraphicalObject_getX(self)
    def setX(self, *args): return _COPASI.CLGraphicalObject_setX(self, *args)
    def getY(self): return _COPASI.CLGraphicalObject_getY(self)
    def setY(self, *args): return _COPASI.CLGraphicalObject_setY(self, *args)
    def getDimensions(self): return _COPASI.CLGraphicalObject_getDimensions(self)
    def setDimensions(self, *args): return _COPASI.CLGraphicalObject_setDimensions(self, *args)
    def getWidth(self): return _COPASI.CLGraphicalObject_getWidth(self)
    def setWidth(self, *args): return _COPASI.CLGraphicalObject_setWidth(self, *args)
    def getHeight(self): return _COPASI.CLGraphicalObject_getHeight(self)
    def setHeight(self, *args): return _COPASI.CLGraphicalObject_setHeight(self, *args)
    def getModelObjectKey(self): return _COPASI.CLGraphicalObject_getModelObjectKey(self)
    def setModelObjectKey(self, *args): return _COPASI.CLGraphicalObject_setModelObjectKey(self, *args)
    def getModelObject(self): return _COPASI.CLGraphicalObject_getModelObject(self)
    def getModelObjectName(self): return _COPASI.CLGraphicalObject_getModelObjectName(self)
    def getModelObjectDisplayName(self, regular = True, richtext = False): return _COPASI.CLGraphicalObject_getModelObjectDisplayName(self, regular, richtext)
    def hasValidModelReference(self): return _COPASI.CLGraphicalObject_hasValidModelReference(self)
CLGraphicalObject_swigregister = _COPASI.CLGraphicalObject_swigregister
CLGraphicalObject_swigregister(CLGraphicalObject)

class CLMetabGlyph(CLGraphicalObject):
    __swig_setmethods__ = {}
    for _s in [CLGraphicalObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CLMetabGlyph, name, value)
    __swig_getmethods__ = {}
    for _s in [CLGraphicalObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CLMetabGlyph, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _COPASI.new_CLMetabGlyph(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _COPASI.delete_CLMetabGlyph
    __del__ = lambda self : None;
CLMetabGlyph_swigregister = _COPASI.CLMetabGlyph_swigregister
CLMetabGlyph_swigregister(CLMetabGlyph)

class CLCompartmentGlyph(CLGraphicalObject):
    __swig_setmethods__ = {}
    for _s in [CLGraphicalObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CLCompartmentGlyph, name, value)
    __swig_getmethods__ = {}
    for _s in [CLGraphicalObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CLCompartmentGlyph, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _COPASI.new_CLCompartmentGlyph(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _COPASI.delete_CLCompartmentGlyph
    __del__ = lambda self : None;
CLCompartmentGlyph_swigregister = _COPASI.CLCompartmentGlyph_swigregister
CLCompartmentGlyph_swigregister(CLCompartmentGlyph)

class CLTextGlyph(CLGraphicalObject):
    __swig_setmethods__ = {}
    for _s in [CLGraphicalObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CLTextGlyph, name, value)
    __swig_getmethods__ = {}
    for _s in [CLGraphicalObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CLTextGlyph, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _COPASI.new_CLTextGlyph(*args)
        try: self.this.append(this)
        except: self.this = this
    def getText(self): return _COPASI.CLTextGlyph_getText(self)
    def setText(self, *args): return _COPASI.CLTextGlyph_setText(self, *args)
    def clearText(self): return _COPASI.CLTextGlyph_clearText(self)
    def isTextSet(self): return _COPASI.CLTextGlyph_isTextSet(self)
    def getGraphicalObjectKey(self): return _COPASI.CLTextGlyph_getGraphicalObjectKey(self)
    def getGraphicalObject(self): return _COPASI.CLTextGlyph_getGraphicalObject(self)
    def setGraphicalObjectKey(self, *args): return _COPASI.CLTextGlyph_setGraphicalObjectKey(self, *args)
    __swig_destroy__ = _COPASI.delete_CLTextGlyph
    __del__ = lambda self : None;
CLTextGlyph_swigregister = _COPASI.CLTextGlyph_swigregister
CLTextGlyph_swigregister(CLTextGlyph)

class CLLineSegment(CLBase):
    __swig_setmethods__ = {}
    for _s in [CLBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CLLineSegment, name, value)
    __swig_getmethods__ = {}
    for _s in [CLBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CLLineSegment, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _COPASI.new_CLLineSegment(*args)
        try: self.this.append(this)
        except: self.this = this
    def getStart(self): return _COPASI.CLLineSegment_getStart(self)
    def getEnd(self): return _COPASI.CLLineSegment_getEnd(self)
    def setStart(self, *args): return _COPASI.CLLineSegment_setStart(self, *args)
    def setEnd(self, *args): return _COPASI.CLLineSegment_setEnd(self, *args)
    def getBase1(self): return _COPASI.CLLineSegment_getBase1(self)
    def getBase2(self): return _COPASI.CLLineSegment_getBase2(self)
    def setBase1(self, *args): return _COPASI.CLLineSegment_setBase1(self, *args)
    def setBase2(self, *args): return _COPASI.CLLineSegment_setBase2(self, *args)
    def isBezier(self): return _COPASI.CLLineSegment_isBezier(self)
    def setIsBezier(self, *args): return _COPASI.CLLineSegment_setIsBezier(self, *args)
    def __eq__(self, *args): return _COPASI.CLLineSegment___eq__(self, *args)
    def scale(self, *args): return _COPASI.CLLineSegment_scale(self, *args)
    __swig_destroy__ = _COPASI.delete_CLLineSegment
    __del__ = lambda self : None;
CLLineSegment_swigregister = _COPASI.CLLineSegment_swigregister
CLLineSegment_swigregister(CLLineSegment)

class CLCurve(CLBase):
    __swig_setmethods__ = {}
    for _s in [CLBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CLCurve, name, value)
    __swig_getmethods__ = {}
    for _s in [CLBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CLCurve, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _COPASI.new_CLCurve(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _COPASI.delete_CLCurve
    __del__ = lambda self : None;
    def getCurveSegments(self): return _COPASI.CLCurve_getCurveSegments(self)
    def getSegmentAt(self, *args): return _COPASI.CLCurve_getSegmentAt(self, *args)
    def getNumCurveSegments(self): return _COPASI.CLCurve_getNumCurveSegments(self)
    def clear(self): return _COPASI.CLCurve_clear(self)
    def addCurveSegment(self, *args): return _COPASI.CLCurve_addCurveSegment(self, *args)
    def isContinuous(self): return _COPASI.CLCurve_isContinuous(self)
    def getListOfPoints(self): return _COPASI.CLCurve_getListOfPoints(self)
    def __eq__(self, *args): return _COPASI.CLCurve___eq__(self, *args)
    def scale(self, *args): return _COPASI.CLCurve_scale(self, *args)
    def calculateBoundingBox(self): return _COPASI.CLCurve_calculateBoundingBox(self)
CLCurve_swigregister = _COPASI.CLCurve_swigregister
CLCurve_swigregister(CLCurve)

class CLMetabReferenceGlyph(CLGraphicalObject):
    __swig_setmethods__ = {}
    for _s in [CLGraphicalObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CLMetabReferenceGlyph, name, value)
    __swig_getmethods__ = {}
    for _s in [CLGraphicalObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CLMetabReferenceGlyph, name)
    __repr__ = _swig_repr
    UNDEFINED = _COPASI.CLMetabReferenceGlyph_UNDEFINED
    SUBSTRATE = _COPASI.CLMetabReferenceGlyph_SUBSTRATE
    PRODUCT = _COPASI.CLMetabReferenceGlyph_PRODUCT
    SIDESUBSTRATE = _COPASI.CLMetabReferenceGlyph_SIDESUBSTRATE
    SIDEPRODUCT = _COPASI.CLMetabReferenceGlyph_SIDEPRODUCT
    MODIFIER = _COPASI.CLMetabReferenceGlyph_MODIFIER
    ACTIVATOR = _COPASI.CLMetabReferenceGlyph_ACTIVATOR
    INHIBITOR = _COPASI.CLMetabReferenceGlyph_INHIBITOR
    def __init__(self, *args): 
        this = _COPASI.new_CLMetabReferenceGlyph(*args)
        try: self.this.append(this)
        except: self.this = this
    def getMetabGlyphKey(self): return _COPASI.CLMetabReferenceGlyph_getMetabGlyphKey(self)
    def getMetabGlyph(self): return _COPASI.CLMetabReferenceGlyph_getMetabGlyph(self)
    def setMetabGlyphKey(self, *args): return _COPASI.CLMetabReferenceGlyph_setMetabGlyphKey(self, *args)
    def getCurve(self): return _COPASI.CLMetabReferenceGlyph_getCurve(self)
    def setCurve(self, *args): return _COPASI.CLMetabReferenceGlyph_setCurve(self, *args)
    def getRole(self): return _COPASI.CLMetabReferenceGlyph_getRole(self)
    def setRole(self, *args): return _COPASI.CLMetabReferenceGlyph_setRole(self, *args)
    def getRoleDisplayName(self): return _COPASI.CLMetabReferenceGlyph_getRoleDisplayName(self)
    __swig_destroy__ = _COPASI.delete_CLMetabReferenceGlyph
    __del__ = lambda self : None;
CLMetabReferenceGlyph_swigregister = _COPASI.CLMetabReferenceGlyph_swigregister
CLMetabReferenceGlyph_swigregister(CLMetabReferenceGlyph)

class CLReactionGlyph(CLGraphicalObject):
    __swig_setmethods__ = {}
    for _s in [CLGraphicalObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CLReactionGlyph, name, value)
    __swig_getmethods__ = {}
    for _s in [CLGraphicalObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CLReactionGlyph, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _COPASI.new_CLReactionGlyph(*args)
        try: self.this.append(this)
        except: self.this = this
    def getListOfMetabReferenceGlyphs(self): return _COPASI.CLReactionGlyph_getListOfMetabReferenceGlyphs(self)
    def addMetabReferenceGlyph(self, *args): return _COPASI.CLReactionGlyph_addMetabReferenceGlyph(self, *args)
    def getCurve(self): return _COPASI.CLReactionGlyph_getCurve(self)
    def setCurve(self, *args): return _COPASI.CLReactionGlyph_setCurve(self, *args)
    __swig_destroy__ = _COPASI.delete_CLReactionGlyph
    __del__ = lambda self : None;
CLReactionGlyph_swigregister = _COPASI.CLReactionGlyph_swigregister
CLReactionGlyph_swigregister(CLReactionGlyph)

class MetabReferenceGlyphVector(CCopasiContainer):
    __swig_setmethods__ = {}
    for _s in [CCopasiContainer]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MetabReferenceGlyphVector, name, value)
    __swig_getmethods__ = {}
    for _s in [CCopasiContainer]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MetabReferenceGlyphVector, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _COPASI.delete_MetabReferenceGlyphVector
    __del__ = lambda self : None;
    def begin(self, *args): return _COPASI.MetabReferenceGlyphVector_begin(self, *args)
    def end(self, *args): return _COPASI.MetabReferenceGlyphVector_end(self, *args)
    def cleanup(self): return _COPASI.MetabReferenceGlyphVector_cleanup(self)
    def addCopy(self, *args): return _COPASI.MetabReferenceGlyphVector_addCopy(self, *args)
    def swap(self, *args): return _COPASI.MetabReferenceGlyphVector_swap(self, *args)
    def add(self, *args): return _COPASI.MetabReferenceGlyphVector_add(self, *args)
    def remove(self, *args): return _COPASI.MetabReferenceGlyphVector_remove(self, *args)
    def getObject(self, *args): return _COPASI.MetabReferenceGlyphVector_getObject(self, *args)
    def size(self): return _COPASI.MetabReferenceGlyphVector_size(self)
    def clear(self): return _COPASI.MetabReferenceGlyphVector_clear(self)
    def getIndex(self, *args): return _COPASI.MetabReferenceGlyphVector_getIndex(self, *args)
    def get(self, *args): return _COPASI.MetabReferenceGlyphVector_get(self, *args)
    def addAndOwn(self, *args): return _COPASI.MetabReferenceGlyphVector_addAndOwn(self, *args)
    def __len__(self): return _COPASI.MetabReferenceGlyphVector___len__(self)
MetabReferenceGlyphVector_swigregister = _COPASI.MetabReferenceGlyphVector_swigregister
MetabReferenceGlyphVector_swigregister(MetabReferenceGlyphVector)

class CompartmentGlyphVector(CCopasiContainer):
    __swig_setmethods__ = {}
    for _s in [CCopasiContainer]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CompartmentGlyphVector, name, value)
    __swig_getmethods__ = {}
    for _s in [CCopasiContainer]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CompartmentGlyphVector, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _COPASI.delete_CompartmentGlyphVector
    __del__ = lambda self : None;
    def begin(self, *args): return _COPASI.CompartmentGlyphVector_begin(self, *args)
    def end(self, *args): return _COPASI.CompartmentGlyphVector_end(self, *args)
    def cleanup(self): return _COPASI.CompartmentGlyphVector_cleanup(self)
    def addCopy(self, *args): return _COPASI.CompartmentGlyphVector_addCopy(self, *args)
    def swap(self, *args): return _COPASI.CompartmentGlyphVector_swap(self, *args)
    def add(self, *args): return _COPASI.CompartmentGlyphVector_add(self, *args)
    def remove(self, *args): return _COPASI.CompartmentGlyphVector_remove(self, *args)
    def getObject(self, *args): return _COPASI.CompartmentGlyphVector_getObject(self, *args)
    def size(self): return _COPASI.CompartmentGlyphVector_size(self)
    def clear(self): return _COPASI.CompartmentGlyphVector_clear(self)
    def getIndex(self, *args): return _COPASI.CompartmentGlyphVector_getIndex(self, *args)
    def get(self, *args): return _COPASI.CompartmentGlyphVector_get(self, *args)
    def addAndOwn(self, *args): return _COPASI.CompartmentGlyphVector_addAndOwn(self, *args)
    def __len__(self): return _COPASI.CompartmentGlyphVector___len__(self)
CompartmentGlyphVector_swigregister = _COPASI.CompartmentGlyphVector_swigregister
CompartmentGlyphVector_swigregister(CompartmentGlyphVector)

class MetabGlyphVector(CCopasiContainer):
    __swig_setmethods__ = {}
    for _s in [CCopasiContainer]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MetabGlyphVector, name, value)
    __swig_getmethods__ = {}
    for _s in [CCopasiContainer]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MetabGlyphVector, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _COPASI.delete_MetabGlyphVector
    __del__ = lambda self : None;
    def begin(self, *args): return _COPASI.MetabGlyphVector_begin(self, *args)
    def end(self, *args): return _COPASI.MetabGlyphVector_end(self, *args)
    def cleanup(self): return _COPASI.MetabGlyphVector_cleanup(self)
    def addCopy(self, *args): return _COPASI.MetabGlyphVector_addCopy(self, *args)
    def swap(self, *args): return _COPASI.MetabGlyphVector_swap(self, *args)
    def add(self, *args): return _COPASI.MetabGlyphVector_add(self, *args)
    def remove(self, *args): return _COPASI.MetabGlyphVector_remove(self, *args)
    def getObject(self, *args): return _COPASI.MetabGlyphVector_getObject(self, *args)
    def size(self): return _COPASI.MetabGlyphVector_size(self)
    def clear(self): return _COPASI.MetabGlyphVector_clear(self)
    def getIndex(self, *args): return _COPASI.MetabGlyphVector_getIndex(self, *args)
    def get(self, *args): return _COPASI.MetabGlyphVector_get(self, *args)
    def addAndOwn(self, *args): return _COPASI.MetabGlyphVector_addAndOwn(self, *args)
    def __len__(self): return _COPASI.MetabGlyphVector___len__(self)
MetabGlyphVector_swigregister = _COPASI.MetabGlyphVector_swigregister
MetabGlyphVector_swigregister(MetabGlyphVector)

class ReactionGlyphVector(CCopasiContainer):
    __swig_setmethods__ = {}
    for _s in [CCopasiContainer]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReactionGlyphVector, name, value)
    __swig_getmethods__ = {}
    for _s in [CCopasiContainer]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ReactionGlyphVector, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _COPASI.delete_ReactionGlyphVector
    __del__ = lambda self : None;
    def begin(self, *args): return _COPASI.ReactionGlyphVector_begin(self, *args)
    def end(self, *args): return _COPASI.ReactionGlyphVector_end(self, *args)
    def cleanup(self): return _COPASI.ReactionGlyphVector_cleanup(self)
    def addCopy(self, *args): return _COPASI.ReactionGlyphVector_addCopy(self, *args)
    def swap(self, *args): return _COPASI.ReactionGlyphVector_swap(self, *args)
    def add(self, *args): return _COPASI.ReactionGlyphVector_add(self, *args)
    def remove(self, *args): return _COPASI.ReactionGlyphVector_remove(self, *args)
    def getObject(self, *args): return _COPASI.ReactionGlyphVector_getObject(self, *args)
    def size(self): return _COPASI.ReactionGlyphVector_size(self)
    def clear(self): return _COPASI.ReactionGlyphVector_clear(self)
    def getIndex(self, *args): return _COPASI.ReactionGlyphVector_getIndex(self, *args)
    def get(self, *args): return _COPASI.ReactionGlyphVector_get(self, *args)
    def addAndOwn(self, *args): return _COPASI.ReactionGlyphVector_addAndOwn(self, *args)
    def __len__(self): return _COPASI.ReactionGlyphVector___len__(self)
ReactionGlyphVector_swigregister = _COPASI.ReactionGlyphVector_swigregister
ReactionGlyphVector_swigregister(ReactionGlyphVector)

class TextGlyphVector(CCopasiContainer):
    __swig_setmethods__ = {}
    for _s in [CCopasiContainer]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TextGlyphVector, name, value)
    __swig_getmethods__ = {}
    for _s in [CCopasiContainer]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TextGlyphVector, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _COPASI.delete_TextGlyphVector
    __del__ = lambda self : None;
    def begin(self, *args): return _COPASI.TextGlyphVector_begin(self, *args)
    def end(self, *args): return _COPASI.TextGlyphVector_end(self, *args)
    def cleanup(self): return _COPASI.TextGlyphVector_cleanup(self)
    def addCopy(self, *args): return _COPASI.TextGlyphVector_addCopy(self, *args)
    def swap(self, *args): return _COPASI.TextGlyphVector_swap(self, *args)
    def add(self, *args): return _COPASI.TextGlyphVector_add(self, *args)
    def remove(self, *args): return _COPASI.TextGlyphVector_remove(self, *args)
    def getObject(self, *args): return _COPASI.TextGlyphVector_getObject(self, *args)
    def size(self): return _COPASI.TextGlyphVector_size(self)
    def clear(self): return _COPASI.TextGlyphVector_clear(self)
    def getIndex(self, *args): return _COPASI.TextGlyphVector_getIndex(self, *args)
    def get(self, *args): return _COPASI.TextGlyphVector_get(self, *args)
    def addAndOwn(self, *args): return _COPASI.TextGlyphVector_addAndOwn(self, *args)
    def __len__(self): return _COPASI.TextGlyphVector___len__(self)
TextGlyphVector_swigregister = _COPASI.TextGlyphVector_swigregister
TextGlyphVector_swigregister(TextGlyphVector)

class GraphicalObjectVector(CCopasiContainer):
    __swig_setmethods__ = {}
    for _s in [CCopasiContainer]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GraphicalObjectVector, name, value)
    __swig_getmethods__ = {}
    for _s in [CCopasiContainer]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GraphicalObjectVector, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _COPASI.delete_GraphicalObjectVector
    __del__ = lambda self : None;
    def begin(self, *args): return _COPASI.GraphicalObjectVector_begin(self, *args)
    def end(self, *args): return _COPASI.GraphicalObjectVector_end(self, *args)
    def cleanup(self): return _COPASI.GraphicalObjectVector_cleanup(self)
    def addCopy(self, *args): return _COPASI.GraphicalObjectVector_addCopy(self, *args)
    def swap(self, *args): return _COPASI.GraphicalObjectVector_swap(self, *args)
    def add(self, *args): return _COPASI.GraphicalObjectVector_add(self, *args)
    def remove(self, *args): return _COPASI.GraphicalObjectVector_remove(self, *args)
    def getObject(self, *args): return _COPASI.GraphicalObjectVector_getObject(self, *args)
    def size(self): return _COPASI.GraphicalObjectVector_size(self)
    def clear(self): return _COPASI.GraphicalObjectVector_clear(self)
    def getIndex(self, *args): return _COPASI.GraphicalObjectVector_getIndex(self, *args)
    def get(self, *args): return _COPASI.GraphicalObjectVector_get(self, *args)
    def addAndOwn(self, *args): return _COPASI.GraphicalObjectVector_addAndOwn(self, *args)
    def __len__(self): return _COPASI.GraphicalObjectVector___len__(self)
GraphicalObjectVector_swigregister = _COPASI.GraphicalObjectVector_swigregister
GraphicalObjectVector_swigregister(GraphicalObjectVector)

class CLayout(CLBase,CCopasiContainer):
    __swig_setmethods__ = {}
    for _s in [CLBase,CCopasiContainer]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CLayout, name, value)
    __swig_getmethods__ = {}
    for _s in [CLBase,CCopasiContainer]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CLayout, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _COPASI.new_CLayout(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _COPASI.delete_CLayout
    __del__ = lambda self : None;
    def getKey(self): return _COPASI.CLayout_getKey(self)
    def getDimensions(self): return _COPASI.CLayout_getDimensions(self)
    def setDimensions(self, *args): return _COPASI.CLayout_setDimensions(self, *args)
    def getListOfCompartmentGlyphs(self): return _COPASI.CLayout_getListOfCompartmentGlyphs(self)
    def addCompartmentGlyph(self, *args): return _COPASI.CLayout_addCompartmentGlyph(self, *args)
    def getListOfMetaboliteGlyphs(self): return _COPASI.CLayout_getListOfMetaboliteGlyphs(self)
    def addMetaboliteGlyph(self, *args): return _COPASI.CLayout_addMetaboliteGlyph(self, *args)
    def getListOfReactionGlyphs(self): return _COPASI.CLayout_getListOfReactionGlyphs(self)
    def addReactionGlyph(self, *args): return _COPASI.CLayout_addReactionGlyph(self, *args)
    def getListOfTextGlyphs(self): return _COPASI.CLayout_getListOfTextGlyphs(self)
    def addTextGlyph(self, *args): return _COPASI.CLayout_addTextGlyph(self, *args)
    def getListOfGraphicalObjects(self): return _COPASI.CLayout_getListOfGraphicalObjects(self)
    def addGraphicalObject(self, *args): return _COPASI.CLayout_addGraphicalObject(self, *args)
    def scale(self, *args): return _COPASI.CLayout_scale(self, *args)
CLayout_swigregister = _COPASI.CLayout_swigregister
CLayout_swigregister(CLayout)

class LayoutVector(CCopasiContainer):
    __swig_setmethods__ = {}
    for _s in [CCopasiContainer]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LayoutVector, name, value)
    __swig_getmethods__ = {}
    for _s in [CCopasiContainer]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, LayoutVector, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _COPASI.delete_LayoutVector
    __del__ = lambda self : None;
    def begin(self, *args): return _COPASI.LayoutVector_begin(self, *args)
    def end(self, *args): return _COPASI.LayoutVector_end(self, *args)
    def cleanup(self): return _COPASI.LayoutVector_cleanup(self)
    def addCopy(self, *args): return _COPASI.LayoutVector_addCopy(self, *args)
    def swap(self, *args): return _COPASI.LayoutVector_swap(self, *args)
    def add(self, *args): return _COPASI.LayoutVector_add(self, *args)
    def remove(self, *args): return _COPASI.LayoutVector_remove(self, *args)
    def getObject(self, *args): return _COPASI.LayoutVector_getObject(self, *args)
    def size(self): return _COPASI.LayoutVector_size(self)
    def clear(self): return _COPASI.LayoutVector_clear(self)
    def getIndex(self, *args): return _COPASI.LayoutVector_getIndex(self, *args)
    def get(self, *args): return _COPASI.LayoutVector_get(self, *args)
    def addAndOwn(self, *args): return _COPASI.LayoutVector_addAndOwn(self, *args)
    def __len__(self): return _COPASI.LayoutVector___len__(self)
LayoutVector_swigregister = _COPASI.LayoutVector_swigregister
LayoutVector_swigregister(LayoutVector)

class CListOfLayouts(LayoutVector):
    __swig_setmethods__ = {}
    for _s in [LayoutVector]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CListOfLayouts, name, value)
    __swig_getmethods__ = {}
    for _s in [LayoutVector]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CListOfLayouts, name)
    __repr__ = _swig_repr
    def __init__(self, name = "ListOfLayouts", pParent = None): 
        this = _COPASI.new_CListOfLayouts(name, pParent)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _COPASI.delete_CListOfLayouts
    __del__ = lambda self : None;
    def getKey(self): return _COPASI.CListOfLayouts_getKey(self)
    def addLayout(self, *args): return _COPASI.CListOfLayouts_addLayout(self, *args)
CListOfLayouts_swigregister = _COPASI.CListOfLayouts_swigregister
CListOfLayouts_swigregister(CListOfLayouts)

class CBiologicalDescription(CCopasiContainer):
    __swig_setmethods__ = {}
    for _s in [CCopasiContainer]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CBiologicalDescription, name, value)
    __swig_getmethods__ = {}
    for _s in [CCopasiContainer]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CBiologicalDescription, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _COPASI.new_CBiologicalDescription(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _COPASI.delete_CBiologicalDescription
    __del__ = lambda self : None;
    def getTriplet(self): return _COPASI.CBiologicalDescription_getTriplet(self)
    def getKey(self): return _COPASI.CBiologicalDescription_getKey(self)
    def getPredicate(self): return _COPASI.CBiologicalDescription_getPredicate(self)
    def getResource(self): return _COPASI.CBiologicalDescription_getResource(self)
    def getId(self): return _COPASI.CBiologicalDescription_getId(self)
    def getURI(self): return _COPASI.CBiologicalDescription_getURI(self)
    def setPredicate(self, *args): return _COPASI.CBiologicalDescription_setPredicate(self, *args)
    def setResource(self, *args): return _COPASI.CBiologicalDescription_setResource(self, *args)
    def setId(self, *args): return _COPASI.CBiologicalDescription_setId(self, *args)
    def clearInvalidEntries(self): return _COPASI.CBiologicalDescription_clearInvalidEntries(self)
CBiologicalDescription_swigregister = _COPASI.CBiologicalDescription_swigregister
CBiologicalDescription_swigregister(CBiologicalDescription)

class CReference(CCopasiContainer):
    __swig_setmethods__ = {}
    for _s in [CCopasiContainer]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CReference, name, value)
    __swig_getmethods__ = {}
    for _s in [CCopasiContainer]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CReference, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _COPASI.new_CReference(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _COPASI.delete_CReference
    __del__ = lambda self : None;
    def getTriplet(self): return _COPASI.CReference_getTriplet(self)
    def getKey(self): return _COPASI.CReference_getKey(self)
    def getResource(self): return _COPASI.CReference_getResource(self)
    def getId(self): return _COPASI.CReference_getId(self)
    def getDescription(self): return _COPASI.CReference_getDescription(self)
    def getURI(self): return _COPASI.CReference_getURI(self)
    def setResource(self, *args): return _COPASI.CReference_setResource(self, *args)
    def setId(self, *args): return _COPASI.CReference_setId(self, *args)
    def setDescription(self, *args): return _COPASI.CReference_setDescription(self, *args)
    def clearInvalidEntries(self): return _COPASI.CReference_clearInvalidEntries(self)
CReference_swigregister = _COPASI.CReference_swigregister
CReference_swigregister(CReference)

class CCreator(CCopasiContainer):
    __swig_setmethods__ = {}
    for _s in [CCopasiContainer]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CCreator, name, value)
    __swig_getmethods__ = {}
    for _s in [CCopasiContainer]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CCreator, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _COPASI.new_CCreator(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _COPASI.delete_CCreator
    __del__ = lambda self : None;
    def getTriplet(self): return _COPASI.CCreator_getTriplet(self)
    def getKey(self): return _COPASI.CCreator_getKey(self)
    def getFamilyName(self): return _COPASI.CCreator_getFamilyName(self)
    def getGivenName(self): return _COPASI.CCreator_getGivenName(self)
    def getEmail(self): return _COPASI.CCreator_getEmail(self)
    def getORG(self): return _COPASI.CCreator_getORG(self)
    def setFamilyName(self, *args): return _COPASI.CCreator_setFamilyName(self, *args)
    def setGivenName(self, *args): return _COPASI.CCreator_setGivenName(self, *args)
    def setEmail(self, *args): return _COPASI.CCreator_setEmail(self, *args)
    def setORG(self, *args): return _COPASI.CCreator_setORG(self, *args)
CCreator_swigregister = _COPASI.CCreator_swigregister
CCreator_swigregister(CCreator)

class CModification(CCopasiContainer):
    __swig_setmethods__ = {}
    for _s in [CCopasiContainer]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CModification, name, value)
    __swig_getmethods__ = {}
    for _s in [CCopasiContainer]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CModification, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _COPASI.new_CModification(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _COPASI.delete_CModification
    __del__ = lambda self : None;
    def getTriplet(self): return _COPASI.CModification_getTriplet(self)
    def getKey(self): return _COPASI.CModification_getKey(self)
    def setDate(self, *args): return _COPASI.CModification_setDate(self, *args)
    def getDate(self): return _COPASI.CModification_getDate(self)
CModification_swigregister = _COPASI.CModification_swigregister
CModification_swigregister(CModification)

class CMIRIAMInfo(CCopasiContainer):
    __swig_setmethods__ = {}
    for _s in [CCopasiContainer]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CMIRIAMInfo, name, value)
    __swig_getmethods__ = {}
    for _s in [CCopasiContainer]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CMIRIAMInfo, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _COPASI.new_CMIRIAMInfo()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _COPASI.delete_CMIRIAMInfo
    __del__ = lambda self : None;
    def load(self, key = ""): return _COPASI.CMIRIAMInfo_load(self, key)
    def save(self): return _COPASI.CMIRIAMInfo_save(self)
    def getRDFGraph(self): return _COPASI.CMIRIAMInfo_getRDFGraph(self)
    def getCreators(self): return _COPASI.CMIRIAMInfo_getCreators(self)
    def createCreator(self, *args): return _COPASI.CMIRIAMInfo_createCreator(self, *args)
    def removeCreator(self, *args): return _COPASI.CMIRIAMInfo_removeCreator(self, *args)
    def loadCreators(self): return _COPASI.CMIRIAMInfo_loadCreators(self)
    def getReferences(self): return _COPASI.CMIRIAMInfo_getReferences(self)
    def createReference(self, *args): return _COPASI.CMIRIAMInfo_createReference(self, *args)
    def removeReference(self, *args): return _COPASI.CMIRIAMInfo_removeReference(self, *args)
    def loadReferences(self): return _COPASI.CMIRIAMInfo_loadReferences(self)
    def getCreatedDT(self): return _COPASI.CMIRIAMInfo_getCreatedDT(self)
    def setCreatedDT(self, *args): return _COPASI.CMIRIAMInfo_setCreatedDT(self, *args)
    def getModifications(self): return _COPASI.CMIRIAMInfo_getModifications(self)
    def createModification(self, *args): return _COPASI.CMIRIAMInfo_createModification(self, *args)
    def removeModification(self, *args): return _COPASI.CMIRIAMInfo_removeModification(self, *args)
    def loadModifications(self): return _COPASI.CMIRIAMInfo_loadModifications(self)
    def getBiologicalDescriptions(self): return _COPASI.CMIRIAMInfo_getBiologicalDescriptions(self)
    def createBiologicalDescription(self): return _COPASI.CMIRIAMInfo_createBiologicalDescription(self)
    def removeBiologicalDescription(self, *args): return _COPASI.CMIRIAMInfo_removeBiologicalDescription(self, *args)
    def loadBiologicalDescriptions(self): return _COPASI.CMIRIAMInfo_loadBiologicalDescriptions(self)
    def getKey(self): return _COPASI.CMIRIAMInfo_getKey(self)
CMIRIAMInfo_swigregister = _COPASI.CMIRIAMInfo_swigregister
CMIRIAMInfo_swigregister(CMIRIAMInfo)

class CSensTask(CCopasiTask):
    __swig_setmethods__ = {}
    for _s in [CCopasiTask]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CSensTask, name, value)
    __swig_getmethods__ = {}
    for _s in [CCopasiTask]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CSensTask, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _COPASI.new_CSensTask(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _COPASI.delete_CSensTask
    __del__ = lambda self : None;
    def createMethod(self, *args): return _COPASI.CSensTask_createMethod(self, *args)
    def updateMatrices(self): return _COPASI.CSensTask_updateMatrices(self)
    def restore(self): return _COPASI.CSensTask_restore(self)
CSensTask_swigregister = _COPASI.CSensTask_swigregister
CSensTask_swigregister(CSensTask)

class CSensItem:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CSensItem, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CSensItem, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _COPASI.new_CSensItem()
        try: self.this.append(this)
        except: self.this = this
    def isSingleObject(self): return _COPASI.CSensItem_isSingleObject(self)
    def setSingleObjectCN(self, *args): return _COPASI.CSensItem_setSingleObjectCN(self, *args)
    def getSingleObjectCN(self): return _COPASI.CSensItem_getSingleObjectCN(self)
    def getSingleObjectDisplayName(self, *args): return _COPASI.CSensItem_getSingleObjectDisplayName(self, *args)
    def setListType(self, *args): return _COPASI.CSensItem_setListType(self, *args)
    def getListType(self): return _COPASI.CSensItem_getListType(self)
    def getListTypeDisplayName(self): return _COPASI.CSensItem_getListTypeDisplayName(self)
    def getVariablesPointerList(self, *args): return _COPASI.CSensItem_getVariablesPointerList(self, *args)
    def _print(self, *args): return _COPASI.CSensItem__print(self, *args)
    __swig_destroy__ = _COPASI.delete_CSensItem
    __del__ = lambda self : None;
CSensItem_swigregister = _COPASI.CSensItem_swigregister
CSensItem_swigregister(CSensItem)

class CSensProblem(CCopasiProblem):
    __swig_setmethods__ = {}
    for _s in [CCopasiProblem]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CSensProblem, name, value)
    __swig_getmethods__ = {}
    for _s in [CCopasiProblem]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CSensProblem, name)
    __repr__ = _swig_repr
    Evaluation = _COPASI.CSensProblem_Evaluation
    SteadyState = _COPASI.CSensProblem_SteadyState
    TimeSeries = _COPASI.CSensProblem_TimeSeries
    ParameterEstimation = _COPASI.CSensProblem_ParameterEstimation
    Optimization = _COPASI.CSensProblem_Optimization
    __swig_getmethods__["getPossibleTargetFunctions"] = lambda x: _COPASI.CSensProblem_getPossibleTargetFunctions
    __swig_getmethods__["getPossibleVariables"] = lambda x: _COPASI.CSensProblem_getPossibleVariables
    def __init__(self, *args): 
        this = _COPASI.new_CSensProblem(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _COPASI.delete_CSensProblem
    __del__ = lambda self : None;
    def setSubTaskType(self, *args): return _COPASI.CSensProblem_setSubTaskType(self, *args)
    def getSubTaskType(self): return _COPASI.CSensProblem_getSubTaskType(self)
    def getTargetFunctions(self): return _COPASI.CSensProblem_getTargetFunctions(self)
    def changeTargetFunctions(self, *args): return _COPASI.CSensProblem_changeTargetFunctions(self, *args)
    def getNumberOfVariables(self): return _COPASI.CSensProblem_getNumberOfVariables(self)
    def getVariables(self, *args): return _COPASI.CSensProblem_getVariables(self, *args)
    def addVariables(self, *args): return _COPASI.CSensProblem_addVariables(self, *args)
    def changeVariables(self, *args): return _COPASI.CSensProblem_changeVariables(self, *args)
    def removeVariables(self, *args): return _COPASI.CSensProblem_removeVariables(self, *args)
    def getResult(self): return _COPASI.CSensProblem_getResult(self)
    def getResultAnnotated(self): return _COPASI.CSensProblem_getResultAnnotated(self)
    def getScaledResult(self): return _COPASI.CSensProblem_getScaledResult(self)
    def getScaledResultAnnotated(self): return _COPASI.CSensProblem_getScaledResultAnnotated(self)
    def getCollapsedResult(self): return _COPASI.CSensProblem_getCollapsedResult(self)
    def getCollapsedResultAnnotated(self): return _COPASI.CSensProblem_getCollapsedResultAnnotated(self)
    def collapsRequested(self): return _COPASI.CSensProblem_collapsRequested(self)
CSensProblem_swigregister = _COPASI.CSensProblem_swigregister
CSensProblem_swigregister(CSensProblem)

def CSensProblem_getPossibleTargetFunctions(*args):
  return _COPASI.CSensProblem_getPossibleTargetFunctions(*args)
CSensProblem_getPossibleTargetFunctions = _COPASI.CSensProblem_getPossibleTargetFunctions

def CSensProblem_getPossibleVariables(*args):
  return _COPASI.CSensProblem_getPossibleVariables(*args)
CSensProblem_getPossibleVariables = _COPASI.CSensProblem_getPossibleVariables

class CSensMethodLocalData:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CSensMethodLocalData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CSensMethodLocalData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["tmp1"] = _COPASI.CSensMethodLocalData_tmp1_set
    __swig_getmethods__["tmp1"] = _COPASI.CSensMethodLocalData_tmp1_get
    __swig_setmethods__["tmp2"] = _COPASI.CSensMethodLocalData_tmp2_set
    __swig_getmethods__["tmp2"] = _COPASI.CSensMethodLocalData_tmp2_get
    __swig_setmethods__["variables"] = _COPASI.CSensMethodLocalData_variables_set
    __swig_getmethods__["variables"] = _COPASI.CSensMethodLocalData_variables_get
    __swig_setmethods__["index"] = _COPASI.CSensMethodLocalData_index_set
    __swig_getmethods__["index"] = _COPASI.CSensMethodLocalData_index_get
    def __init__(self): 
        this = _COPASI.new_CSensMethodLocalData()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _COPASI.delete_CSensMethodLocalData
    __del__ = lambda self : None;
CSensMethodLocalData_swigregister = _COPASI.CSensMethodLocalData_swigregister
CSensMethodLocalData_swigregister(CSensMethodLocalData)

class CSensMethod(CCopasiMethod):
    __swig_setmethods__ = {}
    for _s in [CCopasiMethod]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CSensMethod, name, value)
    __swig_getmethods__ = {}
    for _s in [CCopasiMethod]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CSensMethod, name)
    __repr__ = _swig_repr
    __swig_getmethods__["createMethod"] = lambda x: _COPASI.CSensMethod_createMethod
    def __init__(self, *args): 
        this = _COPASI.new_CSensMethod(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _COPASI.delete_CSensMethod
    __del__ = lambda self : None;
    def process(self, *args): return _COPASI.CSensMethod_process(self, *args)
    def initialize(self, *args): return _COPASI.CSensMethod_initialize(self, *args)
    def restore(self, *args): return _COPASI.CSensMethod_restore(self, *args)
    def isValidProblem(self, *args): return _COPASI.CSensMethod_isValidProblem(self, *args)
    def getNumberOfSubtaskCalculations(self): return _COPASI.CSensMethod_getNumberOfSubtaskCalculations(self)
CSensMethod_swigregister = _COPASI.CSensMethod_swigregister
CSensMethod_swigregister(CSensMethod)

def CSensMethod_createMethod(*args):
  return _COPASI.CSensMethod_createMethod(*args)
CSensMethod_createMethod = _COPASI.CSensMethod_createMethod

class CMCATask(CCopasiTask):
    __swig_setmethods__ = {}
    for _s in [CCopasiTask]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CMCATask, name, value)
    __swig_getmethods__ = {}
    for _s in [CCopasiTask]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CMCATask, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _COPASI.new_CMCATask(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _COPASI.delete_CMCATask
    __del__ = lambda self : None;
    def createMethod(self, *args): return _COPASI.CMCATask_createMethod(self, *args)
    def updateMatrices(self): return _COPASI.CMCATask_updateMatrices(self)
    def restore(self): return _COPASI.CMCATask_restore(self)
CMCATask_swigregister = _COPASI.CMCATask_swigregister
CMCATask_swigregister(CMCATask)

class CMCAMethod(CCopasiMethod):
    __swig_setmethods__ = {}
    for _s in [CCopasiMethod]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CMCAMethod, name, value)
    __swig_getmethods__ = {}
    for _s in [CCopasiMethod]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CMCAMethod, name)
    __repr__ = _swig_repr
    __swig_getmethods__["createMethod"] = lambda x: _COPASI.CMCAMethod_createMethod
    def __init__(self, *args): 
        this = _COPASI.new_CMCAMethod(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _COPASI.delete_CMCAMethod
    __del__ = lambda self : None;
    def elevateChildren(self): return _COPASI.CMCAMethod_elevateChildren(self)
    def getUnscaledElasticities(self): return _COPASI.CMCAMethod_getUnscaledElasticities(self)
    def calculateUnscaledElasticities(self, *args): return _COPASI.CMCAMethod_calculateUnscaledElasticities(self, *args)
    def getUnscaledConcentrationCC(self): return _COPASI.CMCAMethod_getUnscaledConcentrationCC(self)
    def calculateUnscaledConcentrationCC(self): return _COPASI.CMCAMethod_calculateUnscaledConcentrationCC(self)
    def getUnscaledFluxCC(self): return _COPASI.CMCAMethod_getUnscaledFluxCC(self)
    def calculateUnscaledFluxCC(self, *args): return _COPASI.CMCAMethod_calculateUnscaledFluxCC(self, *args)
    def getScaledElasticities(self): return _COPASI.CMCAMethod_getScaledElasticities(self)
    def getScaledConcentrationCC(self): return _COPASI.CMCAMethod_getScaledConcentrationCC(self)
    def getScaledFluxCC(self): return _COPASI.CMCAMethod_getScaledFluxCC(self)
    def getUnscaledElasticitiesAnn(self): return _COPASI.CMCAMethod_getUnscaledElasticitiesAnn(self)
    def getScaledElasticitiesAnn(self): return _COPASI.CMCAMethod_getScaledElasticitiesAnn(self)
    def getUnscaledConcentrationCCAnn(self): return _COPASI.CMCAMethod_getUnscaledConcentrationCCAnn(self)
    def getScaledConcentrationCCAnn(self): return _COPASI.CMCAMethod_getScaledConcentrationCCAnn(self)
    def getUnscaledFluxCCAnn(self): return _COPASI.CMCAMethod_getUnscaledFluxCCAnn(self)
    def getScaledFluxCCAnn(self): return _COPASI.CMCAMethod_getScaledFluxCCAnn(self)
    def resizeAllMatrices(self): return _COPASI.CMCAMethod_resizeAllMatrices(self)
    def scaleMCA(self, *args): return _COPASI.CMCAMethod_scaleMCA(self, *args)
    def setModel(self, *args): return _COPASI.CMCAMethod_setModel(self, *args)
    def getModel(self): return _COPASI.CMCAMethod_getModel(self)
    def CalculateMCA(self, *args): return _COPASI.CMCAMethod_CalculateMCA(self, *args)
    def process(self): return _COPASI.CMCAMethod_process(self)
    def setSteadyStateStatus(self, *args): return _COPASI.CMCAMethod_setSteadyStateStatus(self, *args)
    def getSteadyStateStatus(self): return _COPASI.CMCAMethod_getSteadyStateStatus(self)
    def setFactor(self, *args): return _COPASI.CMCAMethod_setFactor(self, *args)
    def setSteadyStateResolution(self, *args): return _COPASI.CMCAMethod_setSteadyStateResolution(self, *args)
    def isValidProblem(self, *args): return _COPASI.CMCAMethod_isValidProblem(self, *args)
CMCAMethod_swigregister = _COPASI.CMCAMethod_swigregister
CMCAMethod_swigregister(CMCAMethod)

def CMCAMethod_createMethod(*args):
  return _COPASI.CMCAMethod_createMethod(*args)
CMCAMethod_createMethod = _COPASI.CMCAMethod_createMethod

class CMCAProblem(CCopasiProblem):
    __swig_setmethods__ = {}
    for _s in [CCopasiProblem]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CMCAProblem, name, value)
    __swig_getmethods__ = {}
    for _s in [CCopasiProblem]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CMCAProblem, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _COPASI.new_CMCAProblem(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _COPASI.delete_CMCAProblem
    __del__ = lambda self : None;
    def setModel(self, *args): return _COPASI.CMCAProblem_setModel(self, *args)
    def setInitialState(self, *args): return _COPASI.CMCAProblem_setInitialState(self, *args)
    def setSteadyStateRequested(self, *args): return _COPASI.CMCAProblem_setSteadyStateRequested(self, *args)
    def isSteadyStateRequested(self): return _COPASI.CMCAProblem_isSteadyStateRequested(self)
    def getSubTask(self): return _COPASI.CMCAProblem_getSubTask(self)
CMCAProblem_swigregister = _COPASI.CMCAProblem_swigregister
CMCAProblem_swigregister(CMCAProblem)

TriUnspecified=-1
TriFalse=0
TriTrue=1

CCopasiRootContainer.init=_COPASI.CCopasiRootContainer_init
CCopasiRootContainer.destroy=_COPASI.CCopasiRootContainer_destroy
CCopasiRootContainer.getRoot=_COPASI.CCopasiRootContainer_getRoot
CCopasiRootContainer.getFunctionList=_COPASI.CCopasiRootContainer_getFunctionList
CCopasiRootContainer.getDatamodelList=_COPASI.CCopasiRootContainer_getDatamodelList
CCopasiRootContainer.addDatamodel=_COPASI.CCopasiRootContainer_addDatamodel
CCopasiRootContainer.getUndefinedFunction=_COPASI.CCopasiRootContainer_getUndefinedFunction
CCopasiRootContainer.getKeyFactory=_COPASI.CCopasiRootContainer_getKeyFactory
CCopasiRootContainer.removeDatamodel=_COPASI.CCopasiRootContainer_removeDatamodel
CCopasiRootContainer.removeDatamodelWithIndex=_COPASI.CCopasiRootContainer_removeDatamodelWithIndex

CCopasiObjectName.escape=_COPASI.CCopasiObjectName_escape
CCopasiObjectName.unescape=_COPASI.CCopasiObjectName_unescape

CCopasiMethod.TypeNameToEnum=_COPASI.CCopasiMethod_TypeNameToEnum

CEvaluationTree.create=_COPASI.CEvaluationTree_create
CEvaluationTree.copy=_COPASI.CEvaluationTree_copy

COutputAssistant.getListOfDefaultOutputDescriptions=_COPASI.COutputAssistant_getListOfDefaultOutputDescriptions
COutputAssistant.getDefaultReportIndex=_COPASI.COutputAssistant_getDefaultReportIndex
COutputAssistant.getItemName=_COPASI.COutputAssistant_getItemName
COutputAssistant.getItem=_COPASI.COutputAssistant_getItem
COutputAssistant.createDefaultOutput=_COPASI.COutputAssistant_createDefaultOutput

CCopasiMessage.peekFirstMessage=_COPASI.CCopasiMessage_peekFirstMessage
CCopasiMessage.peekLastMessage=_COPASI.CCopasiMessage_peekLastMessage
CCopasiMessage.getFirstMessage=_COPASI.CCopasiMessage_getFirstMessage
CCopasiMessage.getLastMessage=_COPASI.CCopasiMessage_getLastMessage
CCopasiMessage.getAllMessageText=_COPASI.CCopasiMessage_getAllMessageText
CCopasiMessage.clearDeque=_COPASI.CCopasiMessage_clearDeque
CCopasiMessage.getHighestSeverity=_COPASI.CCopasiMessage_getHighestSeverity
CCopasiMessage.checkForMessage=_COPASI.CCopasiMessage_checkForMessage
CCopasiMessage.size=_COPASI.CCopasiMessage_size




